<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Command Line Compress</title>
    <link href="/2025/02/24/Command%20Line%20Compress/"/>
    <url>/2025/02/24/Command%20Line%20Compress/</url>
    
    <content type="html"><![CDATA[<h1 id="command-line-compress">Command Line Compress</h1><blockquote><p>参考文章：</p><p>【1】：<a href="">https://kkocdko.site/post/202106140023</a></p></blockquote><h2 id="sevenzip">SevenZip</h2><h3 id="先安装-7zip-并添加到系统环境变量">先安装 7zip并添加到系统环境变量</h3><p>Official Site：<a href="https://www.7-zip.org/">7-Zip</a></p><h3 id="compress-command">Compress Command</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs batch"># This is 7z format<br># Compress<br>7z a -t7z -mf=BCJ2 -mhc=on -mhcf=on -m0=lzma2 -mx=9 -mfb=273 -md=256m -ms=on -mhe=on -mmt -mtm- -mtc- -mta- -mtr- Archive.7z Folder<br><br># -t (set Type of archive) switch<br># -mf=[off | on | FilterID]  on  Enables or disables filters. FilterID: Delta:&#123;N&#125;, BCJ, BCJ2, ARM64, ARM, ARMT, IA64, PPC, SPARC.<br># -mhc=[off | on]  on Enables or disables archive header compressing.<br># -m&#123;Number&#125;=&#123;MethodID&#125;[:param1][:param2] ... [:paramN]<br># -mx=[0 | 1 | 3 | 5 | 7 | 9 ]  5  Sets level of compression.<br># -ms=[off | on | [e] [&#123;N&#125;f] [&#123;N&#125;b | &#123;N&#125;k | &#123;N&#125;m | &#123;N&#125;g | &#123;N&#125;t]]  on  Sets solid mode.<br># -mhe=[off | on]  off Enables or disables archive header encryption.<br># -mmt=[off | on | &#123;N&#125;]  on Sets multithreading mode.<br># -mtm=[off | on]  on  Stores last Modified timestamps for files.<br># -mtc=[off | on]  off  Stores Creation timestamps for files.<br># -mta=[off | on]  off  Stores last Access timestamps for files.<br># -mtr=[off | on]  on  Stores file attributes.<br><br># Decompress<br>7z x -o ArchiveFile ExtraFolder<br></code></pre></td></tr></table></figure><h2 id="tar">Tar</h2><ul><li>Tar also can use with gzip bzip2 xz zstd lzip...</li></ul><h3 id="compress-command-1">Compress Command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># tar use with gzip</span><br><span class="hljs-comment"># Compress </span><br><span class="hljs-comment"># -c:Compress</span><br><span class="hljs-comment"># -z(--gzip):Use Gzip</span><br><span class="hljs-comment"># -v:Detail Infomation</span><br><span class="hljs-comment"># -p:Keep Origin Privilege</span><br><span class="hljs-comment"># -f:Archive Name</span><br>tar -czvpf Archive.tar.gz Folder<br><span class="hljs-comment"># DeCompress</span><br>tar -xzvpf Archive.tgz<br><br><span class="hljs-comment"># tar use with bzip2</span><br>tar -cjvpf Archive.tar.bz2 Folder<br><span class="hljs-comment"># DeCompress</span><br>tar -xjvpf Archive.tar.bz2<br><br><span class="hljs-comment"># tar use with xz</span><br>tar -cJvpf Archive.tar.xz Folder<br><span class="hljs-comment"># DeCompress</span><br>tar -xJvpf Archive.txz<br><br><span class="hljs-comment"># tar use with zstd</span><br>tar --zstd -cpf Archive.tar.zst Folder<br><span class="hljs-comment"># DeCompress</span><br>tar --zstd -xpf Archive.tzst<br></code></pre></td></tr></table></figure><h3 id="alternative-steps">Alternative Steps</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># tar</span><br>tar -cvpf Archive.tar Folder<br><br><span class="hljs-comment"># Compress</span><br><span class="hljs-comment"># with gzip</span><br>gzip Archive.tar<br><span class="hljs-comment"># with bzip2</span><br>bzip2 Archive.tar<br><span class="hljs-comment"># with xz</span><br>xz Archive.tar<br><span class="hljs-comment"># with zstd</span><br>zstd Archive.tar<br><br><span class="hljs-comment"># DeCompress</span><br><span class="hljs-comment"># with gzip</span><br>gzip -d Archive.tar.gz<br><span class="hljs-comment"># with bzip2</span><br>bzip2 -d Archive.tar.bz2<br><span class="hljs-comment"># with xz</span><br>xz -d Archive.tar.xz<br><span class="hljs-comment"># with zstd</span><br>zstd -d Archive.tar.zst<br></code></pre></td></tr></table></figure><h3 id="best-compress">best compress</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Gzip</span><br>gzip --best Archive.tar<br><span class="hljs-comment"># Zstd</span><br>zstd --best Archive.tar<br><span class="hljs-comment"># or</span><br>zstd --22 Archive.tar<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Compress</tag>
      
      <tag>7Zip</tag>
      
      <tag>Archive</tag>
      
      <tag>Tarball</tag>
      
      <tag>Zip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 常用</title>
    <link href="/2025/02/24/Windows%E5%B8%B8%E7%94%A8/"/>
    <url>/2025/02/24/Windows%E5%B8%B8%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-常用">Windows 常用</h1><h2 id="常用的一些管理工具和实用程序">常用的一些管理工具和实用程序</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 组策略编辑器，用于配置和管理操作系统和应用程序的组策略设置<br>gepdit.msc<br># 查看和管理 Windows 系统上运行的服务，包括启动、停止和配置服务属性<br>services.msc<br># 用于管理本地计算机上的用户帐户和组<br>lusrmgr.msc<br># 注册表编辑器<br>regedit<br># 程序和功能控制面板，卸载或更改已安装的程序<br>appwiz.cpl<br># 管理用户帐户并配置与用户登录相关的设置<br>netplwiz<br># 系统信息工具，提供有关计算机硬件和软件配置的详细信息<br>msinfo32<br># 系统配置实用程序，用于管理启动程序、服务和引导选项<br>msconfig<br># Internet 属性对话框<br>inetcpl.cpl<br># 任务计划程序<br>taskschd.msc<br># 管理计算机<br>compmgmt.msc<br># 事件查看器<br>eventvwr.msc<br># 设备管理器，用于管理计算机上的硬件设备，包括安装、更新和卸载驱动程序<br>devmgmt.msc<br># 本地安全策略，用于管理本地计算机的安全设置和策略<br>secpol.msc<br># 打印管理，用于管理打印机和打印队列<br>printmanagement.msc<br># IExpress Wizard：Windows 内置的工具，用于创建自解压缩的可执行文件<br>iexpress<br></code></pre></td></tr></table></figure><h2 id="合并两个文件">合并两个文件</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">copy</span> /b xxx.jpg+xxx.zip xxx.jpg<br></code></pre></td></tr></table></figure><h2 id="高级重启重启到-bios">高级重启（重启到 <code>BIOS</code>）</h2><h3 id="一般方法">一般方法：</h3><p><code>Start--&gt;Setting--&gt;Update &amp; Security--&gt;Recovery--&gt;Troubleshoot--&gt;Advanced options  --&gt;UEFI Firmware Settings</code></p><h3 id="快捷方法">快捷方法：</h3><p><code>press shift + click Restart</code>：按 <code>Shift</code>键和鼠标点击 <code>重启</code></p><h3 id="命令行方法">命令行方法：</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">shutdown /r /o<br></code></pre></td></tr></table></figure><h2 id="查看硬盘分区情况">查看硬盘分区情况</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 进入 Diskpart 工具<br>Diskpart<br># 查看分区情况<br>List volume<br># 退出工具<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><h2 id="网络出现地球图标">网络出现地球图标</h2><ul><li>Windows 10 提示网络无法连接：可以修改注册表</li></ul><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\InternetEnableActiveProbing=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="步骤记录器">步骤记录器</h2><ul><li><p>Windows 搜索 <code>步骤记录器</code> 或 <code>psr</code></p></li><li><p>Problem Steps Recorder</p></li></ul><h2 id="虚拟键盘">虚拟键盘</h2><ul><li><p>Windows 搜索 <code>屏幕键盘</code> 或 <code>osk</code></p></li><li><p>On Screen Keyboard || Operationally Soft Keyboard</p></li></ul><h2 id="数学公式">数学公式</h2><ul><li>Windows 搜索 <code>Math Input Panel</code> 或 <code>mip</code></li></ul><h2 id="字符映射表">字符映射表</h2><p>Windows 搜索 <code>字符映射表</code> 或 <code>charmap</code></p><h2 id="start-explorer-命令的用法"><code>start</code> &amp;<code>explorer</code> 命令的用法</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 打开当前目录资源管理器<br>explorer .<br><span class="hljs-built_in">start</span> .<br><br># 打开上一级目录<br>explorer ..<br><span class="hljs-built_in">start</span> ..<br><br># 打开指定目录<br>explorer &quot;C:\Users\BabyFS&quot;<br><span class="hljs-built_in">start</span> &quot;C:\Users\BabyFS&quot;<br><br># 打开新的终端窗口<br><span class="hljs-built_in">start</span><br><br># 打开命令行窗口并执行命令<br><span class="hljs-built_in">start</span> <span class="hljs-built_in">cmd</span> /k adb shell<br># 或使用下面的命令 <span class="hljs-built_in">start</span> <span class="hljs-built_in">cmd</span> /c adb shell<br># 两者区别为，前者执行完命令后，不会关闭窗口；<br># 后者执行完命令后，会直接关闭窗口。<br><br># 打开系统应用<br><span class="hljs-built_in">start</span> explorer # 打开资源管理器 或使用命令 explorer<br><span class="hljs-built_in">start</span> control # 打开控制面板 或使用命令 control<br><span class="hljs-built_in">start</span> <span class="hljs-variable">%windir%</span>\system32\Taskmgr.exe # 打开任务管理器 <br># 或使用命令 <span class="hljs-variable">%windir%</span>\system32\Taskmgr.exe<br><br># 打开应用程序<br><span class="hljs-built_in">start</span> &quot;&quot; &quot;应用完整路径&quot; <br># 注意，此处<span class="hljs-built_in">start</span>后为空格，然后是空的双引号，<br># 之后再接一个空格，最后是应用的完整路径<br></code></pre></td></tr></table></figure><h2 id="打开启动列表资料夹">打开启动列表资料夹</h2><ul><li><code>shell:startup</code></li></ul><h2id="diskgenius-清除分区空闲空间后硬盘满了解决方法"><code>DiskGenius</code>清除分区空闲空间后硬盘满了解决方法</h2><p>用命令 <code>chkdsk D: /f</code></p><h2 id="windows-10-关闭键盘笔记本电脑外接键盘用">Windows 10关闭键盘（笔记本电脑外接键盘用）</h2><ul><li><p>用 <code>sc config i8042prt start=auto</code>是恢复不了的，</p></li><li><p>要用 <code>sc config i8042prt start=demand</code> 才行。</p></li><li><p>对应的注册表位置：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\i8042prt</span>]<br><span class="hljs-string">&quot;Start&quot;</span>=dword:<span class="hljs-number">00000003</span> <span class="hljs-comment">// 对应start= demand，服务类型：手动</span><br><span class="hljs-string">&quot;Start&quot;</span>=dword:<span class="hljs-number">00000004</span> <span class="hljs-comment">// 对应start= disabled，服务类型：禁用</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="进入-windows-10-数字激活界面">进入 Windows 10 数字激活界面</h2><ul><li>使用命令 <code>slui 4</code></li></ul><h2 id="windows-查看激活状态">Windows 查看激活状态</h2><ul><li>使用命令 <code>slmgr.vbs -xpr</code></li></ul><h2 id="恶意软件删除工具">恶意软件删除工具</h2><ul><li>搜索运行 <code>mrt</code></li></ul><h2 id="directx-诊断工具"><code>DirectX</code> 诊断工具</h2><ul><li>搜索运行 <code>dxdiag</code></li></ul><h2 id="专用字符编辑程序">专用字符编辑程序</h2><ul><li>Windows 搜索 <code>专用字符编辑程序</code> 或<code>eudcedit</code></li></ul><h2 id="任务计划程序">任务计划程序</h2><ul><li>Windows 搜索 <code>任务计划程序</code></li><li>或者右键此电脑，点击管理，再点击任务计划程序</li><li>或者用 <code>taskschd.msc</code></li></ul><h2 id="创建一个计划任务">创建一个计划任务</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># /create：创建一个新的任务<br># /tn shut：指定任务的名称为 &quot;shut&quot;<br># /tr &quot;shutdown -s -f&quot;：指定任务要执行的命令<br># /sc once：设置任务的计划类型为一次性执行<br># /st <span class="hljs-number">23</span>:<span class="hljs-number">00</span>：指定任务的开始时间为晚上 <span class="hljs-number">11</span> 点（<span class="hljs-number">23</span>:<span class="hljs-number">00</span>）<br><br>schtasks /create /tn shut /tr &quot;shutdown -s -f&quot; /sc once /st <span class="hljs-number">23</span>:<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 网络有各种问题解决方法</title>
    <link href="/2025/02/24/Windows%20%E7%BD%91%E7%BB%9C%E6%9C%89%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2025/02/24/Windows%20%E7%BD%91%E7%BB%9C%E6%9C%89%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-网络有各种问题解决方法">Windows网络有各种问题解决方法</h1><blockquote><p>【参考文章】</p><p>【1】：https://blog.csdn.net/m0_37876745/article/details/123963717</p></blockquote><p>使用管理员权限打开<ahref="https://so.csdn.net/so/search?q=命令行&amp;spm=1001.2101.3001.7020">命令行</a>，连续输入以下四个语句就可解决问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">netsh winsock reset <br>netsh int ip reset all<br>netsh winhttp reset proxy<br>ipconfig /flushdns<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 删除多余的以太网</title>
    <link href="/2025/02/24/Windows%20%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E7%9A%84%E4%BB%A5%E5%A4%AA%E7%BD%91/"/>
    <url>/2025/02/24/Windows%20%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E7%9A%84%E4%BB%A5%E5%A4%AA%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-删除多余的以太网">Windows 删除多余的以太网</h1><blockquote><p>【参考文章】 【1】：<ahref="https://zhidao.baidu.com/question/532129694691067525.html#:~:text=Win10%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E7%9A%84%E4%BB%A5%E5%A4%AA%E7%BD%91%E6%95%99%E7%A8%8B%201%20%E6%89%93%E5%BC%80%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%20%E6%8C%89%E4%B8%8B%20WIN%2BR%20%E9%94%AE%E6%89%93%E5%BC%80%E8%BF%90%E8%A1%8C%E7%AA%97%E5%8F%A3%EF%BC%8C%E8%BE%93%E5%85%A5%20regedit%20%E5%B9%B6%E6%8C%89%E7%A1%AE%E5%AE%9A%EF%BC%8C%E4%BB%A5%E6%89%93%E5%BC%80%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%BC%96%E8%BE%91%E5%99%A8%E3%80%82,4%20%E5%88%A0%E9%99%A4%E6%9C%AA%E7%AE%A1%E7%90%86%E7%9A%84%E7%BD%91%E7%BB%9C%E7%AD%BE%E5%90%8D%EF%BC%9A%20%E6%8E%A5%E7%9D%80%EF%BC%8C%E5%B1%95%E5%BC%80%20HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsNTCurrentVersionNetworkListSignaturesUnmanaged%E3%80%82%20...%205%20%E9%87%8D%E5%90%AF%E7%94%B5%E8%84%91%EF%BC%9A%20%E5%AE%8C%E6%88%90%E4%B8%8A%E8%BF%B0%E6%93%8D%E4%BD%9C%E5%90%8E%EF%BC%8C%E9%87%8D%E5%90%AF%E7%94%B5%E8%84%91%E4%BB%A5%E4%BD%BF%E6%9B%B4%E6%94%B9%E7%94%9F%E6%95%88%E3%80%82">Win10怎么删除多余的以太网？</a></p></blockquote><ul><li>打开注册表：按住 <code>Win+r</code> 键打开运行，在里面输入<code>regedit</code> 确定即打开注册表</li><li>按照路径<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles\</code>在注册表中进行定位</li><li>可以看到在 <code>Profiles</code>下有很多网络配置，看情况进行多余的以太网删除</li><li>然后在<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Signatures\Unmanaged</code>路径下删除未管理的网络配置</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis 记录</title>
    <link href="/2025/02/23/MyBatis_Record/"/>
    <url>/2025/02/23/MyBatis_Record/</url>
    
    <content type="html"><![CDATA[<h1 id="mybatis-记录基于-springboot">MyBatis 记录（基于SpringBoot）</h1><h2 id="helloworld-程序记录">1. HelloWorld 程序记录</h2><ul><li><p>准备数据库环境：<code>helloworld.sql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `mybatis<span class="hljs-operator">-</span>example`;<br><br>USE `mybatis<span class="hljs-operator">-</span>example`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_emp`(<br>  id <span class="hljs-type">INT</span> AUTO_INCREMENT,<br>  emp_name <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>),<br>  age <span class="hljs-type">INT</span>,<br>  emp_salary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>),<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_emp`(emp_name,age,emp_salary) <span class="hljs-keyword">VALUES</span>(&quot;tom&quot;,<span class="hljs-number">18</span>,<span class="hljs-number">200.33</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_emp`(emp_name,age,emp_salary) <span class="hljs-keyword">VALUES</span>(&quot;jerry&quot;,<span class="hljs-number">19</span>,<span class="hljs-number">666.66</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_emp`(emp_name,age,emp_salary) <span class="hljs-keyword">VALUES</span>(&quot;andy&quot;,<span class="hljs-number">20</span>,<span class="hljs-number">777.77</span>);<br></code></pre></td></tr></table></figure></li><li><p>创建项目</p></li><li><p>配置数据源：<code>application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure></li><li><p>创建 <code>JavaBean</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Double empSalary;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>DAO</code> 接口，命名一般为<code>xxxMapper</code>，不用写实现类，有了 <code>MyBatis</code> 后就用<code>xml</code> 配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    Emp <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Integer id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>xml</code> 配置文件，如果用的是 <code>IDEA</code>开发，装一个 <code>MyBatisX</code> 插件方便编写配置文件（在<code>DAO</code> 接口上 <code>Alt + Enter</code>），一般生成到<code>src/main/resources/mapper</code> 下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- namespace 防止冲突，如果有多个 mapper 而有 id 相同就会冲突，此时就用 namespace 进行区分 --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- id 代表 DAO 中的方法名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- resultType 表示方法的返回值类型，要写全类名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- #&#123;&#125; 动态取值，括号内填 DAO 中的方法的参数名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>上面配置有以下注意：</p><ul><li><code>namespace</code> 防止冲突，如果有多个 <code>mapper</code> 而有<code>id</code> 相同就会冲突，此时就用 <code>namespace</code>进行区分</li><li><code>id</code> 代表 <code>DAO</code> 中的方法名</li><li><code>resultType</code> 表示方法的返回值类型，要写全类名</li><li><code>#&#123;&#125;</code> 动态取值，括号内填 <code>DAO</code>中的方法的参数名</li></ul></li><li><p>上面配置文件是 <code>mapper</code> 配置文件，对应的<code>DAO</code> 接口就是 <code>mapper</code> 接口</p></li><li><p>告诉 <code>MyBatis</code> 配置文件在哪，配置<code>application.properties</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 表示在类路径下 mapper 文件夹下的所有 xml 文件都是 mapper 配置文件</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/**.xml</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.dao.EmpMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisHelloworldApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpMapper empMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> empMapper.getEmpById(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;empById = &quot;</span> + empById);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查出来了，但 <code>name</code> 和 <code>salary</code>字段没了，这是因为 <code>JavaBean</code>的字段和数据库上的字段名没有对应，修改 <code>mapper</code>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- namespace 防止冲突，如果有多个 mapper 而有 id 相同就会冲突，此时就用 namespace 进行区分 --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- id 代表 DAO 中的方法名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- resultType 表示方法的返回值类型，要写全类名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- #&#123;&#125; 动态取值，括号内填 DAO 中的方法的参数名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select id, emp_name empName, age, emp_salary empSalary<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再运行，都查出来了</p></li></ul><h3 id="总结记录">总结记录</h3><ul><li>导入 <code>MyBatis</code> 依赖</li><li>配置数据源信息</li><li>编写一个 <code>JavaBean</code> 对应数据库一个表</li><li>编写 <code>Mapper</code> 接口（<code>DAO</code> 接口），给接口加一个<code>@Mapper</code> 注解</li><li>编写 <code>mapper</code> 配置文件，在其中写 <code>sql</code>语句，注意 <code>sql</code> 语句不用以 <code>;</code> 结尾</li><li>告诉 <code>MaBatis</code> 所有的 <code>mapper</code>配置文件在哪个文件夹下</li></ul><h3 id="mapper-接口的实现类记录"><code>Mapper</code>接口的实现类记录</h3><ul><li><p><code>Mapper</code> 接口的实现类是什么，编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisHelloworldApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;empMapper = &quot;</span> + empMapper.getClass());<br>        <br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> empMapper.getEmpById(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;empById = &quot;</span> + empById);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试发现是一个动态代理对象</p></li></ul><h3 id="helloworld-程序增删改查单个记录">HelloWorld程序增删改查单个记录</h3><ul><li><p>接着上面的程序继续写，先写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据 id 查询员工信息</span><br>    Emp <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-comment">// 添加员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Emp emp)</span>;<br><br>    <span class="hljs-comment">// 更新员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Emp emp)</span>;<br><br>    <span class="hljs-comment">// 根据 id 删除员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">(Integer id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- namespace 防止冲突，如果有多个 mapper 而有 id 相同就会冲突，此时就用 namespace 进行区分 --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- id 代表 DAO 中的方法名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- resultType 表示方法的返回值类型，要写全类名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- #&#123;&#125; 动态取值，括号内填 DAO 中的方法的参数名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- Emp getEmpById(Integer id); --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select id, emp_name empName, age, emp_salary empSalary<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- void addEmp(Emp emp); --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当传过来的是对象的时候，sql 语句中的动态参数直接写对象的属性就可以，不用 对象.xxx --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmp&quot;</span>&gt;</span><br>        insert into t_emp(emp_name, age, emp_salary)<br>        values (#&#123;empName&#125;, #&#123;age&#125;, #&#123;empSalary&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- void updateEmp(Emp emp); --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>        update t_emp<br>        set emp_name   = #&#123;empName&#125;,<br>            age        = #&#123;age&#125;,<br>            emp_salary = #&#123;empSalary&#125;<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- void deleteEmpById(Integer id); --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteEmpById&quot;</span>&gt;</span><br>        delete<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisHelloworldApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCRUD</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*Emp emp = new Emp();</span><br><span class="hljs-comment">        emp.setEmpName(&quot;zhangsan&quot;);</span><br><span class="hljs-comment">        emp.setAge(20);</span><br><span class="hljs-comment">        emp.setEmpSalary(10000.0);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 添加</span><br><span class="hljs-comment">        empMapper.addEmp(emp);*/</span><br><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setId(<span class="hljs-number">4</span>);<br>        emp.setEmpName(<span class="hljs-string">&quot;lisi&quot;</span>);<br>        emp.setAge(<span class="hljs-number">19</span>);<br>        emp.setEmpSalary(<span class="hljs-number">10000.0</span>);<br><br>        <span class="hljs-comment">// 修改</span><br>        empMapper.updateEmp(emp);<br>        <br>        <span class="hljs-comment">// 删除</span><br>        empMapper.deleteEmpById(<span class="hljs-number">4</span>);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意：如果添加信息成功后，如何获取到自增的 <code>id</code>，用<code>MyBatis</code> 的主键回填机制：</p><ul><li><p>在 <code>mapper</code> 配置文件中的语句上添加一个<code>useGeneratedKeys</code> 参数并赋值为 <code>true</code></p></li><li><p>再添加一个 <code>keyProperty</code> 参数，指定自动生成的<code>id</code> 封装到对象上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpMapper&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- void addEmp(Emp emp); --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当传过来的是对象的时候，sql 语句中的动态参数直接写对象的属性就可以，不用 对象.xxx --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 主键回填机制两步 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- useGeneratedKeys：使用自动生成的 id --&gt;</span><br>    <span class="hljs-comment">&lt;!-- keyProperty：指定生成的 id 回填到哪个属性上 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmp&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into t_emp(emp_name, age, emp_salary)<br>        values (#&#123;empName&#125;, #&#123;age&#125;, #&#123;empSalary&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>这样，在添加后就可以获取到 <code>id</code> 了，测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisHelloworldApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCRUD</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setEmpName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        emp.setAge(<span class="hljs-number">20</span>);<br>        emp.setEmpSalary(<span class="hljs-number">10000.0</span>);<br><br>        <span class="hljs-comment">// 添加</span><br>        empMapper.addEmp(emp);<br><br>        <span class="hljs-comment">// 获取自增 id</span><br>        System.out.println(<span class="hljs-string">&quot;emp.getId() = &quot;</span> + emp.getId());<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="helloworld-程序查询所有记录">HelloWorld 程序查询所有记录</h3><ul><li><p>如果查询的是多条数据，返回的是集合，此时配置文件中的<code>resultType</code> 不用写集合类型，就写集合泛型就可以了</p></li><li><p>先写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据 id 查询员工信息</span><br>    Emp <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-comment">// 查询所有员工信息</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getAllEmp</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 添加员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Emp emp)</span>;<br><br>    <span class="hljs-comment">// 更新员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Emp emp)</span>;<br><br>    <span class="hljs-comment">// 根据 id 删除员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">(Integer id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- namespace 防止冲突，如果有多个 mapper 而有 id 相同就会冲突，此时就用 namespace 进行区分 --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- id 代表 DAO 中的方法名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- resultType 表示方法的返回值类型，要写全类名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- #&#123;&#125; 动态取值，括号内填 DAO 中的方法的参数名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- Emp getEmpById(Integer id); --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select id, emp_name empName, age, emp_salary empSalary<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- List&lt;Emp&gt; getAllEmp(); --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmp&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select id, emp_name empName, age, emp_salary empSalary<br>        from t_emp<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- void addEmp(Emp emp); --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当传过来的是对象的时候，sql 语句中的动态参数直接写对象的属性就可以，不用 对象.xxx --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 主键回填机制两步 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- useGeneratedKeys：使用自动生成的 id --&gt;</span><br>    <span class="hljs-comment">&lt;!-- keyProperty：指定生成的 id 回填到哪个属性上 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmp&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into t_emp(emp_name, age, emp_salary)<br>        values (#&#123;empName&#125;, #&#123;age&#125;, #&#123;empSalary&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- void updateEmp(Emp emp); --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>        update t_emp<br>        set emp_name   = #&#123;empName&#125;,<br>            age        = #&#123;age&#125;,<br>            emp_salary = #&#123;empSalary&#125;<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- void deleteEmpById(Integer id); --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteEmpById&quot;</span>&gt;</span><br>        delete<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpMapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisHelloworldApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; allEmp = empMapper.getAllEmp();<br><br>        <span class="hljs-keyword">for</span> (Emp emp : allEmp) &#123;<br>            System.out.println(emp);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="开启-camel-case-属性与-snake-case-字段的映射记录">开启<code>camel case</code> 属性与 <code>snake case</code>字段的映射记录</h3><ul><li><p>如果在 <code>JavaBean</code>中的属性名用的是驼峰命名，而在数据库中的字段用的是蛇形命名，那么可以开启<code>MyBatis</code> 的自动映射功能</p></li><li><p>比如属性中的 <code>oneTwoThree</code> 和字段中的<code>one_two_three</code> 就可以自动映射</p></li><li><p>在 <code>application.properties</code> 文件中进行配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure></li><li><p>再写 <code>mapper</code> 配置文件进行测试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- List&lt;Emp&gt; getAllEmp(); --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmp&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    <span class="hljs-comment">// 查询所有员工信息</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getAllEmp</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpMapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisHelloworldApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; allEmp = empMapper.getAllEmp();<br><br>        <span class="hljs-keyword">for</span> (Emp emp : allEmp) &#123;<br>            System.out.println(emp);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="开启日志记录">开启日志记录</h3><ul><li><p>在 <code>application.properties</code>配置文件中进行配置，格式为：<code>loggin.level.包名=debug</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.level.org.wind.mybatis.mapper</span>=<span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure></li><li><p>日志级别有以下几个：</p><ul><li>trace</li><li>debug</li><li>info</li><li>warn</li><li>error</li><li>fatal</li><li>off</li></ul></li></ul><h3 id="和-的区别记录"><code>#&#123;&#125;</code> 和 <code>$&#123;&#125;</code>的区别记录</h3><ul><li><code>#&#123;&#125;</code> 取值是预编译方式，就是<code>PreparedStatement</code>，预留一个参数占位符编译 <code>sql</code>语句，再给占位符赋值</li><li><code>$&#123;&#125;</code> 取值是拼接方式，就是<code>Statement</code>，直接编译有参数值的 <code>sql</code>语句，使用不当容易发生 <code>sql</code> 注入的问题</li></ul><h2 id="参数取值记录">2. 参数取值记录</h2><ul><li><p>在 <code>mapper</code> 配置文件中，如何获取在 <code>Mapper</code>接口中写的方法参数呢？</p><table><thead><tr><th>传参形式</th><th>示例</th><th>取值方式</th></tr></thead><tbody><tr><td>单个参数（普通类型）</td><td><code>getEmploy(Long id)</code></td><td><code>#&#123;变量名&#125;</code> 或者 <code>#&#123;任意名&#125;</code></td></tr><tr><td>单个参数（List 类型）</td><td><code>getEmploy(List&lt;Long&gt; id)</code></td><td><code>#&#123;变量名[索引]&#125;</code>（这里不能用任意名）</td></tr><tr><td>单个参数（对象类型）</td><td><code>addEmploy(Emp e)</code></td><td><code>#&#123;对象中的属性名&#125;</code>（本质是调用了 <code>getter</code>方法）</td></tr><tr><td>单个参数（Map 类型）</td><td><code>addEmploy(Map&lt;String,Object&gt; m)</code></td><td><code>#&#123;map中的key名&#125;</code></td></tr><tr><td>多个参数（无 <code>@Param</code> 注解）</td><td><code>getEmploy(Long id, String name)</code></td><td><code>#&#123;变量名&#125;</code>（新版才支持）、<code>#&#123;arg0&#125;</code>（表示第一个参数，旧版才可用）、<code>#&#123;param1&#125;</code>（表示第一个参数）</td></tr><tr><td>多个参数（有 <code>@Param</code> 注解）</td><td><code>getEmploy(@Param("id") Long id, @Param("name") String name)</code></td><td><code>#&#123;@Param注解指定的名&#125;</code></td></tr><tr><td>多个参数混合</td><td><code>Emp getEmployByMix(@Param("id") Integer id,@Param("map") Map&lt;String, Object&gt; map,@Param("ages") List&lt;Integer&gt; ages,@Param("e") Emp e);</code></td><td><code>#&#123;id&#125;</code><br/><code>#&#123;map.name&#125;</code><br/><code>#&#123;ages[0]&#125;</code><br/><code>#&#123;e.empSalary&#125;</code></td></tr></tbody></table></li></ul><h3 id="单个参数普通类型记录">单个参数（普通类型）记录</h3><ul><li><p>直接用 <code>#&#123;变量名&#125;</code></p></li><li><p>比如接口中有一方法：<code>getEmploy(Long id)</code>，只有一个<code>id</code> 参数</p></li><li><p>在配置文件中就是：<code>#&#123;id&#125;</code>，或者：<code>#&#123;abc&#125;</code>，取的时候与名字无关，因为只有一个参数</p></li><li><p><code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpParamMapper</span> &#123;<br><br>    Emp <span class="hljs-title function_">getEmploy</span><span class="hljs-params">(Integer id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpParamMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmploy&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpParamMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpParamMapper empParamMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParam1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">employ</span> <span class="hljs-operator">=</span> empParamMapper.getEmploy(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;employ = &quot;</span> + employ);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="单个参数list-类型记录">单个参数（List 类型）记录</h3><ul><li><p>直接用 <code>#&#123;变量名[索引]&#125;</code></p></li><li><p>比如接口中有一方法：<code>getEmploy(List&lt;Long&gt; id)</code>，只有一个参数且参数类型为<code>List</code></p></li><li><p>在配置文件中就是：<code>#&#123;id[索引]&#125;</code></p></li><li><p><code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpParamMapper</span> &#123;<br><br>    <span class="hljs-comment">// 假设获取集合中第 1 个元素</span><br>    Emp <span class="hljs-title function_">getEmploy02</span><span class="hljs-params">(List&lt;Integer&gt; id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpParamMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmploy02&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where id = #&#123;id[0]&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpParamMapper;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpParamMapper empParamMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParam2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">employ02</span> <span class="hljs-operator">=</span> empParamMapper.getEmploy02(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br>        System.out.println(<span class="hljs-string">&quot;employ02 = &quot;</span> + employ02);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="单个参数对象类型记录">单个参数（对象类型）记录</h3><ul><li><p>直接用 <code>#&#123;对象中的属性名&#125;</code></p></li><li><p><code>Emp</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Double empSalary;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口中有一方法： <code>addEmploy(Emp e)</code></p></li><li><p>在配置文件中就是：</p><ul><li><code>#&#123;id&#125;</code>：取出 <code>id</code> 属性</li><li><code>#&#123;empName&#125;</code>：取出 <code>empName</code> 属性</li><li><code>#&#123;age&#125;</code>：取出 <code>age</code> 属性</li><li><code>#&#123;empSalary&#125;</code>：取出 <code>empSalary</code> 属性</li></ul></li><li><p>不能用<code>#&#123;e.id&#125;</code>，这种写法只有在多个参数时会出现，其它属性同理</p></li><li><p>其本质就是调用了属性的 <code>getter</code> 方法，如果在<code>Emp</code> 类中写一个 <code>getMyId</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Double empSalary;<br>    <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getMyId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>那么在配置文件中获取 <code>id</code>属性也可以用：<code>#&#123;myId&#125;</code></p></li><li><p><code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpParamMapper</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmploy</span><span class="hljs-params">(Emp e)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpParamMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmploy&quot;</span>&gt;</span><br>        insert into t_emp(emp_name, age, emp_salary)<br>        values (#&#123;empName&#125;, #&#123;age&#125;, #&#123;empSalary&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpParamMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpParamMapper empParamMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParam3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setEmpName(<span class="hljs-string">&quot;wangwu&quot;</span>);<br>        emp.setAge(<span class="hljs-number">20</span>);<br>        emp.setEmpSalary(<span class="hljs-number">10000.0D</span>);<br><br>        empParamMapper.addEmploy(emp);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="单个参数map-类型记录">单个参数（Map 类型）记录</h3><ul><li><p>直接用 <code>#&#123;map中key的名&#125;</code></p></li><li><p><code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpParamMapper</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmploy02</span><span class="hljs-params">(Map&lt;String, Object&gt; m)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpParamMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmploy02&quot;</span>&gt;</span><br>        insert into t_emp(emp_name, age, emp_salary)<br>        values (#&#123;name&#125;, #&#123;age&#125;, #&#123;salary&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpParamMapper;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpParamMapper empParamMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParam4</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zhaoliu&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">25</span>);<br>        map.put(<span class="hljs-string">&quot;salary&quot;</span>, <span class="hljs-number">6000.0D</span>);<br><br>        empParamMapper.addEmploy02(map);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="多个参数无-param-注解记录">多个参数（无 <code>@Param</code>注解）记录</h3><ul><li><p>直接用 <code>#&#123;参数名&#125;</code>（只在新版本可用）</p></li><li><p>或者用 <code>#&#123;arg索引&#125;</code>（只在低版本可用），索引从 0开始，例如：<code>#&#123;arg0&#125;</code> 取第 1 个参数</p></li><li><p>又或者用 <code>#&#123;param索引&#125;</code>，索引从 1开始，例如：<code>#&#123;param1&#125;</code> 取第 1 个参数</p></li><li><p><code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpParamMapper</span> &#123;<br><br>    Emp <span class="hljs-title function_">getEmployByIdAndName</span><span class="hljs-params">(Integer id, String name)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpParamMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmployByIdAndName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where id = #&#123;id&#125;<br>          and emp_name = #&#123;name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpParamMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpParamMapper empParamMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParam5</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> empParamMapper.getEmployByIdAndName(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;tom = &quot;</span> + tom);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="多个参数有-param-注解记录">多个参数（有 <code>@Param</code>注解）记录</h3><ul><li><p>直接用 <code>#&#123;@Param注解指定的参数名&#125;</code></p></li><li><p><code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpParamMapper</span> &#123;<br>    <br>    Emp <span class="hljs-title function_">getEmployByIdAndName02</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empId&quot;)</span> Integer id, <span class="hljs-meta">@Param(&quot;empName&quot;)</span> String name)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpParamMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmployByIdAndName02&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where id = #&#123;empId&#125;<br>          and emp_name = #&#123;empName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpParamMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpParamMapper empParamMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParam6</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> empParamMapper.getEmployByIdAndName02(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;tom = &quot;</span> + tom);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="多个参数混合记录">多个参数混合记录</h3><ul><li><p><code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpParamMapper</span> &#123;<br><br>    <span class="hljs-comment">// 假设 id 从 id 中取，name 从 map 中取，age 从 ages 中的第 1 个元素取，salary 从 e 中取</span><br>    Emp <span class="hljs-title function_">getEmployByMix</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params">                       <span class="hljs-meta">@Param(&quot;map&quot;)</span> Map&lt;String, Object&gt; map,</span><br><span class="hljs-params">                       <span class="hljs-meta">@Param(&quot;ages&quot;)</span> List&lt;Integer&gt; ages,</span><br><span class="hljs-params">                       <span class="hljs-meta">@Param(&quot;e&quot;)</span> Emp e)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpParamMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmployByMix&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where id = #&#123;id&#125;<br>          and emp_name = #&#123;map.name&#125;<br>          and age = #&#123;ages[0]&#125;<br>          and emp_salary = #&#123;e.empSalary&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpParamMapper;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpParamMapper empParamMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParamMix</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br><br>        List&lt;Integer&gt; ages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ages.add(<span class="hljs-number">18</span>);<br><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setEmpSalary(<span class="hljs-number">200.33000D</span>);<br><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">employByMix</span> <span class="hljs-operator">=</span> empParamMapper.getEmployByMix(<span class="hljs-number">1</span>, map, ages, emp);<br>        System.out.println(<span class="hljs-string">&quot;employByMix = &quot;</span> + employByMix);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="注解-param-记录">注解 <code>@Param</code> 记录</h3><ul><li>用于指定 <code>mapper</code> 配置文件中的 <code>sql</code>语句取参数时的参数名</li><li>注解参数 <code>value</code>：指定取参数时的参数名</li><li>比如 <code>@Param("abc")</code> 在 <code>mapper</code>配置文件中对应的取值为 <code>#&#123;abc&#125;</code></li></ul><h2 id="结果处理记录">3. 结果处理记录</h2><h3 id="返回普通数据结果集记录">返回普通数据结果集记录</h3><ul><li><p>返回基本类型：在 <code>resultType</code> 中写以下类型</p><ul><li><p><code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>boolean</code>、<code>char</code>、<code>String</code></p></li><li><p><code>java.lang.(基本类型包装类)</code></p></li><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpReturnValueMapper</span> &#123;<br><br>    Long <span class="hljs-title function_">countEmp</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpReturnValueMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countEmp&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;</span><br>        select count(*)<br>        from t_emp<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpReturnValueMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnValueTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpReturnValueMapper empReturnValueMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> empReturnValueMapper.countEmp();<br>        System.out.println(<span class="hljs-string">&quot;l = &quot;</span> + l);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>返回普通对象：在 <code>resultType</code>中写对象的全类名，比如想获取员工的薪资用 <code>BigDecimal</code>接收：</p><ul><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpReturnValueMapper</span> &#123;<br><br>    BigDecimal <span class="hljs-title function_">getEmpSalaryById</span><span class="hljs-params">(Integer id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpReturnValueMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpSalaryById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.math.BigDecimal&quot;</span>&gt;</span><br>        select emp_salary<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpReturnValueMapper;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnValueTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpReturnValueMapper empReturnValueMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">empSalaryById</span> <span class="hljs-operator">=</span> empReturnValueMapper.getEmpSalaryById(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;empSalaryById = &quot;</span> + empSalaryById);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>普通类型有简便写法，用别名：<ahref="https://mybatis.org/mybatis-3/configuration.html#typeAliases">官方文档</a></p></li></ul><h3 id="返回集合数据结果集记录">返回集合数据结果集记录</h3><ul><li><p>返回一个 <code>List</code> 集合，泛型是 <code>JavaBean</code>类型：</p><ul><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpReturnValueMapper</span> &#123;<br><br>    List&lt;Emp&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code>配置文件，注意，此时在返回值类型中直接写泛型的类型就可以了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpReturnValueMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpReturnValueMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnValueTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpReturnValueMapper empReturnValueMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> &#123;<br>        empReturnValueMapper.getAll().forEach(System.out::println);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>返回一个 <code>Map</code> 集合：</p><ul><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.MapKey;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpReturnValueMapper</span> &#123;<br><br>    <span class="hljs-meta">@MapKey(&quot;id&quot;)</span><br>    Map&lt;Integer, Emp&gt; <span class="hljs-title function_">getAllMap</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpReturnValueMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpReturnValueMapper;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnValueTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpReturnValueMapper empReturnValueMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;Integer, Emp&gt; allMap = empReturnValueMapper.getAllMap();<br>        System.out.println(<span class="hljs-string">&quot;allMap = &quot;</span> + allMap);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意：此时返回的 <code>Map</code> 中的 <code>value</code>并不是一个 <code>Emp</code> 类型，而是一个 <code>HashMap</code>类型，可以通过测试程序验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpReturnValueMapper;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnValueTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpReturnValueMapper empReturnValueMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;Integer, Emp&gt; allMap = empReturnValueMapper.getAllMap();<br>        System.out.println(<span class="hljs-string">&quot;allMap = &quot;</span> + allMap);<br><br>        System.out.println(allMap.get(<span class="hljs-number">1</span>).getClass());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果要实现 <code>Map</code> 返回结果中的 <code>value</code>为一个 <code>Emp</code> 类型，如何实现</p><ul><li>在 <code>mapper</code> 配置文件中的返回值类型不写<code>Map</code>，写要返回的类型，即写法同 <code>List</code></li></ul></li><li><p>更改 <code>mapper</code> 配置文件，再测试程序：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpReturnValueMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>其它的返回集合也一样，比如：</p><ul><li>接口返回的是 <code>List&lt;Map&lt;String, Object&gt;&gt;</code>对应的配置文件中返回的就是 <code>map</code> ，类似于<code>List&lt;Emp&gt;</code> 就填 <code>emp</code></li><li>接口返回的是 <code>Map&lt;Long, Map&lt;String, Object&gt;&gt;</code>对应的配置文件中返回的就是 <code>map</code>，配合 <code>@MapKey</code>注解使用</li></ul></li></ul><h4 id="注解-mapkey-记录">注解 <code>@MapKey</code> 记录：</h4><ul><li>用于 <code>Mapper</code> 返回值为 <code>java.util.Map</code>时，指定 <code>Map</code> 的 <code>key</code>为哪一个返回的数据库字段</li><li>注解参数 <code>value</code>：指定返回的数据库字段名作为<code>Map</code> 中的 <code>key</code></li></ul><h3 id="返回自定义结果集记录">返回自定义结果集记录</h3><ul><li><p>可以先看看<ahref="https://mybatis.org/mybatis-3/sqlmap-xml.html#result-maps">官方文档</a></p></li><li><p>假定有那么一个情况：没有开启<code>mybatis.configuration.map-underscore-to-camel-case=true</code>配置</p></li><li><p>那么查询时就会有些查到的数据为空，比如根据 <code>id</code>查询员工信息：</p><ul><li><p>先编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.MapKey;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpReturnValueMapper</span> &#123;<br><br>    Emp <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Integer id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpReturnValueMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select * from t_emp where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpReturnValueMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnValueTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpReturnValueMapper empReturnValueMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> empReturnValueMapper.getEmpById(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;empById = &quot;</span> + empById);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>为什么查询出来后会有部分数据为空？因为 <code>resultType</code>默认规则如下：</p><ul><li>因为在查询到数据后，会调用要封装的对象的无参构造方法创建实例</li><li>再调用对应的 <code>setter</code> 方法给属性赋值</li><li>就在调用 <code>setter</code> 方法时找不到对应的 <code>setter</code>方法，所以有些数据为空</li><li>比如数据库字段为 <code>emp_name</code> 在找 <code>setter</code>方法时会找 <code>setEmp_name</code>，但对象只有 <code>empName</code>属性和 <code>setEmpName</code> 方法，所以 <code>empName</code>属性为空</li></ul></li><li><p>此时查询出来的数据有些为空，解决方法有很多：</p><ul><li><code>JavaBean</code>属性名和数据库字段名一致（不推荐这种方法）</li><li>在 <code>sql</code> 语句上用别名</li><li>开启驼峰命名自动映射</li><li>使用 <code>resultMap</code> 自定义结果集</li><li>...</li></ul></li><li><p>使用 <code>resultMap</code>返回自定义结果集，再运行测试程序，成功获取到数据：</p><ul><li><p>新建一个 <code>resultMap</code> 标签，并指定<code>resultMap</code> 标签的 <code>id</code> 参数和 <code>type</code>参数</p><ul><li>其中参数 <code>id</code> 的值是唯一的</li><li>参数 <code>type</code> 的值写要封装成的对象类型</li></ul></li><li><p>然后在 <code>resultMap</code> 标签里面写一个 <code>id</code>标签和 <code>result</code> 标签</p><ul><li>其中 <code>id</code> 标签用于指定主键间的映射规则</li><li>而 <code>result</code> 标签用于指定数据库中的字段和<code>JavaBean</code> 中的属性间的映射规则</li><li>而标签中有 <code>column</code> 和 <code>property</code> 和<code>javaType</code> 和 <code>jdbcType</code> 参数<ul><li>参数 <code>column</code> 用于指定数据库中的字段名</li><li>参数 <code>property</code> 用于指定 <code>JavaBean</code>中的对应的属性名</li><li>参数 <code>javaType</code> 用于指定 <code>JavaBean</code>中的对应的属性名的类型</li><li>参数 <code>jdbcType</code> 用于指定数据库中的对应的字段的类型</li></ul></li></ul></li><li><p>然后在查询标签中的 <code>resultMap</code> 参数中写上面的<code>resultMap</code> 标签参数 <code>id</code> 中的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpReturnValueMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自定义结果集 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;EmpRm&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- id 标签表示主键映射规则 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- column 表示数据库中的列名 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- property 表示对应的 JavaBean 中的属性名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- result 标签表示对普通列的映射规则 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- javaType 表示 JavaBean 中的属性类型 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- jdbcType 表示对应的数据库中的字段类型 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 但是默认不用写 javaType 和 jdbcType，因为会自动识别 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_salary&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empSalary&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;EmpRm&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="返回自定义结果集高级映射记录">返回自定义结果集高级映射记录</h3><ul><li><p>有时候要进行联表查询，就会出现一个级联属性，比如一个类中有一个属性是另一个类，此时就要用下面的标签进行映射了</p></li><li><p>其中 <code>resultMap</code> 标签除了有 <code>id</code> 标签和<code>type</code> 标签外，还有两个标签，即 <code>collection</code>标签和 <code>association</code> 标签</p></li><li><p>给数据库加 <code>t_customer</code> 表和 <code>t_order</code>表用于学习 <code>resultMap</code> 的 <code>collection</code> 标签和<code>association</code> 标签：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_customer`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_customer`  (<br>  `id` <span class="hljs-type">bigint</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `customer_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;客户姓名&#x27;</span>,<br>  `phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;手机号&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_customer` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;13100000000&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_customer` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;13200000000&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_customer` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;13300000000&#x27;</span>);<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_order`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_order`  (<br>  `id` <span class="hljs-type">bigint</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;订单id&#x27;</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;派送地址&#x27;</span>,<br>  `amount` <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;订单金额&#x27;</span>,<br>  `customer_id` <span class="hljs-type">bigint</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;客户id&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_order` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;西安市雁塔区&#x27;</span>, <span class="hljs-number">99.98</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_order` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;北京市&#x27;</span>, <span class="hljs-number">199.00</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_order` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;深圳市&#x27;</span>, <span class="hljs-number">299.00</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="一对一查询结果封装记录">一对一查询结果封装记录</h4><ul><li><p>写一个 <code>JavaBean</code> 类 <code>Customer.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String customerName;<br>    <span class="hljs-keyword">private</span> String phone;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再写一个 <code>JavaBean</code> 类 <code>Order.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> BigDecimal amount;<br>    <span class="hljs-keyword">private</span> Long customerId;<br><br>    <span class="hljs-keyword">private</span> Customer customer;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再写 <code>Mapper</code> 接口<code>CustomerMapper.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CustomerMapper</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写一个配置文件 <code>CustomerMapper.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.CustomerMapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再写一个 <code>Mapper</code> 接口 <code>OrderMapper</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据 id 查询订单以及下单的客户信息</span><br>    Order <span class="hljs-title function_">getOrderByIdWithCustomer</span><span class="hljs-params">(Long id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再写一个配置文件 <code>OrderMapper.xml</code>进行联表信息查询：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getOrderByIdWithCustomer&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;OrderRM&quot;</span>&gt;</span><br>        select o.*,<br>               c.id c_id,<br>               c.customer_name,<br>               c.phone<br>        from t_order o<br>                 left join t_customer c on o.customer_id = c.id<br>        where o.id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注意，此时返回类型中的 <code>customer</code>属性能成功映射吗？</p></li><li><p>编写测试程序进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.OrderMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JoinQueryTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    OrderMapper orderMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">orderByIdWithCustomer</span> <span class="hljs-operator">=</span> orderMapper.getOrderByIdWithCustomer(<span class="hljs-number">1L</span>);<br>        System.out.println(<span class="hljs-string">&quot;orderByIdWithCustomer = &quot;</span> + orderByIdWithCustomer);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发现其中的 <code>customer</code> 属性为<code>null</code>，即不能正常映射，因为没有 <code>customer</code> 对应的<code>setter</code> 方法</p></li><li><p>如何解决，当然可以在 <code>Order</code> 类中写几个<code>setter</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setC_id</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">Customer</span> <span class="hljs-variable">customer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>    customer1.setId(id);<br>    <span class="hljs-built_in">this</span>.setCustomer(customer1);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCustomer_name</span><span class="hljs-params">(String customerName)</span> &#123;<br>    <span class="hljs-type">Customer</span> <span class="hljs-variable">customer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>    customer1.setCustomerName(customerName);<br>    <span class="hljs-built_in">this</span>.setCustomer(customer1);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>    <span class="hljs-type">Customer</span> <span class="hljs-variable">customer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>    customer1.setPhone(phone);<br>    <span class="hljs-built_in">this</span>.setCustomer(customer1);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>但这很麻烦，不是想要的解决方法，此时可以用 <code>resultMap</code>自定义结果集中的 <code>association</code> 标签进行一对一关联：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;OrderRM&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;amount&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;amount&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 一对一关联 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- javaType 指定关联的属性的类型 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在 association 标签中再进行映射 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customer&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;c_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getOrderByIdWithCustomer&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;OrderRM&quot;</span>&gt;</span><br>        select o.*,<br>               c.id c_id,<br>               c.customer_name,<br>               c.phone<br>        from t_order o<br>                 left join t_customer c on o.customer_id = c.id<br>        where o.id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再运行测试程序，测试成功</p></li></ul><h4 id="一对多查询结果封装记录">一对多查询结果封装记录</h4><ul><li><p>下面再进行一对多查询，比如根据客户 <code>id</code>进行查询客户的所有订单，即一个客户对应多个订单</p></li><li><p>在 <code>Customer</code> 中新加一个属性 <code>orders</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String customerName;<br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; orders;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再写一个 <code>Mapper</code> 接口方法根据客户 <code>id</code>查询客户信息，客户信息中有订单信息，订单信息有多条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CustomerMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据 id 查询对应客户信息，其中客户类中有一个订单属性，订单属性类型为 List</span><br>    Customer <span class="hljs-title function_">getCustomerByIdWithOrders</span><span class="hljs-params">(Long id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再编写 <code>mapper</code>配置文件，此时因为返回的是一个集合，所以用 <code>collection</code>标签，标签的 <code>ofType</code> 参数用于指定集合的泛型：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.CustomerMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CutomerRM&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;c_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 使用 collection 来指明 一对N 的封装规则，即返回的是一个集合时用 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 参数 property 指定属性名 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 参数 ofType 指定集合中的类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;amount&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;amount&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 这个其实就是上面的 c_id 所以可以用 c_id 来代替 --&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;result column=&quot;customer_id&quot; property=&quot;customerId&quot;&gt;&lt;/result&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;c_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCustomerByIdWithOrders&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CutomerRM&quot;</span>&gt;</span><br>        select c.id c_id,<br>               c.customer_name,<br>               c.phone,<br>               o.*<br>        from t_customer c<br>                 left join t_order o on c.id = o.customer_id<br>        where c.id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.CustomerMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JoinQueryTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    CustomerMapper customerMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customerByIdWithOrders</span> <span class="hljs-operator">=</span> customerMapper.getCustomerByIdWithOrders(<span class="hljs-number">1L</span>);<br>        System.out.println(<span class="hljs-string">&quot;customerByIdWithOrders = &quot;</span> + customerByIdWithOrders);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="分步查询记录">分步查询记录</h4><h5 id="collection-使用分步查询记录"><code>collection</code>使用分步查询记录</h5><ul><li><p>在之前的例子中要查一个客户的订单信息就必须要把客户表和订单表进行联表查询才能得到结果</p></li><li><p>其实也可以不用联表能达到同样的效果，即分步查询：</p><ul><li>先去客户表查出客户信息</li><li>再用客户信息去订单表查出所有的订单信息</li><li>最后再对客户信息和订单信息进行封装</li></ul></li><li><p>先开启驼峰命名自动映射</p></li><li><p>用 <code>Java</code> 代码实现分步查询：</p><ul><li><p>先写一个 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderCustomerStepMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户信息</span><br>    Customer <span class="hljs-title function_">getCustomerById</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户的订单信息</span><br>    List&lt;Order&gt; <span class="hljs-title function_">getOrdersByCustomerId</span><span class="hljs-params">(Long customerId)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再写一个 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderCustomerStepMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCustomerById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>        select *<br>        from t_customer<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户的订单信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getOrdersByCustomerId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span>&gt;</span><br>        select *<br>        from t_order<br>        where customer_id = #&#123;customerId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.OrderCustomerStepMapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StepTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    OrderCustomerStepMapper orderCustomerStepMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">// 根据客户 id 查询客户信息</span><br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> orderCustomerStepMapper.getCustomerById(<span class="hljs-number">1L</span>);<br><br>        <span class="hljs-comment">// 根据客户 id 查询客户的订单信息</span><br>        List&lt;Order&gt; orders = orderCustomerStepMapper.getOrdersByCustomerId(customer.getId());<br><br>        <span class="hljs-comment">// 组合到一起</span><br>        customer.setOrders(orders);<br><br>        System.out.println(<span class="hljs-string">&quot;customer = &quot;</span> + customer);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>上面的代码是 <code>Java</code> 代码的分步写法，并不是<code>MyBatis</code> 的分步查询写法</p></li><li><p>下面再写 <code>MyBatis</code> 的分步查询写法：</p><ul><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderCustomerStepMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户信息</span><br>    Customer <span class="hljs-title function_">getCustomerById</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户的订单信息</span><br>    List&lt;Order&gt; <span class="hljs-title function_">getOrdersByCustomerId</span><span class="hljs-params">(Long customerId)</span>;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户信息和客户的订单信息</span><br>    Customer <span class="hljs-title function_">useStepGetCustomerAndOrdersById</span><span class="hljs-params">(Long customerId)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><ul><li><p>在 <code>collection</code> 标签中的 <code>select</code>参数指定要调用的查询标签的全 <code>id</code>，即<code>namespace + id</code></p></li><li><p>在 <code>collection</code> 标签中的 <code>column</code>参数指定数据库返回结果中的一个字段名作为参数传给调用的查询标签（如果查询标签需要传一个参数）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderCustomerStepMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCustomerById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>        select *<br>        from t_customer<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户的订单信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getOrdersByCustomerId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span>&gt;</span><br>        select *<br>        from t_order<br>        where customer_id = #&#123;customerId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CustomerOrdersStepRM&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 参数 select 中填的是另一个查询标签的 id 其中 id 要写全，即 Mapper 的 &quot;namespace + id&quot; --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 但在调用查询标签进行查询时，要传一个参数，如何传？用 column 参数 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 参数 column 用于把指定的列名作为参数传给查询标签需要的参数 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 这里的 ofType 参数可以不写，因为 select 指定的查询标签已经有 resultMap 或者 resultType 了 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orders&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderCustomerStepMapper.getOrdersByCustomerId&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户信息和客户的订单信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;useStepGetCustomerAndOrdersById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CustomerOrdersStepRM&quot;</span>&gt;</span><br>        select *<br>        from t_customer<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>如果调用的查询标签有多个参数需要传，则用<code>&#123;prop1=col1,prop2=col2&#125;</code> 作为 <code>column</code>参数的值：</p></li><li><p>即<code>Customer getCustomerById(@Param("cid") Long id, @Param("name") String name);</code>对应的 <code>column</code> 是<code>column="&#123;cid=id,name=customer_name&#125;"</code></p></li><li><p><code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderCustomerStepMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户信息</span><br>    Customer <span class="hljs-title function_">getCustomerById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;cid&quot;)</span> Long id, <span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span>;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户的订单信息</span><br>    List&lt;Order&gt; <span class="hljs-title function_">getOrdersByCustomerId</span><span class="hljs-params">(Long customerId)</span>;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户信息和客户的订单信息</span><br>    Customer <span class="hljs-title function_">useStepGetCustomerAndOrdersById</span><span class="hljs-params">(Long customerId)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderCustomerStepMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCustomerById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>        select *<br>        from t_customer<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户的订单信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getOrdersByCustomerId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span>&gt;</span><br>        select *<br>        from t_order<br>        where customer_id = #&#123;customerId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CustomerOrdersStepRM&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 参数 select 中填的是另一个查询标签的 id 其中 id 要写全，即 Mapper 的 &quot;namespace + id&quot; --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 但在调用查询标签进行查询时，要传一个参数，如何传？用 column 参数 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 参数 column 用于把指定的列名作为参数传给查询标签需要的参数 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 这里的 ofType 参数可以不写，因为 select 指定的查询标签已经有 resultMap 或者 resultType 了 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orders&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderCustomerStepMapper.getOrdersByCustomerId&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;&#123;cid=id,name=customer_name&#125;&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户信息和客户的订单信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;useStepGetCustomerAndOrdersById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CustomerOrdersStepRM&quot;</span>&gt;</span><br>        select *<br>        from t_customer<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.OrderCustomerStepMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StepTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    OrderCustomerStepMapper orderCustomerStepMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> orderCustomerStepMapper.useStepGetCustomerAndOrdersById(<span class="hljs-number">1L</span>);<br>        System.out.println(<span class="hljs-string">&quot;customer = &quot;</span> + customer);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="association-使用分步查询记录"><code>association</code>使用分步查询记录</h5><ul><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderCustomerStepMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户信息</span><br>    Customer <span class="hljs-title function_">getCustomerById</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户的订单信息</span><br>    List&lt;Order&gt; <span class="hljs-title function_">getOrdersByCustomerId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;customerId&quot;)</span> Long customerId)</span>;<br><br>    <span class="hljs-comment">// 根据客户 id 查询客户信息和客户的订单信息</span><br>    Customer <span class="hljs-title function_">useStepGetCustomerAndOrdersById</span><span class="hljs-params">(Long customerId)</span>;<br><br>    <span class="hljs-comment">// 根据 id 查定单信息，写单信息中有客户信息</span><br>    Order <span class="hljs-title function_">getOrderByIdAndCustomerStep</span><span class="hljs-params">(Long orderId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderCustomerStepMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCustomerById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>        select *<br>        from t_customer<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户的订单信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getOrdersByCustomerId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span>&gt;</span><br>        select *<br>        from t_order<br>        where customer_id = #&#123;customerId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CustomerOrdersStepRM&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 参数 select 中填的是另一个查询标签的 id 其中 id 要写全，即 Mapper 的 &quot;namespace + id&quot; --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 但在调用查询标签进行查询时，要传一个参数，如何传？用 column 参数 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 参数 column 用于把指定的列名作为参数传给查询标签需要的参数 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 这里的 ofType 参数可以不写，因为 select 指定的查询标签已经有 resultMap 或者 resultType 了 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orders&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderCustomerStepMapper.getOrdersByCustomerId&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据客户 id 查询客户信息和客户的订单信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;useStepGetCustomerAndOrdersById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CustomerOrdersStepRM&quot;</span>&gt;</span><br>        select *<br>        from t_customer<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;OrderCustomerStepRM&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;amount&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;amount&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 类似地，这里可以不用写 jdbcType 因为 select 查询标签有指定了 resultType --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customer&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderCustomerStepMapper.getCustomerById&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_id&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getOrderByIdAndCustomerStep&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;OrderCustomerStepRM&quot;</span>&gt;</span><br>        select *<br>        from t_order<br>        where id = #&#123;orderId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.OrderCustomerStepMapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StepTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    OrderCustomerStepMapper orderCustomerStepMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">orderByIdAndCustomerStep</span> <span class="hljs-operator">=</span> orderCustomerStepMapper.getOrderByIdAndCustomerStep(<span class="hljs-number">1L</span>);<br>        System.out.println(<span class="hljs-string">&quot;orderByIdAndCustomerStep = &quot;</span> + orderByIdAndCustomerStep);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="分步查询延迟加载记录">分步查询延迟加载记录</h5><ul><li><p>当调用有分步查询的标签时，每次都会进行分步查询，尽管不想用到分步查询的结果，也会分步查询</p></li><li><p>此时就可以用延迟加载指定只有需要用到分步查询的结果后才进行分步查询</p></li><li><p>比如，下面的测试程序就只是用到一个 <code>id</code>属性，而进行了两次查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.OrderCustomerStepMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StepTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    OrderCustomerStepMapper orderCustomerStepMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">orderByIdAndCustomerStep</span> <span class="hljs-operator">=</span> orderCustomerStepMapper.getOrderByIdAndCustomerStep(<span class="hljs-number">1L</span>);<br>        <span class="hljs-comment">// 此处只是用一下 id 属性，用不着进行分步查询</span><br>        System.out.println(orderByIdAndCustomerStep.getId());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如何解决，在 <code>application.properties</code>配置文件中添加如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 开启 mybatis 懒加载</span><br><span class="hljs-attr">mybatis.configuration.lazy-loading-enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 是否立即懒加载，即立即加载，当然不用立即加载，否则就和没设置一样</span><br><span class="hljs-attr">mybatis.configuration.aggressive-lazy-loading</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure></li><li><p>再运行测试程序，发现只查询了一次，没有进行分步查询，配置成功</p></li><li><p>那如果再需要用到分步后的结果，是什么效果？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Order;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.OrderCustomerStepMapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StepTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    OrderCustomerStepMapper orderCustomerStepMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">orderByIdAndCustomerStep</span> <span class="hljs-operator">=</span> orderCustomerStepMapper.getOrderByIdAndCustomerStep(<span class="hljs-number">1L</span>);<br>        <span class="hljs-comment">// 此处只是用一下 id 属性，用不着进行分步查询</span><br>        System.out.println(orderByIdAndCustomerStep.getId());<br><br>        Thread.sleep(<span class="hljs-number">3000</span>);<br><br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> orderByIdAndCustomerStep.getCustomer();<br>        System.out.println(<span class="hljs-string">&quot;customer = &quot;</span> + customer);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发现结果是先查询一次数据库拿到 <code>id</code> 信息打印，后<code>3</code> 秒又查了一次数据库拿到 <code>customer</code>信息，这就是延迟加载</p></li><li><p>即用到时再查询数据</p></li></ul><h4 id="多对多查询结果封装记录">多对多查询结果封装记录</h4><ul><li><p>查询所有客户信息，其中每个客户信息都有所有的订单信息</p></li><li><p>编写 <code>Mapper</code> 接口，注意是<code>CustomerMapper.java</code> 因为是查客户信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CustomerMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据 id 查询对应客户信息，其中客户类中有一个订单属性，订单属性类型为 List</span><br>    Customer <span class="hljs-title function_">getCustomerByIdWithOrders</span><span class="hljs-params">(Long id)</span>;<br>    <br>    <span class="hljs-comment">// 查询所有客户信息，并且每个客户信息都有所有的订单信息</span><br>    List&lt;Customer&gt; <span class="hljs-title function_">getAllCustomersAndOrders</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件，注意可以引用另一个<code>mapper</code> 配置文件中的查询标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.CustomerMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CutomerRM&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Customer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;c_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 使用 collection 来指明 一对N 的封装规则，即返回的是一个集合时用 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 参数 property 指定属性名 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 参数 ofType 指定集合中的类型 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Order&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;amount&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;amount&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 这个其实就是上面的 c_id 所以可以用 c_id 来代替 --&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;result column=&quot;customer_id&quot; property=&quot;customerId&quot;&gt;&lt;/result&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;c_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCustomerByIdWithOrders&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CutomerRM&quot;</span>&gt;</span><br>        select c.id c_id,<br>               c.customer_name,<br>               c.phone,<br>               o.*<br>        from t_customer c<br>                 left join t_order o on c.id = o.customer_id<br>        where c.id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllCustomersAndOrders&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.OrderCustomerStepMapper.CustomerOrdersStepRM&quot;</span>&gt;</span><br>        select *<br>        from t_customer<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Customer;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.CustomerMapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StepTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    CustomerMapper customerMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Customer&gt; allCustomersAndOrders = customerMapper.getAllCustomersAndOrders();<br>        allCustomersAndOrders.forEach(System.out::println);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="自定义结果集总结记录">自定义结果集总结记录</h4><ul><li>在 <code>mapper</code> 配置文件中写一个 <code>resultMap</code>标签，并指定 <code>id</code> 参数和 <code>type</code> 参数</li><li>在 <code>resultMap</code> 标签中，可以有<code>id</code>、<code>result</code>、<code>collection</code>、<code>association</code>、<code>constructor</code>、<code>discriminator</code>六个标签</li><li>对每个标签进行配置...</li><li>最后在查询标签中指定 <code>resultMap</code> 参数的值为上面的<code>resultMap</code> 标签中的 <code>id</code> 参数的值</li><li>分步记得不要循环引用有 <code>select</code> 标签的<code>resultMap</code></li></ul><h4 id="动态-sql-记录">动态 <code>SQL</code> 记录</h4><ul><li>根据不同条件运行不同的 <code>SQL</code> 语句，即为动态<code>SQL</code></li></ul><h5 id="if-和-where-标签记录"><code>if</code> 和 <code>where</code>标签记录</h5><ul><li><p>准备工作：</p><ul><li><p>编写 <code>JavaBean</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Double empSalary;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDynamicSQLMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据员工名和员工薪资查询员工信息</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getEmpByNameAndSalary</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                                    <span class="hljs-meta">@Param(&quot;salary&quot;)</span> BigDecimal salary)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where emp_name = #&#123;name&#125;<br>          and emp_salary = #&#123;salary&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSQLTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; emps = empDynamicSQLMapper.getEmpByNameAndSalary(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;200.33000&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;tom = &quot;</span> + emps);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h6 id="if-标签记录"><code>if</code> 标签记录</h6><ul><li><p><code>if</code> 标签用于做条件判断，其中的 <code>test</code>参数如果为真就拼接 <code>if</code>标签中的内容，如果为假则不拼接</p></li><li><p>正常查询是没有问题，但如果在传参时，有一个参数为空，会发生什么？</p><ul><li><p>更改测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSQLTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; emps = empDynamicSQLMapper.getEmpByNameAndSalary(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-literal">null</span>);<br>        System.out.println(<span class="hljs-string">&quot;tom = &quot;</span> + emps);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再次测试发现 <code>sql</code> 语句中把 <code>null</code>值给拼装进去了，即 <code>emp_salary = null</code></p></li><li><p>这样会查询数据库中 <code>emp_salary</code> 值为 <code>null</code>的数据，并不是不查 <code>emp_salary</code> 字段的数据</p></li></ul></li><li><p>如果想要有 <code>emp_salary</code> 时就查，没有就只查<code>emp_name</code> 该如何做？用动态 <code>SQL</code> 语句</p><ul><li><p>更改 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- if 标签用于做条件判断，其中的 test 参数如果为真就拼接 if 标签中的内容，如果为假则不拼接 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 name 不为 null 就拼接 emp_name = #&#123;name&#125; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 salary 不为 null 就拼接 and emp_salary = #&#123;salary&#125; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            emp_name = #&#123;name&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null&quot;</span>&gt;</span><br>            and emp_salary = #&#123;salary&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再次运行测试程序，发现查询条件没有查 <code>emp_salary</code>成功</p></li></ul></li></ul><h6 id="where-标签记录"><code>where</code> 标签记录</h6><ul><li><p><code>where</code> 标签用于解决多了 <code>and</code> 或者<code>or</code> 或者 <code>where</code> 等的问题</p></li><li><p>上面的 <code>mapper</code> 配置文件代码有个问题，就是如果只传了<code>salary</code> 参数，而没有传 <code>name</code> 属性，那<code>SQL</code> 语句就会变成<code>select * from t_emp where and emp_salary = #&#123;salary&#125;</code></p></li><li><p>并且还有一个问题就是如果两个参数都不传，那 <code>SQL</code>语句就是 <code>select * from t_emp where</code></p></li><li><p>明显上面的 <code>SQL</code>语句的语法都是错误的，可以用以下的方法解决，加个 <code>1=1</code>再在后面的条件加一个 <code>and</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- if 标签用于做条件判断，其中的 test 参数如果为真就拼接 if 标签中的内容，如果为假则不拼接 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 name 不为 null 就拼接 emp_name = #&#123;name&#125; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 salary 不为 null 就拼接 and emp_salary = #&#123;salary&#125; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        where 1=1<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            and emp_name = #&#123;name&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null&quot;</span>&gt;</span><br>            and emp_salary = #&#123;salary&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>也可以用 <code>where</code> 标签进行解决：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- if 标签用于做条件判断，其中的 test 参数如果为真就拼接 if 标签中的内容，如果为假则不拼接 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 name 不为 null 就拼接 emp_name = #&#123;name&#125; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 salary 不为 null 就拼接 and emp_salary = #&#123;salary&#125; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                emp_name = #&#123;name&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null&quot;</span>&gt;</span><br>                and emp_salary = #&#123;salary&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="set-标签记录"><code>set</code> 标签记录</h5><ul><li><p>ff</p></li><li><p>编写更新员工的代码：</p><ul><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDynamicSQLMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据员工名和员工薪资查询员工信息</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getEmpByNameAndSalary</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                                    <span class="hljs-meta">@Param(&quot;salary&quot;)</span> BigDecimal salary)</span>;<br><br>    <span class="hljs-comment">// 根据 id 更新员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Emp emp)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- if 标签用于做条件判断，其中的 test 参数如果为真就拼接 if 标签中的内容，如果为假则不拼接 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 name 不为 null 就拼接 emp_name = #&#123;name&#125; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 salary 不为 null 就拼接 and emp_salary = #&#123;salary&#125; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                emp_name = #&#123;name&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null&quot;</span>&gt;</span><br>                and emp_salary = #&#123;salary&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>        update t_emp<br>        set emp_name   = #&#123;empName&#125;,<br>            emp_salary = #&#123;empSalary&#125;,<br>            age        = #&#123;age&#125;<br>        where id = #&#123;id&#125;<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSQLTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setId(<span class="hljs-number">6</span>);<br>        emp.setEmpName(<span class="hljs-string">&quot;wangliu&quot;</span>);<br>        emp.setAge(<span class="hljs-number">20</span>);<br>        emp.setEmpSalary(<span class="hljs-number">10000.0</span>);<br><br>        empDynamicSQLMapper.updateEmp(emp);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>能够正常更新数据库中的数据</p></li><li><p>但上面的代码有一个问题，就是如果在更新数据时，更新的对象中的属性不传则数据库中的数据会为空</p></li><li><p>解决方法可以用 <code>if</code>标签，但是会出现一个新的问题，即如果前面传后面不传就会多个逗号：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>        update t_emp<br>        set<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null&quot;</span>&gt;</span><br>            emp_name = #&#123;empName&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empSalary != null&quot;</span>&gt;</span><br>            emp_salary = #&#123;empSalary&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span><br>            age = #&#123;age&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>此时到了用 <code>set</code> 标签的时候了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- if 标签用于做条件判断，其中的 test 参数如果为真就拼接 if 标签中的内容，如果为假则不拼接 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 name 不为 null 就拼接 emp_name = #&#123;name&#125; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 salary 不为 null 就拼接 and emp_salary = #&#123;salary&#125; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                emp_name = #&#123;name&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null&quot;</span>&gt;</span><br>                and emp_salary = #&#123;salary&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>        update t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null&quot;</span>&gt;</span><br>                emp_name = #&#123;empName&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empSalary != null&quot;</span>&gt;</span><br>                emp_salary = #&#123;empSalary&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span><br>                age = #&#123;age&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="trim-标签记录"><code>trim</code> 标签记录</h5><ul><li><p><code>trim</code> 标签用于自定义截串规则，可以替换<code>where</code> 和 <code>set</code> 标签</p></li><li><p>有四个参数：</p><ul><li><p><code>prefix</code>：添加一个前缀，如果在 <code>trim</code>标签体中有代码就加一个前缀</p></li><li><p><code>suffix</code>：添加一个后缀，如果在 <code>trim</code>标签体中有代码就加一个后缀</p></li><li><p><code>prefixOverrides</code>：如果以指定字符串为前缀，则替换成空字符串</p></li><li><p><code>suffixOverrides</code>：如果以指定字符串为后缀，则替换成空字符串</p></li></ul></li><li><p>比如上面的 <code>where</code> 标签可以用 <code>trim</code>替代，配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- if 标签用于做条件判断，其中的 test 参数如果为真就拼接 if 标签中的内容，如果为假则不拼接 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 name 不为 null 就拼接 emp_name = #&#123;name&#125; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果 salary 不为 null 就拼接 and emp_salary = #&#123;salary&#125; --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;select id=&quot;getEmpByNameAndSalary&quot; resultType=&quot;org.wind.mybatis.bean.Emp&quot;&gt;</span><br><span class="hljs-comment">        select *</span><br><span class="hljs-comment">        from t_emp</span><br><span class="hljs-comment">        &lt;where&gt;</span><br><span class="hljs-comment">            &lt;if test=&quot;name != null&quot;&gt;</span><br><span class="hljs-comment">                emp_name = #&#123;name&#125;</span><br><span class="hljs-comment">            &lt;/if&gt;</span><br><span class="hljs-comment">            &lt;if test=&quot;salary != null&quot;&gt;</span><br><span class="hljs-comment">                and emp_salary = #&#123;salary&#125;</span><br><span class="hljs-comment">            &lt;/if&gt;</span><br><span class="hljs-comment">        &lt;/where&gt;</span><br><span class="hljs-comment">    &lt;/select&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 如果 if 标签成立，则 trim 标签体有内容，加一个前缀 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 但在加前缀之前，还要判断是否有 and 或者 or 在开头，如果有，则替换为空字符串 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;and|or&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                emp_name = #&#123;name&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null&quot;</span>&gt;</span><br>                and emp_salary = #&#123;salary&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--&lt;update id=&quot;updateEmp&quot;&gt;</span><br><span class="hljs-comment">        update t_emp</span><br><span class="hljs-comment">        &lt;set&gt;</span><br><span class="hljs-comment">            &lt;if test=&quot;empName != null&quot;&gt;</span><br><span class="hljs-comment">                emp_name = #&#123;empName&#125;,</span><br><span class="hljs-comment">            &lt;/if&gt;</span><br><span class="hljs-comment">            &lt;if test=&quot;empSalary != null&quot;&gt;</span><br><span class="hljs-comment">                emp_salary = #&#123;empSalary&#125;,</span><br><span class="hljs-comment">            &lt;/if&gt;</span><br><span class="hljs-comment">            &lt;if test=&quot;age != null&quot;&gt;</span><br><span class="hljs-comment">                age = #&#123;age&#125;</span><br><span class="hljs-comment">            &lt;/if&gt;</span><br><span class="hljs-comment">        &lt;/set&gt;</span><br><span class="hljs-comment">        where id = #&#123;id&#125;</span><br><span class="hljs-comment">    &lt;/update&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>        update t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;set&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;where id = #&#123;id&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null&quot;</span>&gt;</span><br>                emp_name = #&#123;empName&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empSalary != null&quot;</span>&gt;</span><br>                emp_salary = #&#123;empSalary&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span><br>                age = #&#123;age&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="choose-和-when-和-otherwise-标签记录"><code>choose</code> 和<code>when</code> 和 <code>otherwise</code> 标签记录</h5><ul><li><p>类似于 <code>Java</code> 中的<code>switch...case...default...</code></p></li><li><p>在多个标签分支中选一个</p></li><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDynamicSQLMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据员工名或者员工薪资查询员工信息</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getEmpByNameOrSalary</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Param(&quot;salary&quot;)</span> BigDecimal salary)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据员工名或者员工薪资查询员工信息 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当 name 不为空时走第一个分支 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当 salary 大于 3000 时走第二个分支 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 否则走第三个分支，即查询 id 为 1 的员工的信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByNameOrSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select * from t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                    emp_name = #&#123;name&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary &gt; 3000&quot;</span>&gt;</span><br>                    emp_salary = #&#123;salary&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                    id = 1<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSQLTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; jerry = empDynamicSQLMapper.getEmpByNameOrSalary(<span class="hljs-string">&quot;jerry&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;100&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;jerry = &quot;</span> + jerry);<br>        List&lt;Emp&gt; jerry1 = empDynamicSQLMapper.getEmpByNameOrSalary(<span class="hljs-string">&quot;jerry&quot;</span>, <span class="hljs-literal">null</span>);<br>        System.out.println(<span class="hljs-string">&quot;jerry1 = &quot;</span> + jerry1);<br>        List&lt;Emp&gt; empByNameOrSalary = empDynamicSQLMapper.getEmpByNameOrSalary(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;5000&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;empByNameOrSalary = &quot;</span> + empByNameOrSalary);<br>        List&lt;Emp&gt; empByNameOrSalary1 = empDynamicSQLMapper.getEmpByNameOrSalary(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        System.out.println(<span class="hljs-string">&quot;empByNameOrSalary1 = &quot;</span> + empByNameOrSalary1);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="foreach-标签记录"><code>foreach</code> 标签记录</h5><ul><li><p>用于遍历添加 <code>SQL</code> 语句</p></li><li><p>有一个情况，就是如果要查询指定的 <code>id</code>集合中的员工信息，集合长度未知，如何写 <code>SQL</code>语句，此时就要用到 <code>foreach</code> 标签了</p></li><li><p><code>foreach</code> 标签可以用于遍历集合</p></li><li><p>其中的：</p><ul><li>参数 <code>collection</code> 用于指定集合名</li><li>参数 <code>item</code> 用于指定每个取到的集合元素</li><li>参数 <code>separator</code> 用于指定参数间的分割符</li><li>参数 <code>opne</code> 用于指定遍历前缀</li><li>参数 <code>close</code> 用于指定遍历后缀</li></ul></li><li><p>写一个批量查询员工信息：</p><ul><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDynamicSQLMapper</span> &#123;<br><br>    <span class="hljs-comment">// 查询 id 集合中的所有员工信息</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getEmpsByIdList</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- collection 参数指定要遍历的对象名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- item 参数指定每次遍历的元素名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- separator 参数指定元素间的分割符 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 用 #&#123;元素名&#125; 取出元素 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsByIdList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select * from t_emp where id in (<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        )<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSQLTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Preparing: select * from t_emp where id in ( ? , ? , ? , ? , ? )</span><br>        <span class="hljs-comment">// Parameters: 1(Integer), 2(Integer), 3(Integer), 4(Integer), 5(Integer)</span><br>        empDynamicSQLMapper.getEmpsByIdList(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)).forEach(System.out::println);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>为了防止集合为空，可以加一个 <code>if</code>标签进行判断</p></li></ul></li><li><p>再写一个批量添加员工信息：</p><ul><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDynamicSQLMapper</span> &#123;<br><br>    <span class="hljs-comment">// 批量添加员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmpInfos</span><span class="hljs-params">(List&lt;Emp&gt; empList)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code>配置文件：遍历中的元素如果是一个对象，取其中的属性值时要用<code>对象.属性</code> 进行取值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注意：这里的取属性要用 对象.属性 取 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmpInfos&quot;</span>&gt;</span><br>        insert into t_emp(emp_name, age, emp_salary)<br>        values<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            (#&#123;emp.empName&#125;, #&#123;emp.age&#125;, #&#123;emp.empSalary&#125;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSQLTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; emps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>            emp.setEmpName(<span class="hljs-string">&quot;zhang&quot;</span> + i);<br>            emp.setAge(<span class="hljs-number">20</span> + i);<br>            emp.setEmpSalary(<span class="hljs-number">3000.0D</span> + i);<br>            emps.add(emp);<br>        &#125;<br><br>        <span class="hljs-comment">// 批量添加员工信息</span><br>        empDynamicSQLMapper.addEmpInfos(emps);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>再写一个批量修改员工信息：</p><ul><li><p>编写 <code>Mapper</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDynamicSQLMapper</span> &#123;<br><br>    <span class="hljs-comment">// 批量修改员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmpsInList</span><span class="hljs-params">(List&lt;Emp&gt; emps)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>mapper</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmpsInList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;;&quot;</span>&gt;</span><br>            update t_emp<br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;emp.empName != null&quot;</span>&gt;</span><br>                    emp_name = #&#123;emp.empName&#125;,<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;emp.empSalary != null&quot;</span>&gt;</span><br>                    emp_salary = #&#123;emp.empSalary&#125;,<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;emp.age != null&quot;</span>&gt;</span><br>                    age = #&#123;emp.age&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>            where id = #&#123;emp.id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSQLTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test06</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; emps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>            emp.setId(i + <span class="hljs-number">8</span>);<br>            emp.setEmpName(<span class="hljs-string">&quot;lisi&quot;</span> + i);<br>            emp.setAge(<span class="hljs-number">18</span> + i);<br>            emp.setEmpSalary(<span class="hljs-number">10000.0D</span> + i * <span class="hljs-number">10</span>);<br>            emps.add(emp);<br>        &#125;<br><br>        <span class="hljs-comment">// Preparing: update t_emp SET emp_name = ?, emp_salary = ?, age = ? where id = ? ;</span><br>        <span class="hljs-comment">// update t_emp SET emp_name = ?, emp_salary = ?, age = ? where id = ? ;</span><br>      <span class="hljs-comment">// ...</span><br>        empDynamicSQLMapper.updateEmpsInList(emps);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以发现 <code>SQL</code> 语句并没有问题，但是还是发生了<code>java.sql.SQLSyntaxErrorException</code> 异常，因为数据库不支持多个<code>;</code> 的 <code>SQL</code> 语句</p></li><li><p>在 <code>application.properties</code>配置数据库源的时候加一个参数：<code>allowMultiQueries=true</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example?allowMultiQueries=true</span><br></code></pre></td></tr></table></figure></li><li><p>再次测试，成功修改数据库中的数据</p></li></ul></li></ul><h5 id="批量-sql-事务记录">批量 <code>SQL</code> 事务记录</h5><ul><li><p>在主程序上开启事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisHelloworldApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MybatisHelloworldApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 <code>Mapper</code> 接口上的方法上开启事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDynamicSQLMapper</span> &#123;<br><br>    <span class="hljs-comment">// 根据员工名和员工薪资查询员工信息</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getEmpByNameAndSalary</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                                    <span class="hljs-meta">@Param(&quot;salary&quot;)</span> BigDecimal salary)</span>;<br><br>    <span class="hljs-comment">// 根据 id 更新员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Emp emp)</span>;<br><br>    <span class="hljs-comment">// 根据员工名或者员工薪资查询员工信息</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getEmpByNameOrSalary</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Param(&quot;salary&quot;)</span> BigDecimal salary)</span>;<br><br>    <span class="hljs-comment">// 查询 id 集合中的所有员工信息</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getEmpsByIdList</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br><br>    <span class="hljs-comment">// 批量添加员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmpInfos</span><span class="hljs-params">(List&lt;Emp&gt; empList)</span>;<br><br>    <span class="hljs-comment">// 批量修改员工信息</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmpsInList</span><span class="hljs-params">(List&lt;Emp&gt; emps)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写一个 <code>Service</code> 用于模拟异常：</p><ul><li><p>接口 <code>EmpService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.service;<br><br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBatch</span><span class="hljs-params">(List&lt;Emp&gt; emps)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类 <code>EmpServiceImpl</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.service.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.service.EmpService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBatch</span><span class="hljs-params">(List&lt;Emp&gt; emps)</span> &#123;<br>        empDynamicSQLMapper.updateEmpsInList(emps);<br>        <span class="hljs-comment">// 模拟异常</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.service.EmpService;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSQLTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpService empService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test07</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; emps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>            emp.setId(i + <span class="hljs-number">8</span>);<br>            emp.setEmpName(<span class="hljs-string">&quot;lisi&quot;</span> + i);<br>            emp.setAge(<span class="hljs-number">18</span> + i);<br>            emp.setEmpSalary(<span class="hljs-number">10000.0D</span> + i * <span class="hljs-number">10</span>);<br>            emps.add(emp);<br>        &#125;<br>        empService.updateBatch(emps);<br>        System.out.println(<span class="hljs-string">&quot;批量更新完成&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试发现事务正常回滚</p></li><li><p>注意：如果在分布式项目情况下，分布式事务很多不支持多<code>SQL</code> 批量操作的回滚</p></li></ul><h5 id="mybatis-的-sql-片段记录"><code>MyBatis</code> 的<code>SQL</code> 片段记录</h5><ul><li><p><ahref="https://mybatis.org/mybatis-3/sqlmap-xml.html#sql">官方文档</a></p></li><li><p><code>SQL Fragment</code> 即可复用的 <code>SQL</code> 片段，用<code>sql</code> 标签定义，用 <code>include</code> 标签引用</p></li><li><p>比如，如果不开启驼峰命名自动映射功能，则需要手写多个标签的对应的字段名，此时可以用<code>SQL</code> 片段解决：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpDynamicSQLMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 如果不开启驼峰自动映射功能，也可以用 sql fragment 方法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;column_names&quot;</span>&gt;</span><br>        id, emp_name empName, age, emp_salary empSalary<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 在需要用到 sql fragment 的地方用 include 标签进行引用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select<br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;column_names&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        from t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;and|or&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                emp_name = #&#123;name&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null&quot;</span>&gt;</span><br>                and emp_salary = #&#123;salary&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>即用 <code>sql</code> 标签定义片段，用 <code>include</code>标签进行引用</p></li></ul><h4 id="在-xml-文件中的转义字符记录">在 <code>XML</code>文件中的转义字符记录</h4><ul><li><p>在写 <code>mapper</code> 配置文件时，因为用的是 <code>xml</code>进行配置，所以想写一些 <code>sql</code> 语句会有问题，比如小于号<code>&lt;</code></p></li><li><p>此时就要用在 <code>xml</code> 中对应的转义字符：</p><table><thead><tr><th>原字符</th><th>对应的转义字符</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td><code>&amp;amp;</code></td></tr><tr><td><code>&lt;</code></td><td><code>&amp;lt;</code></td></tr><tr><td><code>&gt;</code></td><td><code>&amp;gt;</code></td></tr><tr><td><code>"</code></td><td><code>&amp;quot;</code></td></tr><tr><td><code>'</code></td><td><code>&amp;apos;</code></td></tr></tbody></table></li></ul><h4 id="缓存机制记录">缓存机制记录</h4><ul><li>为什么要有缓存，为了提升访问效率，就像 CPU 缓存 -&gt; 一级缓存 -&gt;二级缓存 -&gt; 三级缓存 -&gt; 内存 -&gt; 硬盘的关系一样</li><li>如果缓存中没有，到数据库查询原始数据，称为【回源】</li><li><code>MyBatis</code> 有二级缓存机制<ul><li>默认开启的是一级缓存，事务级别是当前事务共享</li><li>二级缓存需要手动开启，事务级别是所有事务共享</li><li>一级缓存一般讨论的是同一个事务的多次相同的查询</li><li>而二级缓存一般讨论的是不同事务的相同的查询</li></ul></li><li><code>MyBatis</code>默认从二级缓存中取数据（如果二级缓存中有数据），因为事务刚开始，一级缓存一般都没有缓存数据，这一点与CPU 缓存不一样</li><li>可以用 <code>Redis</code> 等进行替代方案</li></ul><h5 id="mybatis-的一级缓存记录"><code>MyBatis</code> 的一级缓存记录</h5><ul><li><p>编写 <code>Service</code> 用于进行测试：</p><ul><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.service;<br><br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBatch</span><span class="hljs-params">(List&lt;Emp&gt; emps)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getEmp</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.service.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpMapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.service.EmpService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBatch</span><span class="hljs-params">(List&lt;Emp&gt; emps)</span> &#123;<br>        empDynamicSQLMapper.updateEmpsInList(emps);<br>        <span class="hljs-comment">// 模拟异常</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 第一次查 id 为 1 的员工</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> empMapper.getEmpById(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;empById = &quot;</span> + empById);<br><br>        System.out.println(<span class="hljs-string">&quot;do other .....................&quot;</span>);<br><br>        <span class="hljs-comment">// 第二次查 id 为 2 的员工</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empById1</span> <span class="hljs-operator">=</span> empMapper.getEmpById(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;empById1 = &quot;</span> + empById1);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编写测试程序进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.service.EmpService;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpService empService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        empService.getEmp();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以看到在控制台中只发了一次 <code>SQL</code>查询，所以证明有缓存</p></li><li><p>即在开启事务时，会开启事务级别缓存，同一条语句的多次查询会从缓存中取数据，不会进行多次的查询</p></li><li><p>不开启事务，再进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.service.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpDynamicSQLMapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpMapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.service.EmpService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpDynamicSQLMapper empDynamicSQLMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBatch</span><span class="hljs-params">(List&lt;Emp&gt; emps)</span> &#123;<br>        empDynamicSQLMapper.updateEmpsInList(emps);<br>        <span class="hljs-comment">// 模拟异常</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 第一次查 id 为 1 的员工</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> empMapper.getEmpById(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;empById = &quot;</span> + empById);<br><br>        System.out.println(<span class="hljs-string">&quot;do other .....................&quot;</span>);<br><br>        <span class="hljs-comment">// 第二次查 id 为 2 的员工</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empById1</span> <span class="hljs-operator">=</span> empMapper.getEmpById(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;empById1 = &quot;</span> + empById1);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发现会进行两次查询</p></li><li><p>这是因为在开启了事务后，默认的事务隔离级别是可重复读，所以同一语句的多次查询就从缓存中取</p></li><li><p>注意，并不是同一语句的多次查询就一定会从缓存中取，也会有缓存失效的情况</p><ul><li>两次查询的内容不一样（当然不会从缓存中拿，因为缓存中没有）</li><li>如果在两次查询之间，进行了一次增删改，则会重新进行一次查询，不从缓存中取</li></ul></li></ul><h5 id="mybatis-的二级缓存记录"><code>MyBatis</code> 的二级缓存记录</h5><ul><li><p>两个事务如果不开二级缓存，则默认用的是一级缓存，即使两个事务查询的是同一个员工信息，也会查询两次数据库</p></li><li><p>如果开启二级缓存，则在一个事务结束后，把结果放到二级缓存中，如果别的事务有相同一个查询，则直接从二级缓存中取</p></li><li><p><code>MyBatis</code>是用序列化对对象进行缓存的，所以要被缓存的对象必须实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Double empSalary;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如何开启二级缓存，在要被缓存的对象实现序列化接口，然后在<code>mapper</code> 配置文件中加一个 <code>cache</code> 标签即为开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wind.mybatis.mapper.EmpMapper&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select id, emp_name empName, age, emp_salary empSalary<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmp&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.wind.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmp&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into t_emp(emp_name, age, emp_salary)<br>        values (#&#123;empName&#125;, #&#123;age&#125;, #&#123;empSalary&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>        update t_emp<br>        set emp_name   = #&#123;empName&#125;,<br>            age        = #&#123;age&#125;,<br>            emp_salary = #&#123;empSalary&#125;<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteEmpById&quot;</span>&gt;</span><br>        delete<br>        from t_emp<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再次运行测试程序，有个缓存命中率为<code>0.5</code>，因为测试程序进行了两次相同的查询有一次是从缓存中取，所以命中率为<code>1/2</code> 即 <code>0.5</code></p></li></ul><h4 id="插件机制记录">插件机制记录</h4><ul><li><p><ahref="https://mybatis.org/mybatis-3/configuration.html#plugins">官方文档</a></p></li><li><p><code>MyBatis</code> 用拦截器机制提供插件功能，方便在<code>SQL</code> 语句执行的前后进行拦截处理</p></li><li><p>在 <code>org.apache.ibatis.plugin</code> 包下可以看到拦截器接口<code>Interceptor</code></p></li><li><p>拦截器可以拦截以下对象的执行：</p><ul><li>Executor (update, query, flushStatements, commit, rollback,getTransaction, close, isClosed)：执行器，执行 <code>SQL</code>语句</li><li>ParameterHandler (getParameterObject,setParameters)：参数处理器，处理 <code>SQL</code> 的参数对象</li><li>ResultSetHandler (handleResultSets,handleOutputParameters)：结果集处理器，处理 <code>SQL</code>的返回结果集</li><li>StatementHandler (prepare, parameterize, batch, update,query)：查询语句处理器，处理 <code>SQL</code> 语句</li></ul></li><li><p>插件有很多，比如分页插件 <ahref="https://pagehelper.github.io/docs/howtouse/">PageHelper</a></p></li><li><p>使用 PageHelper 实验，<ahref="https://pagehelper.github.io/docs/howtouse/">官方文档</a></p><ul><li><p>在 <code>pom.xml</code> 中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置拦截器插件，这里选择 <code>Spring</code> 方法，即添加一个<code>Bean</code> 到容器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.config;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.PageInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    PageInterceptor <span class="hljs-title function_">pageInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建分页插件对象</span><br>        <span class="hljs-type">PageInterceptor</span> <span class="hljs-variable">pageInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInterceptor</span>();<br><br>        <span class="hljs-comment">// 放到容器中</span><br>        <span class="hljs-keyword">return</span> pageInterceptor;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Service</code>：</p><ul><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.service;<br><br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    List&lt;Emp&gt; <span class="hljs-title function_">getAllEmp</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.service.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.mapper.EmpMapper;<br><span class="hljs-keyword">import</span> org.wind.mybatis.service.EmpService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">getAllEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empMapper.getAllEmp();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.service.EmpService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpService empService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 第 1 页，每页有 5 个</span><br>        <span class="hljs-comment">// 紧跟着 startPage 之后的方法就会用分页查询</span><br>        List&lt;Emp&gt; allEmp = empService.getAllEmp();<br>        <span class="hljs-keyword">for</span> (Emp emp : allEmp) &#123;<br>            System.out.println(emp);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>其查询用到了 <code>ThreadLocal</code> 所以在<code>PageHelper</code>中的方法执行后的一条查询就分页，而其它的查询不分页</p></li><li><p>前端在用的时候一般需要以下的信息返回：</p><ul><li>总页码，总记录数</li><li>当前页码</li><li>当前页数据</li></ul></li><li><p>先编写一个测试程序测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.service.EmpService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpService empService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 开启分页</span><br>        PageHelper.startPage(pageNum, <span class="hljs-number">10</span>);<br>        <br>        List&lt;Emp&gt; allEmp = empService.getAllEmp();<br>        System.out.println(<span class="hljs-string">&quot;=========================&quot;</span>);<br>        PageInfo&lt;Emp&gt; info = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(allEmp);<br><br>        <span class="hljs-comment">// 当前页</span><br>        System.out.println(<span class="hljs-string">&quot;当前页码 = &quot;</span> + info.getPageNum());<br>        <span class="hljs-comment">// 总页码</span><br>        System.out.println(<span class="hljs-string">&quot;总页码 = &quot;</span> + info.getPages());<br>        <span class="hljs-comment">// 总记录</span><br>        System.out.println(<span class="hljs-string">&quot;总记录数 = &quot;</span> + info.getTotal());<br>        <span class="hljs-comment">// 有没有下一页</span><br>        System.out.println(<span class="hljs-string">&quot;有没有下一页 = &quot;</span> + info.isHasNextPage());<br>        <span class="hljs-comment">// 有没有上一页</span><br>        System.out.println(<span class="hljs-string">&quot;有没有上一页 = &quot;</span> + info.isHasPreviousPage());<br>        <span class="hljs-comment">// 本页数据</span><br>        System.out.println(<span class="hljs-string">&quot;本页数据 = &quot;</span> + info.getList());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试通过后再写一个 <code>Controller</code> 返回数据测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.controller.impl;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.mybatis.bean.Emp;<br><span class="hljs-keyword">import</span> org.wind.mybatis.controller.EmpController;<br><span class="hljs-keyword">import</span> org.wind.mybatis.service.EmpService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpControllerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmpService empService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/emp/page&quot;)</span><br>    <span class="hljs-keyword">public</span> PageInfo <span class="hljs-title function_">getPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;pageNum&quot;, defaultValue = &quot;1&quot;)</span> Integer pageNum)</span> &#123;<br>        <span class="hljs-comment">// 每页 10 条</span><br>        PageHelper.startPage(pageNum, <span class="hljs-number">10</span>);<br><br>        List&lt;Emp&gt; allEmp = empService.getAllEmp();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(allEmp);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>但上面代码有一个问题，就是如果参数 <code>pageNum</code>传的是一个不合理的数，则会返回无用数据，此时可以更改配置类，设置分页插件的<code>reasonable</code> 参数：如果小于 1则查询第一页数据，如果大于最大页数则查询最后一页数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.config;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.PageInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    PageInterceptor <span class="hljs-title function_">pageInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建分页插件对象</span><br>        <span class="hljs-type">PageInterceptor</span> <span class="hljs-variable">pageInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInterceptor</span>();<br><br>        <span class="hljs-comment">// 设置插件参数</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.setProperty(<span class="hljs-string">&quot;reasonable&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        pageInterceptor.setProperties(properties);<br><br>        <span class="hljs-comment">// 放到容器中</span><br>        <span class="hljs-keyword">return</span> pageInterceptor;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="mybatisx-插件的逆向生成功能记录"><code>MyBatisX</code>插件的逆向生成功能记录</h4><ul><li>在 <code>IDEA</code> 中安装 <code>MyBatisX</code> 插件，再在<code>IDEA</code> 连接数据库</li><li>选中需要生成的数据表，右键点击 <code>MybatisX-Generator</code> 生成<ul><li>指定生成到哪个模块 <code>module path</code></li><li>指定生成在哪个包的父包下 <code>base package</code>，比如<code>com.xxx</code></li><li>指定生成到哪个包的包名 <code>relative package</code>，比如<code>bean</code></li><li>就会生成到 <code>com.xxx.bean</code></li><li>再下一步，指定要用的注解，和选项，和要使用的模板</li><li>点击 <code>finish</code> 生成</li></ul></li></ul><h2 id="补充">4. 补充</h2><h3 id="注解-mapperscan-记录">注解 <code>@MapperScan</code> 记录</h3><ul><li><p>当写了很多 <code>Mapper</code> 接口时，如果每个<code>Mapper</code> 接口都使用 <code>@Mapper</code>注解进行标注，则会很麻烦还容易出错</p></li><li><p>所以此时可以用 <code>@MapperScan</code> 注解指定哪些包下的接口是<code>Mapper</code> 接口</p></li><li><p>这个注解可以放在任何类上，不过一般放在配置类下</p></li><li><p>用法如下：创建 <code>MyBaticConfig</code> 配置类，使用<code>@MapperScan</code> 指定哪个包下的接口是 <code>Mapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.mybatis.config;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.PageInterceptor;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-meta">@MapperScan(&quot;org.wind.mybatis.mapper&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    PageInterceptor <span class="hljs-title function_">pageInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建分页插件对象</span><br>        <span class="hljs-type">PageInterceptor</span> <span class="hljs-variable">pageInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInterceptor</span>();<br><br>        <span class="hljs-comment">// 设置插件参数</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.setProperty(<span class="hljs-string">&quot;reasonable&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        pageInterceptor.setProperties(properties);<br><br>        <span class="hljs-comment">// 放到容器中</span><br>        <span class="hljs-keyword">return</span> pageInterceptor;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>DataBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 小补充记录</title>
    <link href="/2025/02/23/SpringBoot_Record/"/>
    <url>/2025/02/23/SpringBoot_Record/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot-小补充记录">SpringBoot 小补充记录</h1><ul><li><ahref="https://docs.spring.io/spring-boot/index.html">官方文档</a></li><li>在没有 <code>SpringBoot</code>前要手动配置很多的依赖，还要写各种配置文件，比较麻烦</li><li>有了 <code>SpringBoot</code>后很多东西都自动配置好了，只需要会用就可以了，既方便了开发也方便了部署</li><li>如果需要配置，<code>SpringBoot</code> 也可以手动进行自定义配置，即在<code>application.properties</code> 文件或者<code>application.yaml</code> 文件中配置就好了</li></ul><h2 id="创建一个-springboot-项目记录">创建一个 SpringBoot 项目记录</h2><ul><li><p>打开 <a href="https://start.spring.io/">spring initializr</a>创建并下载项目，再用一个开发工具打开</p><figure><img src="/images/SSM_Study/Spring_Initializr.svg" srcset="/img/loading.gif" lazyloadalt="Spring_Initializr" /><figcaption aria-hidden="true">Spring_Initializr</figcaption></figure></li><li><p>也可以用集成开发工具进行创建</p></li><li><p>创建完成打开后就可以写代码了，比如创建的是 <code>web</code>项目，就在与 <code>main</code> 函数同一个包下写 <code>Controller</code>和 <code>Service</code> 和 <code>DAO</code> 等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Spring Boot !&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动项目，访问 <code>http://localhost:8080/hello</code>返回一串文本——<code>Hello Spring Boot !</code></p></li><li><p>打包项目，以前要打成一个 <code>war</code> 包，现在直接用<code>maven</code> 进行打包，即运行 <code>package</code>命令就可以了</p><ul><li>打包完成后可以在 <code>target</code> 目录下看到有一个<code>jar</code> 包，直接用 <code>java -jar xxx.jar</code>运行就可以了</li></ul></li><li><p>在运行 <code>jar</code>包时也可以指定配置，比如：<code>java -jar xxx.jar --server.port=1234</code>指定服务器端口为 <code>1234</code></p></li><li><p>当然也可以指定配置文件</p><ul><li><p><ahref="https://docs.spring.io/spring-boot/reference/features/external-config.html">官方文档</a></p></li><li><p>创建配置文件，比如在和 <code>jar</code> 包同一目录下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">1234</span><br></code></pre></td></tr></table></figure></li><li><p>启动时指定配置文件：<code>java -jar xxx.jar --spring.config.location=./application.properties</code></p></li></ul></li></ul><h2 id="springboot-场景启动器-starter-记录">SpringBoot 场景启动器<code>starter</code> 记录</h2><ul><li><p>类似于 <code>spring-boot-starter-xxx</code>的依赖就是场景启动器，作用是引入当前场景的所有依赖</p></li><li><p><code>Spring</code>的场景：https://docs.spring.io/spring-boot/reference/using/build-systems.html</p></li><li><p>在 <code>SpringBoot</code>中，要用什么功能，只需要导入对应的场景启动器就可以了</p><ul><li>比如：<code>spring-boot-starter-web</code></li></ul></li><li><p>场景有什么用？每一个场景启动器把场景要用的 <code>jar</code>包全部引用好了</p><ul><li>比如在 <code>spring-boot-starter-web</code> 场景中有下面的依赖<ul><li><code>spring-boot-starter</code></li><li><code>spring-boot-starter-json</code></li><li><code>spring-boot-starter-tomcat</code></li><li><code>spring-web</code></li><li><code>spring-webmvc</code></li><li>...</li></ul></li><li>而在其中像 <code>spring-boot-starter-tomcat</code>依赖也是一个场景启动器，点进去可以看到有很多引用的依赖：<ul><li><code>jakarta.annotation-api</code></li><li><code>tomcat-embed-core</code></li><li><code>tomcat-embed-el</code></li><li><code>tomcat-embed-websocket</code></li><li>...</li></ul></li></ul></li><li><p>推荐的场景启动器命名</p><ul><li>官方的：<code>spring-boot-starter-xxx</code></li><li>第三方：<code>xxx-spring-boot-starter</code></li></ul></li><li><p>为什么在 <code>SpringBoot</code>中的依赖没有写版本号：因为在父项目<code>spring-boot-starter-parent</code> 的父项目<code>spring-boot-dependencies</code> 中进行约束了</p></li><li><p>但是如果是 <code>Spring</code>没有约束的依赖，要指定依赖版本号</p></li><li><p>如果不想用默认的版本</p><ul><li>手动使用 <code>&lt;version&gt;</code> 标签指定版本号</li><li>或者在 <code>properties</code> 标签中指定版本号<code>&lt;xxx.version&gt;&lt;/xxx.version&gt;</code></li></ul></li><li><p>建议命名的<ahref="https://docs.spring.io/spring-boot/reference/using/build-systems.html#using.build-systems.starters">官方文档</a></p></li></ul><h2 id="springboot-自动配置记录">SpringBoot 自动配置记录</h2><h3 id="自动配置的基本情况记录">自动配置的基本情况记录</h3><ul><li>SpringBoot 遵循 “约定大于配置”的策略，即导入场景后大部分东西已经配置好了，比如数据库的数据源就可以在<code>application.properties</code> 文件中配置</li><li>如果没有手动配置的情况下就会使用默认的配置，即默认已经有配置好了</li><li>但是有些属性是没有默认值的，比如数据库的用户和密码要手动指定</li><li>如何查看一个属性有没有默认值，在属性配置文件中用 <code>Ctrl</code>键加鼠标左键单击即可查看</li><li><ahref="https://docs.spring.io/spring-boot/appendix/application-properties/index.html">SpringBoot官方所有的默认配置</a></li></ul><h3 id="自动配置的部分原理记录">自动配置的部分原理记录</h3><h4 id="场景启动器导入组件部分记录">场景启动器导入组件部分记录</h4><ul><li><p>场景启动器的配置流程是怎么做的</p><ul><li><p>创建项目，选中场景并创建</p></li><li><p>此时导入了场景启动器，场景启动器做了两件事</p><ul><li>导入场景所需依赖</li><li>导入基础依赖 <code>spring-boot-starter</code></li></ul></li><li><p>进入项目启动流程</p></li><li><p>被注解 <code>@SpringBootApplication</code>标注的主程序启动，点进注解中，有三个重点的注解</p><ul><li><code>@SpringBootConfiguration</code> 是容器中的配置类组件</li><li><code>@EnableAutoConfiguration</code> 是开启自动配置</li><li><code>@ComponentScan</code> 是包扫描规则</li></ul></li><li><p>其中，注解 <code>@EnableAutoConfiguration</code>最重要，里面有一个注解<code>@Import(AutoConfigurationImportSelector.class)</code>导入的是一个特殊的组件，点进去可以用打断点的方式进行分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">package</span> org.springframework.boot.autoconfigure;<br>    <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeferredImportSelector</span>, BeanClassLoaderAware,<br>           ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;<br>    <br>       <span class="hljs-keyword">protected</span> AutoConfigurationEntry <span class="hljs-title function_">getAutoConfigurationEntry</span><span class="hljs-params">(AnnotationMetadata annotationMetadata)</span> &#123;<br>           <span class="hljs-keyword">if</span> (!isEnabled(annotationMetadata)) &#123;<br>               <span class="hljs-keyword">return</span> EMPTY_ENTRY;<br>           &#125;<br>&gt;&gt;&gt;&gt;       <span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> getAttributes(annotationMetadata);<br>           List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);<br>           configurations = removeDuplicates(configurations);<br>           Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);<br>           checkExcludedClasses(configurations, exclusions);<br>           configurations.removeAll(exclusions);<br>           configurations = getConfigurationClassFilter().filter(configurations);<br>           fireAutoConfigurationImportEvents(configurations, exclusions);<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoConfigurationEntry</span>(configurations, exclusions);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><p>断点打好后，启动程序，下一步后可以看到调用了<code>getCandidateConfigurations()</code> 方法并返回一个<code>List</code> ，点开这个 <code>list</code>可以看到有很多个配置名，都是以 <code>xxxAutoConfiguration</code>为命名，就是这一步导入了自动配置类</p></li><li><p>开始调试 Step Into进入这个方法，发现是调用了本类中的另一个方法，使用了<code>ImportCandidates</code> 类中的 <code>load</code> 方法进行导入，再Step Into 进入 <code>load</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.boot.autoconfigure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeferredImportSelector</span>, BeanClassLoaderAware,<br>            ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;<br><br><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;<br>        <br>        <span class="hljs-comment">// 调用 load 方法</span><br>List&lt;String&gt; configurations = ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader())<br>.getCandidates();<br>        <br>Assert.notEmpty(configurations,<br><span class="hljs-string">&quot;No auto configuration classes found in &quot;</span><br>+ <span class="hljs-string">&quot;META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you &quot;</span><br>+ <span class="hljs-string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);<br><span class="hljs-keyword">return</span> configurations;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>进入到了 <code>ImportCandidates</code> 类中的 <code>load</code>方法，可以看到又调用了同一类中的 <code>findUrlsInClasspath</code>方法进行查找导入，Step Into 进去，可以发现 <code>location</code> 的值为<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.boot.context.annotation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImportCandidates</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;String&gt; &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImportCandidates <span class="hljs-title function_">load</span><span class="hljs-params">(Class&lt;?&gt; annotation, ClassLoader classLoader)</span> &#123;<br>Assert.notNull(annotation, <span class="hljs-string">&quot;&#x27;annotation&#x27; must not be null&quot;</span>);<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoaderToUse</span> <span class="hljs-operator">=</span> decideClassloader(classLoader);<br><span class="hljs-type">String</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> String.format(LOCATION, annotation.getName());<br>        <br>        <span class="hljs-comment">// 调用了 findUrlsInClasspath 方法</span><br>Enumeration&lt;URL&gt; urls = findUrlsInClasspath(classLoaderToUse, location);<br><br>        List&lt;String&gt; importCandidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">while</span> (urls.hasMoreElements()) &#123;<br><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> urls.nextElement();<br>importCandidates.addAll(readCandidateConfigurations(url));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportCandidates</span>(importCandidates);<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Enumeration&lt;URL&gt; <span class="hljs-title function_">findUrlsInClasspath</span><span class="hljs-params">(ClassLoader classLoader, String location)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 此时可以查看 location 的值</span><br>            <span class="hljs-comment">// META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</span><br><span class="hljs-keyword">return</span> classLoader.getResources(location);<br>&#125;<br><span class="hljs-keyword">catch</span> (IOException ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Failed to load configurations from location [&quot;</span> + location + <span class="hljs-string">&quot;]&quot;</span>, ex);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>由此可知 SpringBoot 有在<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>下导入自动配置</p></li></ul></li><li><p>可以打开一个自动配置类分析一下：<code>DataSourceAutoConfiguration</code></p><ul><li>可以发现其是通过注解 <code>@Conditional</code> 和注解<code>@ConditionalOnMissingBean</code>进行判断从而决定是否把组件添加到容器中的</li><li>如果不想用自动配置好的则可以自己根据上面的两个注解条件判断添加相应的组件</li></ul></li></ul></li><li><p>总结为：</p><ul><li>导入场景启动器</li><li>场景启动器会在 <code>META-INF/xxx/imports</code>下导入自动配置类（<code>xxxAutoConfiguration</code>）</li><li>在自动配置类中会使用注解 <code>@Conditional</code> 和注解<code>@ConditionalOnMissingBean</code> 导入组件到容器中</li></ul></li></ul><h4 id="自动配置类分析记录">自动配置类分析记录</h4><ul><li><p>以一个自动配置类为例进行分析：<code>DataSourceAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.boot.autoconfigure.jdbc;<br><br><span class="hljs-meta">@AutoConfiguration(before = SqlInitializationAutoConfiguration.class)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</span><br><br><span class="hljs-meta">@EnableConfigurationProperties(DataSourceProperties.class)</span><br><span class="hljs-meta">@Import(&#123; DataSourcePoolMetadataProvidersConfiguration.class, DataSourceCheckpointRestoreConfiguration.class &#125;)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceAutoConfiguration</span> &#123;<br>    <br>    <span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Conditional(PooledDataSourceCondition.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span><br><span class="hljs-meta">@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span><br><span class="hljs-meta">DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.OracleUcp.class,</span><br><span class="hljs-meta">DataSourceConfiguration.Generic.class, DataSourceJmxConfiguration.class &#125;)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PooledDataSourceConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(JdbcConnectionDetails.class)</span><br>PropertiesJdbcConnectionDetails <span class="hljs-title function_">jdbcConnectionDetails</span><span class="hljs-params">(DataSourceProperties properties)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesJdbcConnectionDetails</span>(properties);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以发现代码<code>@EnableConfigurationProperties(DataSourceProperties.class)</code>即是开启进行配置文件与配置类属性的绑定，并把配置类<code>xxxProperties</code> 放到容器中，即配置绑定</p><ul><li>注解 <code>@EnableConfigurationProperties</code>中的值即是配置类，点击进入配置类 <code>DataSourceProperties</code></li><li>有一个注解<code>@ConfigurationProperties(prefix = "spring.datasource")</code>其中的 <code>prefix</code> 属性即是在配置文件<code>application.properties</code> 中的属性配置时的前缀</li><li>当自动配置类要添加一些组件到容器中的时候，需要的属性从配置类中获取，而配置类的属性从配置文件<code>application.properties</code> 中获取</li></ul></li></ul><blockquote><p>总结：在导入场景启动器时从 <code>xxx-autoconfigure.jar</code>包下的路径 <code>META-INF</code>下导入自动配置类（xxxAutoConfiguration），然后在自动配置类中又有添加组件，并把配置文件和属性类进行属性的绑定，把属性类放入容器中，可以用注解<code>@Enablexxx</code> 开启对应的功能，比如： <code>@EnableAsync</code>，简畧的流程图如下：</p></blockquote><figure><img src="/images/SSM_Study/SpringBoot自动配置简略流程图.svg" srcset="/img/loading.gif" lazyloadalt="SpringBoot自动配置简畧流程图" /><figcaption aria-hidden="true">SpringBoot自动配置简畧流程图</figcaption></figure><h2 id="注解-configurationproperties-记录">注解<code>@ConfigurationProperties</code> 记录</h2><ul><li><p>如何创建一个配置属性类并把这个类中的属性与配置文件中的值相绑定，然后放到容器中，这就可以用到注解<code>@ConfigurationProperties</code> 了</p></li><li><p>步骤如下：</p><ul><li><p>在配置文件 <code>application.properties</code>中编写好属性名和值：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">wind.name</span> = <span class="hljs-string">windzwindy</span><br><span class="hljs-attr">wind.age</span> = <span class="hljs-string">20</span><br><span class="hljs-attr">wind.gender</span> = <span class="hljs-string">male</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个属性配置类 <code>WindProperties</code> 编写<code>Java</code> 代码，使用注解并指定属性的前缀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.properties;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;wind&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String gender;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写测试程序进行测试，如果出现乱码则把配置文件用<code>UTF-8</code> 重新编码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.boot.properties.WindProperties;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01DemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    WindProperties windProperties;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;windProperties = &quot;</span> + windProperties);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="注解-enableconfigurationproperties-记录">注解<code>@EnableConfigurationProperties</code> 记录</h2><ul><li><p>不用注解 <code>@Component</code>也可以把属性配置类放到容器中，这时可以用到注解<code>@EnableConfigurationProperties</code> 了</p></li><li><p>步骤如下：</p><ul><li><p>在配置文件 <code>application.properties</code>中编写好属性名和值：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">wind.name</span> = <span class="hljs-string">windzwindy</span><br><span class="hljs-attr">wind.age</span> = <span class="hljs-string">20</span><br><span class="hljs-attr">wind.gender</span> = <span class="hljs-string">male</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个属性配置类 <code>WindProperties</code> 编写<code>Java</code> 代码，使用注解并指定属性的前缀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.properties;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;wind&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String gender;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在一个类中用注解 <code>@EnableConfigurationProperties</code>引入属性配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext;<br><span class="hljs-keyword">import</span> org.wind.boot.properties.WindProperties;<br><br><span class="hljs-meta">@EnableConfigurationProperties(WindProperties.class)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01DemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(Springboot01DemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写测试程序进行测试，如果出现乱码则把配置文件用<code>UTF-8</code> 重新编码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.boot.properties.WindProperties;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01DemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    WindProperties windProperties;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;windProperties = &quot;</span> + windProperties);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="springboot-的另一种配置文件的格式-yaml-记录">SpringBoot的另一种配置文件的格式 <code>YAML</code> 记录</h2><ul><li><code>YAML</code>（YAML Ain't MarkupLanguage）是一种人类可读的数据序列化格式，通常用于配置文件、数据存储以及与应用程序之间的数据交换。<code>YAML</code>语法简洁且易于理解，它广泛应用于许多领域，如 <code>Kubernetes</code>配置文件、<code>Docker Compose</code>配置、<code>Ansible playbook</code> 等。</li></ul><p>下面列出了 YAML 的常见用法及其语法：由 AI 生成</p><ul><li>注意在 key 和 value 中的冒号 <code>:</code> 后有一个空格</li></ul><h3 id="基本数据类型">1. 基本数据类型</h3><ul><li><p><code>YAML</code> 支持以下基本数据类型：</p><ul><li><p>字符串（字符串会自动被解析为基本类型，不需要加引号）</p></li><li><p>数字（整数和浮动数）</p></li><li><p>布尔值（<code>true</code>, <code>false</code>）</p></li><li><p>空值（<code>null</code> 或者 <code>~</code>）</p></li></ul></li></ul><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">John</span> <span class="hljs-string">Doe</span>         <span class="hljs-comment"># 字符串</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">30</span>                <span class="hljs-comment"># 整数</span><br><span class="hljs-attr">height:</span> <span class="hljs-number">5.9</span>             <span class="hljs-comment"># 浮动数</span><br><span class="hljs-attr">is_active:</span> <span class="hljs-literal">true</span>         <span class="hljs-comment"># 布尔值</span><br><span class="hljs-attr">address:</span> <span class="hljs-literal">null</span>           <span class="hljs-comment"># 空值</span><br></code></pre></td></tr></table></figure><h3 id="列表数组">2. 列表（数组）</h3><ul><li><code>YAML</code>使用破折号（<code>-</code>）表示列表元素。列表项可以是基本类型，也可以是对象。</li><li>也可以用中括号表示<code>key: [ "value1", "value2", "value3" ]</code></li></ul><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">fruits:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apple</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">banana</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">orange</span><br><br><span class="hljs-attr">text:</span> [ <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span> ]<br></code></pre></td></tr></table></figure><h3 id="对象字典">3. 对象（字典）</h3><ul><li>YAML使用冒号（<code>:</code>）表示键值对。键和值之间必须有空格。</li><li>也可以用 <code>key: &#123; key1: value1, key2: value2&#125;</code> 表示</li></ul><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Alice</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">28</span><br>  <span class="hljs-attr">city:</span> <span class="hljs-string">New</span> <span class="hljs-string">York</span><br><br><span class="hljs-attr">animal:</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">cat</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">2</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="多行字符串">4. 多行字符串</h3><p>YAML 支持两种格式来定义多行字符串：</p><ul><li>使用 <code>|</code> 来表示保持换行的多行字符串。</li><li>使用 <code>&gt;</code> 来表示将换行转换为空格的多行字符串。</li></ul><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">description_with_newlines:</span> <span class="hljs-string">|</span><br><span class="hljs-string">  This is a multi-line</span><br><span class="hljs-string">  string that retains</span><br><span class="hljs-string">  the line breaks.</span><br><span class="hljs-string"></span><br><span class="hljs-attr">description_without_newlines:</span> <span class="hljs-string">&gt;</span><br><span class="hljs-string">  This is a multi-line</span><br><span class="hljs-string">  string that converts</span><br><span class="hljs-string">  line breaks to spaces.</span><br></code></pre></td></tr></table></figure><h3 id="注释">5. 注释</h3><p>YAML 使用 <code>#</code>来添加注释，注释会被忽略，不会影响数据解析。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># This is a comment</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">John</span>  <span class="hljs-comment"># This is also a comment</span><br></code></pre></td></tr></table></figure><h3 id="嵌套对象">6. 嵌套对象</h3><p>YAML支持嵌套对象，可以通过缩进来表示层级关系。缩进通常使用两个空格，但不能使用制表符。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">John</span><br>  <span class="hljs-attr">address:</span><br>    <span class="hljs-attr">street:</span> <span class="hljs-number">123</span> <span class="hljs-string">Main</span> <span class="hljs-string">St</span><br>    <span class="hljs-attr">city:</span> <span class="hljs-string">Springfield</span><br>    <span class="hljs-attr">zip:</span> <span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><h3 id="引用和锚点">7. 引用和锚点</h3><p>YAML 支持引用和锚点，可以使得数据在文档中重复使用。使用<code>&amp;</code> 定义锚点，使用 <code>*</code> 来引用锚点。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">defaults:</span> <span class="hljs-meta">&amp;defaults</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">30</span><br>  <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br><br><span class="hljs-attr">server1:</span><br>  <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-meta">*defaults</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">server1.example.com</span><br><br><span class="hljs-attr">server2:</span><br>  <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-meta">*defaults</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">server2.example.com</span><br></code></pre></td></tr></table></figure><p>在上面的例子中，<code>server1</code> 和 <code>server2</code> 会继承<code>defaults</code> 的值。</p><h3 id="数据类型转换">8. 数据类型转换</h3><p>YAML 允许对一些数据类型进行显式转换。比如，使用 <code>!!int</code>强制将字符串转换为整数。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">number:</span> <span class="hljs-type">!!int</span> <span class="hljs-string">&quot;123&quot;</span>   <span class="hljs-comment"># 强制将字符串 &quot;123&quot; 转换为整数</span><br></code></pre></td></tr></table></figure><h3 id="合并键值对">9. 合并键值对</h3><p>可以使用 <code>&lt;&lt;</code>来合并一个或多个映射（键值对）到另一个对象中。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">base:</span> <span class="hljs-meta">&amp;base</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-attr">dev:</span><br>  <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-meta">*base</span><br>  <span class="hljs-attr">environment:</span> <span class="hljs-string">development</span><br><br><span class="hljs-attr">prod:</span><br>  <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-meta">*base</span><br>  <span class="hljs-attr">environment:</span> <span class="hljs-string">production</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br></code></pre></td></tr></table></figure><h3 id="使用时间和日期">10. 使用时间和日期</h3><ul><li>YAML 支持 ISO 8601 格式的日期和时间。</li><li>在 SpringBoot 中用 <code>YYYY/MM/DD HH:mm:SS</code> 格式</li></ul><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">date:</span> <span class="hljs-number">2000</span><span class="hljs-string">/01/01</span> <span class="hljs-number">00</span><span class="hljs-string">:00:00</span><br></code></pre></td></tr></table></figure><h3 id="特殊字符转义">11. 特殊字符转义</h3><p>YAML支持转义字符。可以使用双引号（<code>"</code>）包围字符串，来转义一些特殊字符。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">escaped_string:</span> <span class="hljs-string">&quot;This is a \&quot;quoted\&quot; string&quot;</span><br></code></pre></td></tr></table></figure><h3 id="使用-创建自定义标签">12. 使用 <code>!</code> 创建自定义标签</h3><p>YAML 允许自定义标签，用 <code>!</code> 来定义自定义数据类型。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_type:</span> <span class="hljs-type">!MyCustomType</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-number">42</span><br></code></pre></td></tr></table></figure><h3 id="多文档">13. 多文档</h3><p>YAML 支持多个文档，文档之间通过 <code>---</code> 来分隔。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">person1:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">John</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">30</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">person2:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Alice</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><h3 id="使用-null-或-表示空值">14. 使用 <code>null</code> 或<code>~</code> 表示空值</h3><p>YAML 允许使用 <code>null</code> 或 <code>~</code> 来表示空值。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">empty_value:</span> <span class="hljs-literal">null</span><br><span class="hljs-attr">another_empty_value:</span> <span class="hljs-string">~</span><br></code></pre></td></tr></table></figure><h3 id="行内表示法">15. 行内表示法</h3><p>可以在一行内表示列表和字典，避免多行展示。</p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">fruits:</span> [<span class="hljs-string">apple</span>, <span class="hljs-string">banana</span>, <span class="hljs-string">orange</span>]<br><span class="hljs-attr">person:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">Alice</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">28</span>&#125;<br></code></pre></td></tr></table></figure><p>YAML是一种非常灵活且易于理解的数据表示语言，常用于配置管理、应用程序设置、数据交换等场景。以上是YAML 的一些常见用法，你可以根据需求在实际应用中灵活运用这些特性。</p><h2 id="springboot-banner-修改记录">SpringBoot Banner 修改记录</h2><ul><li><p>在 SpringBoot 启动的时候有一个 Logo 显示，它是可以换的</p></li><li><p>修改配置文件即可，这里修改的是<code>application.properties</code> ：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 修改为使用类路径下的 banner.txt 文件作为 SpringBoot 的启动 Logo</span><br><span class="hljs-attr">spring.banner.location</span>=<span class="hljs-string">classpath:banner.txt</span><br></code></pre></td></tr></table></figure></li><li><p>然后在 <code>/src/resources</code> 下新建一个文件<code>banner.txt</code> 里面写入 Logo 即可，这里的 Logo 使用的是<code>figlet</code> 工具生成，也有一些<ahref="https://bootschool.net/ascii">在线网站</a>也可以生成：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">__        ___           _ _____         _           _<br>\ \      / (_)_ __   __| |__  /_      _(_)_ __   __| |_   _<br> \ \ /\ / /| | &#x27;_ \ / _` | / /\ \ /\ / / | &#x27;_ \ / _` | | | |<br>  \ V  V / | | | | | (_| |/ /_ \ V  V /| | | | | (_| | |_| |<br>   \_/\_/  |_|_| |_|\__,_/____| \_/\_/ |_|_| |_|\__,_|\__, |<br>                                                      |___/<br></code></pre></td></tr></table></figure></li></ul><h2 id="springboot-的另几种启动项目的方式记录">SpringBoot的另几种启动项目的方式记录</h2><ul><li><p>调用静态方法 <code>run</code> 方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01DemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Springboot01DemoApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 <code>SpringApplication</code> 对象再调用 <code>run</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.Banner;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01DemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">SpringApplication</span> <span class="hljs-variable">springApplication</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(Springboot01DemoApplication.class);<br><br>        <span class="hljs-comment">// 项目设置，关闭 banner 功能</span><br>        springApplication.setBannerMode(Banner.Mode.OFF);<br><br>        <span class="hljs-comment">// 启动项目</span><br>        springApplication.run(args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>SpringApplicationBuilder</code> 方式启动项目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.Banner;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01DemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建构造器对象</span><br>        <span class="hljs-type">SpringApplicationBuilder</span> <span class="hljs-variable">springApplicationBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationBuilder</span>();<br>        <span class="hljs-comment">// 使用构造器启动项目</span><br>        springApplicationBuilder.sources(Springboot01DemoApplication.class)<br>                .bannerMode(Banner.Mode.OFF)<br>                .run(args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="springboot-日志记录">SpringBoot 日志记录</h2><ul><li>在项目开发时，难免会用到日志而不是控制台输出</li><li>SpringBoot 默认使用的组合是 <code>slf4j + logback</code>作为日志记录（由场景启动器 <code>spring-boot-starter-logging</code>知），<ahref="https://docs.spring.io/spring-boot/reference/features/logging.html">官方文档</a></li></ul><h3 id="日志门面和日志实现记录">日志门面和日志实现记录</h3><ul><li>日志分为：日志门面（Logging Facade）和日志实现（LoggingImplementation），下面是 AI 生成的介绍：<ul><li>常见日志门面：<ul><li><code>SLF4J (Simple Logging Facade for Java)</code>：目前主流的日志门面，由<code>Log4j/Logback</code>的作者开发；支持与多种日志实现（<code>Logback</code>、<code>Log4j 2</code>、<code>JUL</code>等）集成；通过适配器（如<code>slf4j-log4j</code>、<code>slf4j-jdk</code>）桥接到其他日志框架。</li><li><code>Apache Commons Logging (JCL)</code>：早期流行的日志门面，设计较为简单，动态绑定日志实现；因类加载问题逐渐被<code>SLF4J</code> 取代。</li><li><code>JBoss Logging</code>：主要用于 <code>JBoss/WildFly</code>生态，支持国际化和消息格式化。</li></ul></li><li>常见日志实现：<ul><li><code>Log4j 2</code>：<code>Apache</code>开发的下一代日志框架，性能优异（支持异步日志）；提供丰富的插件和扩展机制，支持<code>JSON/YAML</code> 配置；兼容 <code>SLF4J</code> 可以通过<code>log4j-slf4j-impl</code> 适配器与 <code>SLF4J</code> 集成。</li><li><code>Logback</code>：<code>SLF4J</code> 的原生实现，由<code>Log4j 1.x</code> 作者开发，性能优于<code>Log4j 1.x</code>；支持自动重新加载配置、细粒度过滤等特性；通常与<code>SLF4J</code> 直接搭配使用。</li><li><code>Log4j 1.x</code>：旧版日志框架，已停止维护，不推荐新项目使用。</li><li><code>Java Util Logging (JUL)</code>：<code>JDK</code>自带的日志实现，功能简单，扩展性较弱；可通过 <code>slf4j-jdk</code>适配器桥接到 <code>SLF4J</code>。</li><li><code>Tinylog</code>：轻量级日志框架，无外部依赖，适合小型项目；支持<code>SLF4J</code> 接口。</li></ul></li><li>典型搭配方案：<ul><li><code>SLF4J + Logback</code>：最经典的组合，<code>Logback</code>作为 <code>SLF4J</code> 的默认实现，不需要额外适配。</li><li><code>SLF4J + Log4j 2</code>：高性能组合，适合需要异步日志或复杂配置的场景。</li><li><code>SLF4J + JUL</code>：适用于依赖 <code>JDK</code>内置日志的简单场景。</li></ul></li></ul></li></ul><h3 id="日志级别记录">日志级别记录</h3><ul><li>日志的级别：<ul><li><code>SLF4J</code>支持的日志级别排序从低到高分别为：<code>TRACE</code> &lt;<code>DEBUG</code> &lt; <code>INFO</code> &lt; <code>WARN</code> &lt;<code>ERROR</code></li><li><code>Logback</code> 日志实现多了两个级别，排序为：<code>ALL</code>&lt; <code>TRACE</code> &lt; <code>DEBUG</code> &lt; <code>INFO</code>&lt; <code>WARN</code> &lt; <code>ERROR</code> &lt;<code>OFF</code></li></ul></li></ul><h3 id="日志使用记录">日志使用记录</h3><ul><li><p>日志用法：</p><ul><li><p>编写测试类，注意导入的包是 <code>org.slf4j</code> 下的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        <span class="hljs-comment">// 1. 获取日志记录器</span><br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(LogTest.class);<br><br>        <span class="hljs-comment">// 2. 日志记录</span><br>        logger.trace(<span class="hljs-string">&quot;trace 日志&quot;</span>);<br>        logger.info(<span class="hljs-string">&quot;info 日志&quot;</span>);<br>        logger.debug(<span class="hljs-string">&quot;debug 日志&quot;</span>);<br>        logger.warn(<span class="hljs-string">&quot;warn 日志&quot;</span>);<br>        logger.error(<span class="hljs-string">&quot;error 日志&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>运行后知道日志的格式为：<code>时间 级别 进程id --- 项目名 --- 线程名 --- 当前类名:日志内容</code>。</p></li><li><p>上面的代码每次都要获取 <code>Logger</code>有点麻烦，<code>Lombok</code> 提供了一个简单的注解，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        <br>        log.trace(<span class="hljs-string">&quot;trace 日志&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;info 日志&quot;</span>);<br>        log.debug(<span class="hljs-string">&quot;debug 日志&quot;</span>);<br>        log.warn(<span class="hljs-string">&quot;warn 日志&quot;</span>);<br>        log.error(<span class="hljs-string">&quot;error 日志&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="日志级别的调整记录">日志级别的调整记录</h3><ul><li><p>一般的日志输出只有三条日志，<code>TRACE</code> 和<code>DEBUG</code>日志级别没有显示，这是因为日志有一个默认级别（<code>INFO</code>），打印日志的时候只会打印默认级别以上的日志级别信息，可以在配置文件中更改默认的日志级别：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 调整默认级别为 Debug</span><br><span class="hljs-comment"># 支持设置为 TRACE、DEBUG、INFO、WARN、ERROR、FATAL、OFF</span><br><span class="hljs-attr">logging.level.root</span>=<span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure></li><li><p>如果想让默认日志级别为 <code>DEBUG</code> 而某个包下的日志级别为<code>INFO</code> 则可以在配置文件中用<code>logging.level.包名=日志级别</code> 进行配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 调整默认级别为 Debug</span><br><span class="hljs-comment"># 支持设置为 TRACE、DEBUG、INFO、WARN、ERROR、FATAL、OFF</span><br><span class="hljs-attr">logging.level.root</span>=<span class="hljs-string">debug</span><br><span class="hljs-comment"># org.wind.boot 是包名</span><br><span class="hljs-attr">logging.level.org.wind.boot</span>=<span class="hljs-string">info</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="日志分组配置记录">日志分组配置记录</h3><ul><li><p>如果想让多个包下的日志级别为同一个而且是经常要调整，又不想在配置文件中写多条配置，则可以用日志分组，使用<code>logging.group.组名=包1,包2,包x</code> 进行设置</p></li><li><p>把 <code>service</code> 包和 <code>dao</code>包下的日志级别配置为 <code>INFO</code> 配置文件如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 设置日志组</span><br><span class="hljs-attr">logging.group.biz</span>=<span class="hljs-string">org.wind.boot.service,org.wind.boot.dao</span><br><span class="hljs-comment"># 对日志级设置日志级别</span><br><span class="hljs-attr">logging.level.biz</span>=<span class="hljs-string">info</span><br></code></pre></td></tr></table></figure></li><li><p>SpringBoot 有个默认的组，<ahref="https://docs.spring.io/spring-boot/reference/features/logging.html#features.logging.log-groups">官方文档</a>：</p><ul><li><code>web</code>：<code>org.springframework.core.codec</code>,<code>org.springframework.http</code>,<code>org.springframework.web</code>,<code>org.springframework.boot.actuate.endpoint.web</code>,<code>org.springframework.boot.web.servlet.ServletContextInitializerBeans</code></li><li><code>sql</code>：`<code>org.springframework.jdbc.core</code>,<code>org.hibernate.SQL</code>, <ahref="https://www.jooq.org/javadoc/3.19.18/org/jooq/tools/LoggerListener.html"><code>LoggerListener</code></a>`</li></ul></li></ul><h3 id="日志信息输出到文件记录">日志信息输出到文件记录</h3><ul><li><p><ahref="https://docs.spring.io/spring-boot/reference/features/logging.html#features.logging.file-output">官方文档</a></p></li><li><table><thead><tr><th style="text-align: left;"><code>logging.file.name</code></th><th style="text-align: left;"><code>logging.file.path</code></th><th style="text-align: left;">效果</th></tr></thead><tbody><tr><td style="text-align: left;">未指定</td><td style="text-align: left;">未指定</td><td style="text-align: left;">只输出到控制台</td></tr><tr><td style="text-align: left;">特定文件，比如：<code>my.log</code></td><td style="text-align: left;">未指定</td><td style="text-align: left;">写到 <code>logging.file.name</code>指定的位置，可以是绝对路径，也可以是当前目录的相对路径</td></tr><tr><td style="text-align: left;">未指定</td><td style="text-align: left;">特定目录，比如：<code>/var/log</code></td><td style="text-align: left;">将 <code>spring.log</code> 写到<code>logging.file.path</code>指定的目录，可以是绝对目录，也可以是当前目录的相对目录</td></tr><tr><td style="text-align: left;">特定文件</td><td style="text-align: left;">特定目录</td><td style="text-align: left;">写到 <code>logging.file.name</code>指定的位置并忽略 <code>loggin.file.path</code>设置，可以是绝对路径，也可以是当前目录的相对路径</td></tr></tbody></table></li><li><p>更改配置文件，把日志输出为 <code>my.log</code>文件，启动项目测试，发现会在项目目录同级目录下有一个 <code>my.log</code>日志文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.file.name</span>=<span class="hljs-string">my.log</span><br></code></pre></td></tr></table></figure></li><li><p>把日志输出为 <code>D:/mylog/spring.log</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.file.path</span>=<span class="hljs-string">D:/mylog</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="日志文件归档与滚动切割记录">日志文件归档与滚动切割记录</h3><ul><li><p><ahref="https://docs.spring.io/spring-boot/reference/features/logging.html#features.logging.file-rotation">官方文档</a></p></li><li><table><thead><tr><th style="text-align: left;">配置项</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr><tdstyle="text-align: left;"><code>logging.logback.rollingpolicy.file-name-pattern</code></td><tdstyle="text-align: left;">日志存档的文件名格式<br />默认是<code>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz</code></td></tr><tr><tdstyle="text-align: left;"><code>logging.logback.rollingpolicy.clean-history-on-start</code></td><td style="text-align: left;">应用启动时是否清除以前存档<br />默认是<code>false</code></td></tr><tr><tdstyle="text-align: left;"><code>logging.logback.rollingpolicy.max-file-size</code></td><td style="text-align: left;">日志文件的最大大小<br />默认是<code>10MB</code></td></tr><tr><tdstyle="text-align: left;"><code>logging.logback.rollingpolicy.total-size-cap</code></td><tdstyle="text-align: left;">日志文件在被删除之前可以占用的最大大小<br />默认是<code>0B</code> 即不限制大小</td></tr><tr><tdstyle="text-align: left;"><code>logging.logback.rollingpolicy.max-history</code></td><td style="text-align: left;">保留的日志文件的最大天数（默认为7天）</td></tr></tbody></table></li><li><p>测试日志文件切割：</p><ul><li><p>更改配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.file.name</span>=<span class="hljs-string">my.log</span><br><span class="hljs-attr">logging.logback.rollingpolicy.max-file-size</span>=<span class="hljs-string">1MB</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;INFO 日志【&#123;&#125;】&quot;</span>, i);<br>            Thread.sleep(<span class="hljs-number">5</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="日志配置自定义记录">日志配置自定义记录</h3><ul><li><p><ahref="https://docs.spring.io/spring-boot/reference/features/logging.html#features.logging.custom-log-configuration">官方文档</a></p></li><li><table><thead><tr><th style="text-align: left;">日志系统</th><th style="text-align: left;">自定义文件名</th></tr></thead><tbody><tr><td style="text-align: left;">Logback</td><td style="text-align: left;"><code>logback-spring.xml</code>,<code>logback-spring.groovy</code>, <code>logback.xml</code>, or<code>logback.groovy</code></td></tr><tr><td style="text-align: left;">Log4j2</td><td style="text-align: left;"><code>log4j2-spring.xml</code> or<code>log4j2.xml</code></td></tr><tr><td style="text-align: left;">JDK (Java Util Logging)</td><td style="text-align: left;"><code>logging.properties</code></td></tr></tbody></table></li><li><p>因为当前用的是 <code>Logback</code> 日志实现，所以在<code>src/main/resources</code> 目录下创建一个 <code>logback.xml</code>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>logs/app.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义根日志级别和附加器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再次启动项目测试</p></li></ul><h3 id="日志实现切换记录">日志实现切换记录</h3><ul><li><p>当不想用 <code>logback</code> 日志实现时，可以切换到<code>log4j2</code> 日志实现，因为是基础 <code>starter</code> 中导入了<code>logback</code> 依赖，所以先要在 <code>pom.xml</code>中排队依赖，再导入 <code>log4j2</code> 的场景启动器</p></li><li><p><code>pom.xml</code> 代码添加下面内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 排队默认的日志实现 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 切换为 log4j2 日志实现 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-spring-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="springboot-环境隔离记录">SpringBoot 环境隔离记录</h2><ul><li>在初学习 Spring 的时候，有接触过一个注解，即 <code>@Profile</code>注解，这个注解可以配合 SpringBoot 的环境隔离机制使用</li></ul><h3 id="注解-profile-记录">注解 <code>@Profile</code> 记录</h3><ul><li><p>本质是一个 <span class="citation"data-cites="Conditional">@Conditional</span> 注解</p></li><li><p>根据不同的环境，启用不同环境相对应的组件，例如：数据源的注入，开发时用一个数据源，发布时用另一个数据源，此时就可以用到<span class="citation" data-cites="Profile">@Profile</span>注解了</p></li><li><p>如何指定环境：在配置文件 <code>application.properties</code>中激活相应的环境，例如激活 myenv 环境</p></li></ul><p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">myenv</span><br></code></pre></td></tr></table></figure></p><ul><li>无论有没有在配置文件中指定环境，都会有一个名为 <code>default</code>的环境，即默认环境</li></ul><h3 id="环境隔离步骤记录">环境隔离步骤记录</h3><ul><li><p>第一步：定义环境：在配置文件 <code>application.properties</code>中定义环境</p></li><li><p>第二步：定义这个环境下生效哪些组件或者哪些配置，<ahref="https://docs.spring.io/spring-boot/reference/features/external-config.html#features.external-config.files.profile-specific">官方文档</a></p><ul><li>生效组件用 <code>@Profile</code> 注解</li><li>生效配置用 <code>application-&#123;环境标识&#125;.properties</code>文件进行配置</li></ul></li><li><p>第三步：激活特定环境，<ahref="https://docs.spring.io/spring-boot/reference/features/profiles.html#features.profiles.adding-active-profiles">官方文档</a></p><ul><li>在 <code>application.properties</code> 中使用<code>spring.profiles.active=[环境标识数组]</code> 激活环境</li><li>也可以在启动项目中添加参数进行激活<code>java -jar demo.jar --spring.profiles.active=[环境标识数组]</code></li><li>也可以在 <code>application.properties</code> 中使用<code>spring.profiles.include=[环境标识数组]</code> 激活环境</li></ul></li><li><p>当配置好环境后，生效的配置有：</p><ul><li>默认配置</li><li>使用 <code>spring.profiles.active</code> 激活的配置</li><li>使用 <code>spring.profiles.include</code> 激活的配置</li></ul></li><li><p>配置的优先级：激活的配置 &gt; 默认配置</p></li><li><p>示例：</p><ul><li><p>在 <code>src/main/resources</code>下新建三个配置文件，并写入一点配置</p><ul><li><p><code>application-dev.properties</code>：</p><p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8888</span><br></code></pre></td></tr></table></figure></p></li><li><p><code>application-prod.properties</code>：</p><p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">9999</span><br></code></pre></td></tr></table></figure></p></li><li><p><code>application-test.properties</code>：</p><p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">10000</span><br></code></pre></td></tr></table></figure></p></li></ul></li><li><p>激活 <code>dev</code> 环境测试，这里选择在<code>application.properties</code> 中激活：</p><p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure></p></li><li><p>启动项目测试</p></li></ul></li></ul><h3 id="环境隔离分组功能记录">环境隔离分组功能记录</h3><ul><li><p>假设在 <code>src/main/resources</code>下有两个配置文件：<code>application-dev.properties</code> 和<code>application-common.properties</code>，如果想要一次同时激活这两个配置可以使用环境隔离的分组功能，<ahref="https://docs.spring.io/spring-boot/reference/features/profiles.html#features.profiles.adding-active-profiles">官方文档</a></p></li><li><p>更改配置文件 <code>application.properties</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 分组</span><br><span class="hljs-attr">spring.profiles.total[0]</span>=<span class="hljs-string">dev</span><br><span class="hljs-attr">spring.profiles.total[1]</span>=<span class="hljs-string">common</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 激活配置组</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">total</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="springboot-的外部化配置记录">SpringBoot 的外部化配置记录</h2><ul><li><p><ahref="https://docs.spring.io/spring-boot/reference/features/external-config.html#features.external-config.files">官方文档</a></p></li><li><p>当在代码中需要用到一些个属性是经常要变的，可以从<code>@Value</code>从配置文件中获取，而内部配置文件更改后要重新进行打包不方便，此时就要用到外部化配置了</p></li><li><p>在 SpringBoot 中外部配置比内部配置的优先级高</p></li><li><p>外部配置文件的方式：</p><ul><li>在 <code>jar</code> 包同目录下的配置文件<code>application.properties</code></li><li>在 <code>jar</code> 包同目录下的 <code>config</code>目录下的配置文件 <code>application.properties</code></li><li>在 <code>jar</code> 包同目录下的 <code>config</code>目录下的直接目录下的配置文件 <code>application.properties</code></li><li>在 命令行以参数形式指定对应的属性</li></ul></li><li><p>外部配置文件方式的优先级：命令行方式 &gt; <code>config</code>目录下的目录下 &gt; <code>config</code> 目录下 &gt; <code>jar</code>包同目录下 &gt; <code>jar</code> 包内部配置</p></li><li><p>当内部的激活配置和外部的默认配置同时生效时，使用的还是激活的配置，即激活配置优先级大于外部配置</p></li><li><p>示例：</p><ul><li><p>在配置文件 <code>application.properties</code>中写入要取的属性：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hello.msg</span>=<span class="hljs-string">你好，SpringBoot</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个 <code>Controller</code> 进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;hello.msg&#125;&quot;)</span><br>    String msg;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用浏览器打开 <code>/hello</code>访问测试，成功后打包，这里使用的是 <code>Maven</code>打的包，打包后有一个 <code>jar</code> 包，重命名为<code>app.jar</code></p></li><li><p>打开控制台，使用命令 <code>java -jar app.jar</code> 测试</p></li><li><p>如果此时要更改 <code>hello.msg</code>就不方便，要重新打包，所以在 <code>app.jar</code>的同目录下创建一个配置文件 <code>application.properties</code> 并修改<code>hello.msg</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 如果没有乱码问题用下面的中文</span><br><span class="hljs-comment"># hello.msg=你好！世界！</span><br><span class="hljs-comment"># 如果有乱码问题用下面的 Unicode 编码</span><br><span class="hljs-attr">hello.msg</span>=<span class="hljs-string">\u4F60\u597D\uFF01\u4E16\u754C\uFF01</span><br></code></pre></td></tr></table></figure></li><li><p>再次使用命令 <code>java -jar app.jar</code>运行应用，并用浏览器打开 <code>/hello</code> 测试</p></li><li><p>还有一种更“外部”的配置文件方式，就是在 <code>app.jar</code>的同目录下创建一个名为 <code>config</code>的文件夹，再在文件夹中创建一个配置文件<code>application.properties</code> 并修改 <code>hello.msg</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hello.msg</span>=<span class="hljs-string">hello world!</span><br></code></pre></td></tr></table></figure></li><li><p>还有一种更“外部”的配置文件方式，就是在 <code>config</code>目录下再创建一个目录，在新建的目录下创建一个配置文件<code>application.properties</code> 并修改 <code>hello.msg</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hello.msg</span>=<span class="hljs-string">hi world!</span><br></code></pre></td></tr></table></figure></li><li><p>当然，最外部的配置方式是在命令行以参数的方式指定对应的属性：<code>java -jar app.jar --hello.msg=hello,spring!</code></p></li></ul><figure><img src="/images/SSM_Study/SpringBoot配置文件优先级.svg" srcset="/img/loading.gif" lazyloadalt="SpringBoot配置文件优先级" /><figcaption aria-hidden="true">SpringBoot配置文件优先级</figcaption></figure></li></ul><h2 id="springboot-单元测试功能记录">SpringBoot 单元测试功能记录</h2><ul><li><ahref="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">官方地址</a></li></ul><h3 id="常用注解记录">常用注解记录</h3><ul><li><p>注解<code>@Test</code>：被该注解标注则表示该方法是测试方法</p></li><li><p>注解<code>@DisplayName</code>：该注解作用是为测试类或测试方法自定义显示名称</p></li><li><p>注解 <code>@BeforeEach</code>：表示注释的方法应在当前类中的每个<code>@Test</code>、<code>@RepeatedTest</code>、<code>@ParameterizedTest</code>或 <code>@TestFactory</code> 方法之前执行；</p></li><li><p>注解 <code>@AfterEach</code>：表示注释的方法应在当前类中的每个<code>@Test</code>、<code>@RepeatedTest</code>、<code>@ParameterizedTest</code>或 <code>@TestFactory</code> 方法之后执行；</p></li><li><p>注解 <code>@BeforeAll</code>：表示注释的方法应在当前类中的所有<code>@Test</code>、<code>@RepeatedTest</code>、<code>@ParameterizedTest</code>和 <code>@TestFactory</code> 方法之前执行；</p></li><li><p>注解 <code>@AfterAll</code>：表示注释的方法应在当前类中的所有<code>@Test</code>、<code>@RepeatedTest</code>、<code>@ParameterizedTest</code>和 <code>@TestFactory</code> 方法之后执行；</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnitTest</span> &#123;<br><br>    <span class="hljs-meta">@BeforeAll</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;test04 before all!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@DisplayName(&quot;FirstTest&quot;)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;test pass!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;test02 before!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;test03 after!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterAll</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;test05 after all!&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="断言机制记录">断言机制记录</h3><ul><li><p><ahref="https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions">官方文档</a></p></li><li><p>一般的测试只要是没有报错就是测试成功，而有的时候想要测试的是某个功能的值是否满足要求，这时就要用到断言机制了</p></li><li><p>示例：</p><ul><li><p>在 <code>service</code> 包下创建一个 <code>Service</code>类用于测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在测试方法中测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.boot.service.HelloService;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnitTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    HelloService helloService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> helloService.sayHello();<br>        log.info(s);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>此时测试没有问题，但不知道方法的返回值是否符合预想，即如果要求返回的值<code>s</code> 是 <code>hello</code>才算测试通过，此时可以用断言机制，更改测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.boot.service.HelloService;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnitTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    HelloService helloService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 获取结果</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> helloService.sayHello();<br>        <span class="hljs-comment">// 2. 进行断言</span><br>        Assertions.assertEquals(<span class="hljs-string">&quot;hello&quot;</span>, s, <span class="hljs-string">&quot;not pass&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="springboot-可观测性记录">SpringBoot 可观测性记录</h2><ul><li><p><ahref="https://docs.spring.io/spring-boot/reference/actuator/observability.html">官方文档介绍</a></p></li><li><p>可观察性（Observability）是从外部观察正在运行的系统的内部状态的能力。它由三大支柱组成：日志记录（logging）、指标（metrics）和跟踪（traces）。</p></li><li><p><ahref="https://docs.spring.io/spring-boot/reference/actuator/enabling.html">官方文档使用</a></p></li><li><p>在 <code>pom.xml</code> 文件中导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在配置文件 <code>application.properties</code>中添加下面内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br></code></pre></td></tr></table></figure></li><li><p>启动项目，访问项目下的 <code>/actuator</code> 路径</p></li></ul><h2 id="springboot-生命周期记录">SpringBoot 生命周期记录</h2><h3 id="springboot-生命周期监听器记录">SpringBoot生命周期监听器记录</h3><ul><li><p>SpringBoot 生命周期简略图如图：</p><figure><img src="/images/SSM_Study/SpringBoot生命周期.svg" srcset="/img/loading.gif" lazyloadalt="SpringBoot生命周期" /><figcaption aria-hidden="true">SpringBoot生命周期</figcaption></figure></li><li><p>有几个生命周期的监听器：<code>ApplicationListener</code> 和<code>ApplicationRunner</code> 和 <code>CommandLineRunner</code>比较常用</p><table><thead><tr><th>监听器</th><th>感知阶段</th><th>配置方式</th></tr></thead><tbody><tr><td>BootstrapRegistryInitializer</td><td>特定阶段：引导初始化</td><td>1、META-INF/spring.factories<br />2、application.addBootstrapRegistryInitializer()</td></tr><tr><td>ApplicationContextInitializer</td><td>特定阶段：IOC容器初始化</td><td>1、META-INF/spring.factories<br />2、application.addInitializers()</td></tr><tr><td>ApplicationListener</td><td>全阶段</td><td>1、META-INF/spring.factories<br />2、SpringApplication.addListeners(...)<br />3、<spanclass="citation" data-cites="Bean">@Bean</span> 或 <spanclass="citation" data-cites="EventListener">@EventListener</span></td></tr><tr><td>SpringApplicationRunListener</td><td>全阶段</td><td>META-INF/spring.factories</td></tr><tr><td>ApplicationRunner</td><td>特定阶段：感知应用就绪</td><td><span class="citation" data-cites="Bean">@Bean</span></td></tr><tr><td>CommandLineRunner</td><td>特定阶段：感知应用就绪</td><td><span class="citation" data-cites="Bean">@Bean</span></td></tr></tbody></table></li><li><p>示例：</p><ul><li><p>监听器类：<code>MyListener.class</code></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.listener;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.boot.ConfigurableBootstrapContext;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplicationRunListener;<br><span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SpringApplicationRunListener</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">starting</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyListener starting&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">started</span><span class="hljs-params">(ConfigurableApplicationContext context, Duration timeTaken)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyListener started&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ready</span><span class="hljs-params">(ConfigurableApplicationContext context, Duration timeTaken)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyListener ready&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(ConfigurableApplicationContext context, Throwable exception)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyListener failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">environmentPrepared</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyListener environmentPrepared&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoaded</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyListener contextLoaded&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextPrepared</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyListener contextPrepared&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>写好监听器代码后，要在 <code>META-INF</code>文件夹下配置监听器，在 <code>src/main/resources</code> 目录下创建一个<code>META-INF</code> 文件夹，再在 <code>META-INF</code>文件夹下创建一个配置文件 <code>spring.factories</code>，<ahref="https://docs.spring.io/spring-boot/reference/actuator/process-monitoring.html#actuator.process-monitoring.configuration">官方文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs factories"># 监听器接口=实现<br>org.springframework.boot.SpringApplicationRunListener=org.wind.boot.listener.MyListener<br></code></pre></td></tr></table></figure></li><li><p>启动项目在控制台的日志就有对应的输出</p></li></ul></li><li><p><code>CommandLineRunner</code> 监听器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.wind.boot.properties.WindProperties;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@EnableConfigurationProperties(WindProperties.class)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01DemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Springboot01DemoApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    CommandLineRunner <span class="hljs-title function_">commandLineRunner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> args -&gt; &#123;<br>            log.info(<span class="hljs-string">&quot;CommandLine Runner start&quot;</span>);<br>        &#125;;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="springboot-生命周期事件记录">SpringBoot 生命周期事件记录</h3><ul><li><p><ahref="https://docs.spring.io/spring-boot/reference/features/spring-application.html#features.spring-application.application-events-and-listeners">官方文档</a></p></li><li><p>生命周期和事件关系简略图如图：</p><figure><img src="/images/SSM_Study/SpringBoot生命周期事件.svg" srcset="/img/loading.gif" lazyloadalt="SpringBoot生命周期事件" /><figcaption aria-hidden="true">SpringBoot生命周期事件</figcaption></figure></li><li><p>系统九大事件：下面介绍由AI进行翻译</p><ul><li><code>ApplicationStartingEvent</code>：在应用启动时发送，但在任何处理之前，除了监听器和初始化器的注册。</li><li><code>ApplicationEnvironmentPreparedEvent</code>：当环境已经确定，但在创建应用上下文之前发送。</li><li><code>ApplicationContextInitializedEvent</code>：当应用上下文准备好并且应用上下文初始化器已被调用，但在加载任何<code>Bean</code> 定义之前发送。</li><li><code>ApplicationPreparedEvent</code>：在刷新操作开始之前发送，但在加载<code>Bean</code> 定义之后。</li><li><code>ApplicationStartedEvent</code>：在应用上下文已被刷新之后发送，但在调用任何应用和命令行运行器之前。</li><li><code>AvailabilityChangeEvent</code>：紧接着发送，表示应用已被认为是活跃的，<code>LivenessState</code>为 <code>CORRECT</code>。</li><li><code>ApplicationReadyEvent</code>：在调用任何应用和命令行运行器之后发送。</li><li><code>AvailabilityChangeEvent</code>：紧接着发送，表示应用已准备好接受请求，<code>ReadinessState</code>为 <code>ACCEPTING_TRAFFIC</code>。</li><li><code>ApplicationFailedEvent</code>：如果启动时发生异常，则发送此事件。</li></ul></li></ul><h4 id="事件驱动开发记录">事件驱动开发记录</h4><ul><li><p>事件驱动开发分为三步：</p><ul><li>定义事件：<ul><li>任意事件：任意类可以作为事件类，建议命名 <code>xxxEvent</code></li><li>系统事件：继承 <code>ApplicationEvent</code></li></ul></li><li>事件发布：<ul><li>组件实现 <code>ApplicationEventPublisherAware</code></li><li>自动注入 <code>ApplicationEventPublisher</code></li></ul></li><li>事件监听：<ul><li>组件 + 方法标注 <code>@EventListener</code></li></ul></li></ul></li><li><p>示例：有一个用户登录的场景，当用户登录成功后，进行优惠劵的发放和用户积分的增加</p><ul><li><p>编写 <code>Service</code>：</p><ul><li><p>编写 <code>CouponService</code> 优惠劵服务类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CouponService</span> &#123; <span class="hljs-comment">// 优惠劵服务</span><br><br>    <span class="hljs-comment">// 发放优惠劵给用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">giveCoupon</span><span class="hljs-params">(String username)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;发放给用户【&#123;&#125;】一张优惠劵&quot;</span>, username);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>UserPointsService</code> 积分服务类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserPointsService</span> &#123; <span class="hljs-comment">// 用户积分服务</span><br><br>    <span class="hljs-comment">// 赠送积分给用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">givePoints</span><span class="hljs-params">(String username)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;用户【&#123;&#125;】获得积分&quot;</span>, username);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编写 <code>UserController</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.boot.service.CouponService;<br><span class="hljs-keyword">import</span> org.wind.boot.service.UserPointsService;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    CouponService couponService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserPointsService userPointsService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        <span class="hljs-comment">// 执行登录</span><br>        log.info(<span class="hljs-string">&quot;用户【&#123;&#125;】登录系统&quot;</span>, username);<br>        <span class="hljs-comment">// 1. 增加积分</span><br>        userPointsService.givePoints(username);<br>        <span class="hljs-comment">// 2. 发优惠劵</span><br>        couponService.giveCoupon(username);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;登录成功&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动应用，并访问<code>/login?username=windzwindy&amp;password=123456</code>路径，指定好用户名和密码</p></li><li><p>这种方式可以达到想要的目的，但是如果以后要增加一些需求或者删除一些需求就很麻烦，每次都要在<code>Controller</code>中再次编码，而且增加积分和发放优惠劵这种服务是同步的有阻塞</p></li></ul></li><li><p>使用事件驱动方式：</p><ul><li><p>定义事件 <code>UserLoginSuccessEvent</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.event;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginSuccessEvent</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserLoginSuccessEvent</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>登录后发布事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationEventPublisher;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.boot.event.UserLoginSuccessEvent;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-comment">// 注入事件发布器</span><br>    <span class="hljs-meta">@Autowired</span><br>    ApplicationEventPublisher publisher;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        <span class="hljs-comment">// 执行登录</span><br>        log.info(<span class="hljs-string">&quot;用户【&#123;&#125;】登录系统&quot;</span>, username);<br>        <span class="hljs-comment">// 创建事件</span><br>        <span class="hljs-type">UserLoginSuccessEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLoginSuccessEvent</span>(username);<br>        <span class="hljs-comment">// 发布事件</span><br>        publisher.publishEvent(event);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;登录成功&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>监听事件：</p><ul><li><p>优惠劵服务监听事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.event.EventListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.wind.boot.event.UserLoginSuccessEvent;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CouponService</span> &#123; <span class="hljs-comment">// 优惠劵服务</span><br><br>    <span class="hljs-meta">@EventListener(UserLoginSuccessEvent.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(UserLoginSuccessEvent event)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;优惠劵服务：监听到事件 UserLoginSuccessEvent &quot;</span>);<br>        <span class="hljs-comment">// 获取用户名 username</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> event.getUsername();<br>        <span class="hljs-comment">// 发放优惠劵</span><br>        giveCoupon(username);<br>    &#125;<br><br>    <span class="hljs-comment">// 发放优惠劵给用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">giveCoupon</span><span class="hljs-params">(String username)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;发放给用户【&#123;&#125;】一张优惠劵&quot;</span>, username);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>积分服务监听事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.event.EventListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.wind.boot.event.UserLoginSuccessEvent;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserPointsService</span> &#123; <span class="hljs-comment">// 用户积分服务</span><br><br>    <span class="hljs-meta">@EventListener(UserLoginSuccessEvent.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(UserLoginSuccessEvent event)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;积分服务：监听到事件 UserLoginSuccessEvent &quot;</span>);<br>        <span class="hljs-comment">// 获取用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> event.getUsername();<br>        <span class="hljs-comment">// 增加积分</span><br>        givePoints(username);<br>    &#125;<br><br>    <span class="hljs-comment">// 赠送积分给用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">givePoints</span><span class="hljs-params">(String username)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;用户【&#123;&#125;】获得积分&quot;</span>, username);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>这样就不用在 <code>Controller</code>中写多个调用了，如果想要用多线程可以在事件监听处用注解<code>@Async</code> 注意要用 <code>@EnableAsync</code>注解打开异步功能</p></li><li><p>开启多线程：</p><ul><li><p>优惠劵服务监听事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.event.EventListener;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Async;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.wind.boot.event.UserLoginSuccessEvent;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CouponService</span> &#123; <span class="hljs-comment">// 优惠劵服务</span><br><br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-meta">@EventListener(UserLoginSuccessEvent.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(UserLoginSuccessEvent event)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;优惠劵服务：监听到事件 UserLoginSuccessEvent &quot;</span>);<br>        <span class="hljs-comment">// 获取用户名 username</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> event.getUsername();<br>        <span class="hljs-comment">// 发放优惠劵</span><br>        giveCoupon(username);<br>    &#125;<br><br>    <span class="hljs-comment">// 发放优惠劵给用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">giveCoupon</span><span class="hljs-params">(String username)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;发放给用户【&#123;&#125;】一张优惠劵&quot;</span>, username);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>积分服务监听事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.event.EventListener;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Async;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.wind.boot.event.UserLoginSuccessEvent;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserPointsService</span> &#123; <span class="hljs-comment">// 用户积分服务</span><br><br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-meta">@EventListener(UserLoginSuccessEvent.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(UserLoginSuccessEvent event)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;积分服务：监听到事件 UserLoginSuccessEvent &quot;</span>);<br>        <span class="hljs-comment">// 获取用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> event.getUsername();<br>        <span class="hljs-comment">// 增加积分</span><br>        givePoints(username);<br>    &#125;<br><br>    <span class="hljs-comment">// 赠送积分给用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">givePoints</span><span class="hljs-params">(String username)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;用户【&#123;&#125;】获得积分&quot;</span>, username);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在主程序中开启异步功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;<br><br><span class="hljs-meta">@EnableAsync</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootDemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootDemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>以上的事件只有当前应用能够感知，其它服务器上的应用是感知不到的，所以这种事件驱动叫：本地消息（事件）模式，在分布式系统中用的是：分布式消息（事件）模式；</p></li></ul><h2 id="springboot-自定义-starter-记录">SpringBoot 自定义 starter记录</h2><ul><li><p>自定义 starter 步骤：</p><ul><li>导入对应的依赖</li><li>编写好功能代码</li><li>编写好属性配置类</li><li>编写好自动配置类 <code>xxxAutoConfiguration</code>用于第一层抽取</li><li>编写一个注解 <code>@Enablexxx</code> 功能开关注解用于第二层抽取</li><li>在 <code>src/main/resources</code> 下创建 <code>META-INF</code>文件夹，再在其下创建一个 <code>spring</code> 文件夹，再在其下创建一个<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件</li></ul></li><li><p>示例：机器人示例，创建 <code>SpringBoot</code> 项目</p><ul><li><p>编写属性配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.robot.starter.properties;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;robot&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RobotProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String model;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Service</code>：</p><ul><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.robot.starter.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RobotService</span> &#123;<br>    String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.robot.starter.service.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.properties.RobotProperties;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.service.RobotService;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RobotServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RobotService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RobotProperties robotProperties;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是机器人【&quot;</span> + robotProperties.getName() + <span class="hljs-string">&quot;】，使用底层大模型：【&quot;</span> + robotProperties.getModel() + <span class="hljs-string">&quot;】；现在开始聊天吧&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编写 <code>Controller</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.robot.starter.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.service.RobotService;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RobotController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RobotService robotService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/robot/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> robotService.sayHello();<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写自动配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.robot.starter;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.controller.RobotController;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.properties.RobotProperties;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.service.RobotService;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.service.impl.RobotServiceImpl;<br><br><span class="hljs-meta">@EnableConfigurationProperties(RobotProperties.class)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RobotAutoConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RobotController <span class="hljs-title function_">robotController</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RobotController</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RobotService <span class="hljs-title function_">robotService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RobotServiceImpl</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在另一个 <code>SpringBoot</code> 项目中的 <code>pom.xml</code>导入进行测试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.wind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>robot-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再编写配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">springboot-02-demo</span><br><span class="hljs-attr">robot.name</span>=<span class="hljs-string">机器人1</span><br><span class="hljs-attr">robot.model</span>=<span class="hljs-string">myrobot10</span><br></code></pre></td></tr></table></figure></li><li><p>再在主程序中引入自动配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.RobotAutoConfiguration;<br><br><span class="hljs-meta">@Import(RobotAutoConfiguration.class)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot02DemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Springboot02DemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动项目，在浏览器上输入路径 <code>/robot/hello</code>进行测试</p></li><li><p>回到 starter 进行第二层抽取：编写注解用于开始功能而不是手动用<code>@Import</code> 导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.robot.starter.annotation;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.RobotAutoConfiguration;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(RobotAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableRobot &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再回到另一个项目，更改主程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.wind.robot.starter.annotation.EnableRobot;<br><br><span class="hljs-meta">@EnableRobot</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot02DemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Springboot02DemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再次启动应用测试</p></li><li><p>再回到 starter 进行第三层抽取，创建<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件，在里面写入要自动加载的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs imports">org.wind.robot.starter.RobotAutoConfiguration<br></code></pre></td></tr></table></figure></li><li><p>再回到另一个项目，更改主程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.boot;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot02DemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Springboot02DemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再次启动应用测试</p></li></ul></li></ul><h2 id="spring-要掌握的源码记录">Spring 要掌握的源码记录</h2><ul><li>SpringBoot 自动配置原理</li><li>SpringMVC DispatcherServlet 流程</li><li>Spring IOC 容器（三级缓存机制）</li><li>Spring 事务原理（TransactionManager、TransactionInterceptor）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 记录（基于 SpringBoot）</title>
    <link href="/2025/02/23/Spring_Record/"/>
    <url>/2025/02/23/Spring_Record/</url>
    
    <content type="html"><![CDATA[<h1 id="spring-记录基于-springboot">Spring 记录（基于 SpringBoot）</h1><h2 id="通过-classpathxmlapplicationcontext-类创建-ioc-容器">1. 通过ClassPathXmlApplicationContext 类创建 ioc 容器</h2><ul><li>这个章节是后面补充</li><li>类似的可以用其它 xxxApplicationContext 创建 ioc 容器</li></ul><h4 id="创建容器">创建容器</h4><ul><li><p>在 <code>src/main/resources</code> 目录或者其它目录下新建一个名为<code>spring.xml</code> 的配置文件，其内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写 main 方法，查看一下容器中有几个 bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 1. 通过配置文件创建 ioc 容器</span><br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;classpath:spring.xml&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 查看容器中有几个 Bean</span><br>        <span class="hljs-keyword">for</span> (String beanDefinitionName : ioc.getBeanDefinitionNames()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;beanDefinitionName = &quot;</span> + beanDefinitionName);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="给容器放一些-bean">给容器放一些 Bean</h4><ul><li><p>创建一个 Bean 类，比如 <code>Person.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String gender;<br> <br>    <span class="hljs-comment">// constructor</span><br>    <span class="hljs-comment">// getter and setter</span><br>    <span class="hljs-comment">// toString</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编辑 <code>spring.xml</code> 配置文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wind&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.wind.spring.bean.Person&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面新增加的代码意思是给容器中放一个 Person 组件，有唯一的 id 为wind</p></li><li><p>再次调用 main 方法构建容器，并查看容器中的 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 1. 通过配置文件创建 ioc 容器</span><br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;classpath:spring.xml&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 查看容器中有几个 Bean</span><br>        <span class="hljs-keyword">for</span> (String beanDefinitionName : ioc.getBeanDefinitionNames()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;beanDefinitionName = &quot;</span> + beanDefinitionName);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到有了一个 wind 的 bean</p></li></ul><h4 id="给容器中的-bean-属性赋值">给容器中的 bean 属性赋值</h4><ul><li><p>可以看到，刚才的 Person 类有多个属性，可以给其赋值</p></li><li><p>更改 <code>spring.xml</code> 配置文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wind&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.wind.spring.bean.Person&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;widn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#&#123;2*10&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;man&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中 value 中的 # 号是 spring 表达式，具体可以看 <code>@Value</code>注解的用法</p></li><li><p>验证是否成功赋值：再次更改 <code>Main.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 1. 通过配置文件创建 ioc 容器</span><br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;classpath:spring.xml&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 查看容器中有几个 Bean</span><br>        <span class="hljs-keyword">for</span> (String beanDefinitionName : ioc.getBeanDefinitionNames()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;beanDefinitionName = &quot;</span> + beanDefinitionName);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 3. 获取组件</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> ioc.getBean(Person.class);<br>        System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person);<br><br>        <span class="hljs-comment">// 或者获取所有的 Person 类组件</span><br>        <span class="hljs-comment">// Map&lt;String, Person&gt; persons = ioc.getBeansOfType(Person.class);</span><br>        <span class="hljs-comment">// System.out.println(&quot;persons = &quot; + persons);</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="批量扫描并添加组件">批量扫描并添加组件</h4><ul><li><p>太多的组件不想手动配，此时可以在 <code>spring.xml</code> 中用component-scan 指定批量扫描哪个包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wind&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.wind.spring.bean.Person&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;widn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#&#123;2*10&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;man&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置批量扫描  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.wind&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="注册组件记录">2. 注册组件记录</h2><h3 id="注解-bean-记录">注解 <code>@Bean</code> 记录</h3><p>用于把一个对象放到 ioc 容器中，名字默认是方法名，可以指定名字</p><p>如果名字重复，那么只获取一个的时候按照字母顺序进行获取</p><p>这个注解放在方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Test <span class="hljs-title function_">getTest</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(); &#125;<br><span class="hljs-meta">@Bean(&quot;test2&quot;)</span><br><span class="hljs-keyword">public</span> Test <span class="hljs-title function_">getTest2</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(); &#125;<br></code></pre></td></tr></table></figure><p>检验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (String beanDefinitionName : ioc.getBeanDefinitionNames()) &#123;<br> System.out.println(beanDefinitionName);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解-configuration-记录">注解 <code>@Configuration</code>记录</h3><p>本质是 <code>@Component</code>，用于标注在类上面：类里面的方法用<code>@Bean</code> 标注，用 <code>@Configuration</code>标注的类本身也是一个组件</p><p>这个注解放在类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> Test <span class="hljs-title function_">getTest</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(); &#125;<br>    <span class="hljs-meta">@Bean(&quot;aaa&quot;)</span><br>    <span class="hljs-keyword">public</span> NewTest <span class="hljs-title function_">getNewTest</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewTest</span>(); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>检验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (String beanDefinitionName : ioc.getBeanDefinitionNames()) &#123;<br> System.out.println(beanDefinitionName);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解-controllerservicerepositorycomponent-记录">注解<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Component</code>记录</h3><p>本质上是同一个东西，用于方便区分类的作用</p><p><code>@Controller</code> 一般标注在 Controller 类上</p><p><code>@Service</code> 一般标注在 Service 类上</p><p><code>@Repository</code> 一般标注在 Dao 类上</p><p>这几个注解放在类上</p><h3 id="注解-componentscan-记录">注解 <code>@ComponentScan</code>记录</h3><p>用于指定扫描包的范围，比如在 org.wind下写了很多的组件则可以指定范围，这个注解可以写在很多地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(basePackages = &quot;org.wind&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMain</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="注解-import-记录">注解 <code>Import</code> 记录</h3><p>用于导入别人写的类，这个注解可以写在很多地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(Other.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMain</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="注解-scope-记录">注解 <code>@Scope</code> 记录</h3><p>一般放在 <span class="citation" data-cites="Bean">@Bean</span>上，默认不写就是 singleton</p><ul><li>prototype：多实例，需要用的时候才进行实例化</li><li>singleton：单实例，容器启动时就完成了实例化</li><li>request（不常用）</li><li>session（不常用）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span>&#123;<br>    <span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Test <span class="hljs-title function_">getTest</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解-lazy-记录">注解 <code>@Lazy</code> 记录</h3><p>要用这个组件时才进行实例化</p><p>一般配合 singleten 用，因为 singleton 在容器启动时就实例化了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span>&#123;<br>    <span class="hljs-meta">@Lazy</span><br>    <span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Test <span class="hljs-title function_">getTest</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口-factorybeant-记录">接口 FactoryBean&lt;T&gt; 记录</h3><p>新建一个 T 类型的组件放到容器中，更灵活地造 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Test&gt; &#123;<br> <span class="hljs-comment">// 返回一个实例</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Test <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(); &#125;<br>    <span class="hljs-comment">// 返回类型</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123; <span class="hljs-keyword">return</span> Test.class; &#125;<br>    <span class="hljs-comment">// 是单例吗</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解-conditional-记录">注解 <code>@Conditional</code> 记录</h3><p>判断 <code>@Conditional</code> 指定的 Condition 接口的实现类对象的matches 方法的返回值，如果是真则创建被 <code>@Conditional</code>标注的组件，如果是假则不创建</p><p>这个注解可以标注在方法和类上</p><ul><li>负责创建 Bean 的包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonConfig</span> &#123;<br><br>    <span class="hljs-comment">// 判断 JohnCondition 中的 matches 方法的返回值，真则创建，假则不创建</span><br>    <span class="hljs-meta">@Conditional(JohnCondition.class)</span><br>    <span class="hljs-meta">@Bean(&quot;john&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">john</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setName(<span class="hljs-string">&quot;John&quot;</span>);<br>        person.setAge(<span class="hljs-number">20</span>);<br>        person.setGender(<span class="hljs-string">&quot;man&quot;</span>);<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断 JohnCondition 中的 matches 方法的返回值，真则创建，假则不创建</span><br>    <span class="hljs-meta">@Conditional(PaulCondition.class)</span><br>    <span class="hljs-meta">@Bean(&quot;paul&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">paul</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setName(<span class="hljs-string">&quot;paul&quot;</span>);<br>        person.setAge(<span class="hljs-number">20</span>);<br>        person.setGender(<span class="hljs-string">&quot;man&quot;</span>);<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>判断条件的包（实现 Condition 接口的类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.condition;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JohnCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>又</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.condition;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaulCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显只会创建一个名为 paul 的 Person 类实例</p><ul><li>Condition 接口有很多派生类，可以直接用</li></ul><h2 id="注入组件记录">3. 注入组件记录</h2><h3 id="注解-autowired-记录">注解 <code>@Autowired</code> 记录</h3><p><code>@Autowired</code> 注解可以用在属性、setter方法上</p><p><code>@Autowired</code> 注解可以用来注入==非简单类型==</p><p>默认按照类型在容器中找实现类，注入</p><p>如果找到多个，再按照变量名去找，注入，如果变量名找不到，报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    Person wind;<br>    <br>    <span class="hljs-comment">// 拿到所有的 Person 类型组件</span><br>    <span class="hljs-meta">@Autowired</span><br>    List&lt;Person&gt; personList;<br>    <br>    <span class="hljs-comment">// 拿到所有的 Person 类型组件，并以组件名为 map 的 key</span><br>    <span class="hljs-meta">@Autowired</span><br>    Map&lt;String, Person&gt; personMap;<br>&#125;<br></code></pre></td></tr></table></figure><p>标注在 setter 方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.dao;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br> Cat cat;<br><br>    <span class="hljs-comment">//@Autowired</span><br>    <span class="hljs-comment">//public void setCat(Cat cat) &#123;</span><br>    <span class="hljs-comment">//    this.cat = cat;</span><br>    <span class="hljs-comment">//&#125;</span><br>    <br>    <span class="hljs-comment">// 如果容器中有多个组件，可以用 @Qualifier 指定名称</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCat</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;mycat&quot;)</span> Cat cat)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cat = cat;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>其中可以指定 required 属性，如果为false，那么在容器中找不相应的组件，就为 null，不报错</li></ul><h3 id="注解-primary-和-qualifier-记录">注解 <code>@Primary</code> 和<code>@Qualifier</code> 记录</h3><h4 id="primary"><code>@Primary</code></h4><p>配合 <span class="citation" data-cites="Autowired">@Autowired</span>注解使用，用于指定默认用的组件</p><p>当 <span class="citation" data-cites="Autowired">@Autowired</span>注入时有多个同类型的组件可以注入，此时不知道注入哪一个，如果在注册组件时用<span class="citation" data-cites="Primary">@Primary</span>标注了组件，那么尽管有多个同类型的组件可以注入，<span class="citation"data-cites="Autowired">@Autowired</span> 也会优先选择带有 <spanclass="citation" data-cites="Primary">@Primary</span> 的组件</p><ul><li>注册组件时，有多个同类型组件，用 <span class="citation"data-cites="Primary">@Primary</span> 指定默认注入的组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonConfig</span> &#123;<br>    <br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(&quot;wind&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">wind</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;wind&quot;</span>); &#125;<br>    <br>    <span class="hljs-meta">@Bean(&quot;windzwindy&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">windzwindy</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;windzwindy&quot;</span>); &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注入时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    Person person;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="qualifier"><code>@Qualifier</code></h4><p>配合 <span class="citation" data-cites="Autowired">@Autowired</span>注解使用，用于指定装配的组件名称</p><p>当 <span class="citation" data-cites="Autowired">@Autowired</span>注入时有多个同类型的组件可以注入，不知道注入哪一个，此时就用 <spanclass="citation" data-cites="Qualifier">@Qualifier</span>指定要注入的组件名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <br>    <span class="hljs-meta">@Qualifier(&quot;wind&quot;)</span><br>    <span class="hljs-meta">@Autowired</span><br>    Person person;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>==如果 <span class="citation"data-cites="Qualifier">@Qualifier</span> 和 <span class="citation"data-cites="Primary">@Primary</span> 同时用，按 <span class="citation"data-cites="Qualifier">@Qualifier</span> 指定的组件名称来==</p><h3 id="注解-resource-记录">注解 <span class="citation"data-cites="Resource">@Resource</span> 记录</h3><ul><li><p>这个注解是 jakarta 规定的，而 <span class="citation"data-cites="AutoWired">@AutoWired</span> 是 Spring 规定的</p></li><li><p>这个注解也是自动注入的功能，默认按照属性名去容器中找对应组件名进行注入</p></li><li><p>如果找不到与属性名相应的组件名，那么就会按照属性类型去容器中找相应组件类型进行注入</p></li><li><p><span class="citation" data-cites="Autowired">@Autowired</span>默认按照的是类型，如果要想按名字匹配，还要和 <span class="citation"data-cites="Qualifier">@Qualifier</span> 配合</p></li><li><p><span class="citation" data-cites="Resource">@Resource</span>注解没有像 <span class="citation"data-cites="Autowired">@Autowired</span> 注解的 required相关属性</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    UserDao userDao;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有参构造器注入记录">有参构造器注入记录</h3><ul><li>指定一个有参构造器，不用注解就可以自动注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.dao;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br> Cat cat;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDao</span><span class="hljs-params">(Cat cat)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cat = cat;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="aware-接口记录">Aware 接口记录</h3><p>Spring 中有一个 Aware 接口（感知接口），并且有许多接口继承于它</p><p>有一个组件在容器中，这个组件实现了 xxxAware（感知接口），Spring在调用这个组件时，会自动调用感知接口中的方法，如果方法有参数，则会在容器中找到相应的组件传进去，只需要要写方法就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanNameAware</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String myname;<br><br>    <span class="hljs-comment">// 这个方法是感知接口 BeanNameAware 中的，其中 name 会自动传进来</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeanName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.myname = name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMyname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.myname;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySpringApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(MySpringApplication.class, args);<br><br>        <span class="hljs-type">MyComponent</span> <span class="hljs-variable">mycomponent</span> <span class="hljs-operator">=</span> ioc.getBean(MyComponent.class);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myname</span> <span class="hljs-operator">=</span> mycomponent.getMyname();<br>        System.out.println(<span class="hljs-string">&quot;myname = &quot;</span> + myname);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解-value-记录">注解 <code>@Value</code> 记录</h3><p><code>@Autowired</code> 注解是用来自动注入组件的，基本类型要用<code>@Value</code> 注解</p><h4 id="第一种用法直接赋值">第一种用法：直接赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <br>    <span class="hljs-meta">@Value(&quot;wind&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br> <br>    <span class="hljs-meta">@Value(&quot;20&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码，将一个名为 Person的组件放进容器中，当从容器中取的时候，它的属性 name 为 wind，它的属性age 为 20</p><h4id="第二种用法valuexxxdefault动态取值从配置文件中取">第二种用法：<code>@Value("$&#123;xxx:default&#125;")</code>，动态取值，从配置文件中取</h4><p>默认从 <code>src\main\resources\application.properties</code>文件中取，如果想在其他配置文件中取，需要用 <code>@PropertySource</code>注解</p><p>比如刚好在 <code>src\main\resources</code>文件夹下有一个配置文件：<code>application.properties</code></p><p>里面的内容为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">person.name</span>=<span class="hljs-string">windziwndy</span><br><span class="hljs-attr">person.age</span>=<span class="hljs-string">18</span><br></code></pre></td></tr></table></figure><p>对应的动态取值代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br> <br>    <span class="hljs-meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>如果配置文件中没有配置相应的值，但又在 <span class="citation"data-cites="Value">@Value</span>中去取，此时可以加个冒号，在冒号的后面指定默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br> <br>    <span class="hljs-meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;person.gender:&#x27;man&#x27;&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4id="第三种用法valuespelspring-表达式">第三种用法：<code>@Value("#&#123;SpEL&#125;")</code>，<ahref="https://docs.spring.io/spring-framework/reference/core/expressions.html">Spring表达式</a></h4><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <br>    <span class="hljs-meta">@Value(&quot;#&#123;T(java.util.UUID).randomUUID().toString()&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <br>    <span class="hljs-meta">@Value(&quot;#&#123;new String(\&quot;wind\&quot;)&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br> <br>    <span class="hljs-meta">@Value(&quot;#&#123;2*10&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>那么从容器中取 Person 组件时，属性 id 是一个 UUID 属性 name 为 wind发展 age 为 20</p><h3 id="注解-propertysource-记录">注解 <code>@PropertySource</code>记录</h3><p>拓展指定属性来源</p><p>当用 <span class="citation" data-cites="Value">@Value</span>注解动态从配置文件中取值的时值，如果不想从<code>application.properties</code> 配置文件中取，则可以用 <spanclass="citation" data-cites="PropertySource">@PropertySource</span>注解指定在哪个配置文件中取</p><p>比如刚好在 <code>src\main\resources</code>文件夹下有一个配置文件：<code>person.properties</code></p><p>里面的内容为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">person.name</span>=<span class="hljs-string">wind</span><br><span class="hljs-attr">person.age</span>=<span class="hljs-string">20</span><br></code></pre></td></tr></table></figure><p>取值代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @PropertySource(&quot;file:/path/xxx&quot;)</span><br><span class="hljs-comment">// @PropertySource(&quot;classpath*:/xxx&quot;) // 查找所有类路径，导入别人包的配置文件时可以用</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:/person.properties&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br> <br>    <span class="hljs-meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>注意：用了这个注解后指定属性配置文件后，依然可以在<code>application.properties</code> 中取值</p><h3 id="resourceutils-工具类记录">ResourceUtils 工具类记录</h3><p>通过代码方式获取资源，并进行一系列文件流的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> ResourceUtils.getFile(<span class="hljs-string">&quot;classpath:person.properties&quot;</span>);<br></code></pre></td></tr></table></figure><p>支持的前缀有很多种，可以进源码看一下</p><h3 id="注解-profile-记录">注解 <code>@Profile</code> 记录</h3><p>本质是一个 <span class="citation"data-cites="Conditional">@Conditional</span> 注解</p><p>根据不同的环境，启用不同环境相对应的组件，例如：数据源的注入，开发时用一个数据源，发布时用另一个数据源，此时就可以用到<span class="citation" data-cites="Profile">@Profile</span> 注解了</p><p>如何指定环境：在配置文件 <code>application.properties</code>中激活相应的环境，例如激活 myenv 环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">myenv</span><br></code></pre></td></tr></table></figure><p>无论有没有在配置文件中指定环境，都会有一个名为 <code>default</code>的环境，即默认环境</p><p>代码示例：</p><ul><li><p>Spring 配置文件：<code>application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure></li><li><p>数据源类：<code>DataSource.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.datasource;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSource</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <br>    <span class="hljs-comment">// constructor</span><br>    <span class="hljs-comment">// getter and setter</span><br>    <span class="hljs-comment">// toString</span><br>    <span class="hljs-comment">// ...</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数据源配置类：<code>DataSourceConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConfig</span> &#123;<br><br>    <span class="hljs-comment">// 开发环境用</span><br>    <span class="hljs-meta">@Profile(&quot;dev&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MyDataSource <span class="hljs-title function_">dev</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">myDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDataSource</span>();<br>        DataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/dev&quot;</span>);<br>        DataSource.setUsername(<span class="hljs-string">&quot;dev_user&quot;</span>);<br>        DataSource.setPassword(<span class="hljs-string">&quot;dev_password&quot;</span>);<br>        <span class="hljs-keyword">return</span> myDataSource;<br>    &#125;<br><br>    <span class="hljs-comment">// 生产环境用</span><br>    <span class="hljs-meta">@Profile(&quot;prod&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MyDataSource <span class="hljs-title function_">prod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">myDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDataSource</span>();<br>        DataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/prod&quot;</span>);<br>        DataSource.setUsername(<span class="hljs-string">&quot;prod_user&quot;</span>);<br>        DataSource.setPassword(<span class="hljs-string">&quot;prod_password&quot;</span>);<br>        <span class="hljs-keyword">return</span> myDataSource;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>持久层类，做一些数据操作：<code>UserDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.dao;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-comment">// 注意，此处会注入 dev 组件，因为上面的配置文件中激活了 dev 环境</span><br>    <span class="hljs-comment">// 而 prod 组件只在 prod 环境才生效</span><br>    <span class="hljs-meta">@Autowired</span><br>    DataSource dataSource;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 此处仅模拟做一此操作</span><br>        System.out.println(dataSource + <span class="hljs-string">&quot;searching...&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>注意：如果上面的配置文件中没有指定激活的环境，那么就是<code>default</code> 环境，因为没有指定 <code>default</code>环境用哪一个 <code>DataSource</code> 组件，所以用<code>@Autowired</code> 自动注入就会找不到 <code>DataSource</code>组件而报错，这时可以在指定多个环境去解决，修改数据源配置类：<code>DataSourceConfig.java</code>中的 <code>@Profile</code>注解，指定环境为一个数组，这样以防报错，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConfig</span> &#123;<br><br>    <span class="hljs-comment">// 开发环境用，如果没有指定任何环境，即 default 环境，也用这个数据源</span><br>    <span class="hljs-meta">@Profile(&#123;&quot;dev&quot;, &quot;default&quot;&#125;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MyDataSource <span class="hljs-title function_">dev</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">myDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDataSource</span>();<br>        DataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/dev&quot;</span>);<br>        DataSource.setUsername(<span class="hljs-string">&quot;dev_user&quot;</span>);<br>        DataSource.setPassword(<span class="hljs-string">&quot;dev_password&quot;</span>);<br>        <span class="hljs-keyword">return</span> myDataSource;<br>    &#125;<br><br>    <span class="hljs-comment">// 生产环境用</span><br>    <span class="hljs-meta">@Profile(&quot;prod&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MyDataSource <span class="hljs-title function_">prod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">myDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDataSource</span>();<br>        DataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/prod&quot;</span>);<br>        DataSource.setUsername(<span class="hljs-string">&quot;prod_user&quot;</span>);<br>        DataSource.setPassword(<span class="hljs-string">&quot;prod_password&quot;</span>);<br>        <span class="hljs-keyword">return</span> myDataSource;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组件bean的生命周期记录">4. 组件（Bean）的生命周期记录</h2><h3 id="bean-注解的-initmethod-和-destroymethod-方法记录">1. <spanclass="citation" data-cites="Bean">@Bean</span> 注解的 initMethod 和destroyMethod 方法记录</h3><ul><li><p>创建一个 Bean类：<code>User.java</code>，留两个方法研究生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <br>    <span class="hljs-keyword">private</span> Car car;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCar</span><span class="hljs-params">(Car car)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;自动注入：&quot;</span> + car);<br>        <span class="hljs-built_in">this</span>.car = car;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;User 构造器...&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;@Bean 初始化&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;@Bean 销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建配置类，往容器中放一个 User组件，并指定初始化方法和销毁方法：<code>UserConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean(initMethod = &quot;initUser&quot;, destroyMethod = &quot;destroyUser&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试：<code>Main.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(Main.class, args);<br>        System.out.println(<span class="hljs-string">&quot;ioc create finished........................&quot;</span>);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ioc.getBean(User.class);<br>        System.out.println(<span class="hljs-string">&quot;bean = &quot;</span> + bean);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>流程大致如下：</p><figure><img src="/images/SSM_Study/bean生命周期.svg" srcset="/img/loading.gif" lazyload alt="bean生命周期" /><figcaption aria-hidden="true">bean生命周期</figcaption></figure><h3 id="实现-initializingbean-disposablebean-接口的生命周期user.java">2.实现 InitializingBean, DisposableBean接口的生命周期：<code>User.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span>, DisposableBean &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Car car;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCar</span><span class="hljs-params">(Car car)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;自动注入：&quot;</span> + car);<br>        <span class="hljs-built_in">this</span>.car = car;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;User 构造器...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;@Bean 初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;@Bean 销毁&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterPropertiesSet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>流程补充：</p><figure><img src="/images/SSM_Study/bean生命周期补充1.svg" srcset="/img/loading.gif" lazyloadalt="bean生命周期补充1" /><figcaption aria-hidden="true">bean生命周期补充1</figcaption></figure><h3 id="注解-postconstruct-和-predestroy-记录user.java">3. 注解 <spanclass="citation" data-cites="PostConstruct">@PostConstruct</span> 和<span class="citation" data-cites="PreDestroy">@PreDestroy</span>记录：<code>User.java</code></h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span>, DisposableBean &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Car car;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCar</span><span class="hljs-params">(Car car)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;自动注入：&quot;</span> + car);<br>        <span class="hljs-built_in">this</span>.car = car;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;User 构造器...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;@Bean 初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;@Bean 销毁&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postConstruct</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;PostConstruct execute&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preDestroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;PreDestroy execute&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterPropertiesSet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>流程补充：</p><figure><img src="/images/SSM_Study/bean生命周期补充2.svg" srcset="/img/loading.gif" lazyloadalt="bean生命周期补充2" /><figcaption aria-hidden="true">bean生命周期补充2</figcaption></figure><h3 id="接口-beanpostprocessor-的记录后置处理器">4. 接口BeanPostProcessor 的记录（后置处理器）</h3><p>用于做所有 Bean 的实例化、配置和初始化后实现一些自定义逻辑，所有的Bean 都会拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.processor;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <br>    <span class="hljs-comment">// 初始化前做后置处理</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(beanName + <span class="hljs-string">&quot;postProcessBeforeInitialization&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化后做后置处理</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(beanName + <span class="hljs-string">&quot;postProcessAfterInitialization&quot;</span>);<br><br>        <span class="hljs-comment">// 如果拦截到的是 User 则做一些修改，否则原样返回</span><br>        <span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> User user) &#123;<br>            user.setUsername(<span class="hljs-string">&quot;test&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>流程补充：</p><figure><img src="/images/SSM_Study/bean生命周期补充3.svg" srcset="/img/loading.gif" lazyloadalt="bean生命周期补充3" /><figcaption aria-hidden="true">bean生命周期补充3</figcaption></figure><p>例子：给带有 UUID 注解的属性自动注入一个UUID：<code>UUIDMethod.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.processor;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UUIDMethod</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br> <br>    <span class="hljs-meta">@SneakyThrows</span> <span class="hljs-comment">// lombok 注解，可以免写抛异常语句</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">// 获取类的所有属性</span><br>        Field[] fields = bean.getClass().getDeclaredFields();<br>        <span class="hljs-comment">// 对所有属性进行遍历</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            <span class="hljs-comment">// 如果属性有一个 UUID 注解，和这个属性是一个字符串类型才进行注入</span><br>            <span class="hljs-keyword">if</span> (field.isAnnotationPresent(UUID.class) &amp;&amp; field.getType().equals(String.class)) &#123;<br>                <span class="hljs-comment">// 设置属性为可访问</span><br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 生成 UUID</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> java.util.UUID.randomUUID().toString();<br>                <span class="hljs-comment">// 设置属性值</span><br>                field.set(bean, s)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="aop-面向切面编程记录">5. AOP 面向切面编程记录</h2><h3 id="代理模式记录">代理模式记录</h3><p>代理模式，对目标类进行包装</p><p>在代码实现上，包括两种形式：</p><h4id="静态代理在编码期间就决定好代理关系容易出现类爆炸">静态代理：在编码期间就决定好代理关系，容易出现类爆炸</h4><p>目标类和代理类一定是公共接口的实现类，否则就不叫包装了，代理模式有点功能拓展的意思，如果不是公共接口的实现类，那么想调用目标类的方法，有可能出现代理类对象中没有，所以要有一个公共接口去约束目标类和代理类</p><p>公共接口：<code>Work.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.work;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Work</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>目标类：<code>WorkImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.work.impl;<br><br><span class="hljs-keyword">import</span> org.wind.spring.aop.work.Work;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Work</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 真正核心逻辑方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Working ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理类：<code>WorkStaticProxy.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.proxy.statics;<br><br><span class="hljs-keyword">import</span> org.wind.spring.aop.work.Work;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkStaticProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Work</span> &#123;<br><br>    <span class="hljs-comment">// 有一个目标对象，用于调用其方法</span><br>    Work target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WorkStaticProxy</span><span class="hljs-params">(Work mc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = mc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 做一些功能在调用之前</span><br>        System.out.println(<span class="hljs-string">&quot;before work&quot;</span>);<br>        <br>        <span class="hljs-comment">// 调用目标对象中方法（真正需要的方法）</span><br>        <span class="hljs-built_in">this</span>.target.work();<br>        <br>        <span class="hljs-comment">// 做一些功能在调用之后</span><br>        System.out.println(<span class="hljs-string">&quot;after work&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：<code>StaticProxyTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop;<br><br><span class="hljs-keyword">import</span> org.wind.spring.aop.proxy.statics.WorkStaticProxy;<br><span class="hljs-keyword">import</span> org.wind.spring.aop.work.Work;<br><span class="hljs-keyword">import</span> org.wind.spring.aop.work.impl.WorkImpl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticProxyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Work</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkImpl</span>();<br>        <span class="hljs-comment">// 直接调用目标类的方法，可以和下面对比</span><br>        target.work();<br><br>        System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br><br>        <span class="hljs-type">Work</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkStaticProxy</span>(target);<br>        <span class="hljs-comment">// 调用代理类的方法</span><br>        proxy.work();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4id="动态代理在运行期间才决定好代理关系">动态代理：在运行期间才决定好代理关系</h4><ul><li><p>JDK动态代理技术（只能接口代理）</p><p>上面的：公共接口，代理类，目标类都不变</p><p>测试：<code>DynamicProxyTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop;<br><br><span class="hljs-keyword">import</span> org.wind.spring.aop.proxy.statics.WorkStaticProxy;<br><span class="hljs-keyword">import</span> org.wind.spring.aop.work.Work;<br><span class="hljs-keyword">import</span> org.wind.spring.aop.work.impl.WorkImpl;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 原生对象</span><br>        <span class="hljs-type">Work</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkImpl</span>();<br>        <span class="hljs-comment">// 直接调用目标类的方法，可以和下面对比</span><br>        target.work();<br><br>        System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br><br>        <span class="hljs-comment">// InvocationHandler 普通写法</span><br>        <span class="hljs-comment">/*InvocationHandler invocationHandler = new InvocationHandler() &#123;</span><br><span class="hljs-comment">            @Override</span><br><span class="hljs-comment">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="hljs-comment">                return null;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;;*/</span><br><br>        <span class="hljs-comment">// lambda 表达式写法</span><br>        <span class="hljs-comment">/*InvocationHandler invocationHandler = (Object proxy, Method method, Object[] args) -&gt; &#123;</span><br><span class="hljs-comment">            return null;</span><br><span class="hljs-comment">        &#125;;*/</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * ClassLoader loader,  类加载器（目标对象）</span><br><span class="hljs-comment">         * Class&lt;?&gt;[] interfaces,  目标对象实现的接口</span><br><span class="hljs-comment">         * InvocationHandler h,  处理器接口（函数式接口，可以用 lambda 表达式）先运行这里的 invoke 方法，</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">// 2. 创建动态代理</span><br><br>        <span class="hljs-comment">// 普通写法</span><br>        <span class="hljs-comment">//Object proxy = Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), invocationHandler);</span><br><br>        <span class="hljs-comment">// 一步写法</span><br>        <span class="hljs-type">Work</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> (Work) Proxy.newProxyInstance(<br>                target.getClass().getClassLoader(),<br>                target.getClass().getInterfaces(),<br>                (Object proxy, Method method, Object[] args) -&gt; &#123;<br><br>                    <span class="hljs-comment">// 调用前做一些操作</span><br>                    System.out.println(<span class="hljs-string">&quot;before invoke&quot;</span>);<br><br>                    <span class="hljs-comment">// 调用目标方法</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br><br>                    <span class="hljs-comment">// 调用后做一些操作</span><br>                    System.out.println(<span class="hljs-string">&quot;after invoke&quot;</span>);<br><br>                    <span class="hljs-comment">// 返回（目标方法返回的结果）</span><br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;);<br>        proxyInstance.work();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以把上面的代码提出来，就可以方便对任何类进行包装（动态代理）了</p><p>工具类：<code>DynamicProxy.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.proxy.dynamic;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxy</span> &#123;<br>    <span class="hljs-comment">// 传一个目标类进来，返回一个代理对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>                target.getClass().getClassLoader(),<br>                target.getClass().getInterfaces(),<br>                (proxy, method, args) -&gt; &#123;<br>                    <span class="hljs-comment">// 在调用目标对象方法前，进行一些操作</span><br>                    System.out.println(<span class="hljs-string">&quot;before proxy execute ...&quot;</span>);<br>                    <span class="hljs-comment">// 调用目标对象方法</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>                    <span class="hljs-comment">// 在调用目标对象方法后，进行一些操作</span><br>                    System.out.println(<span class="hljs-string">&quot;after proxy execute ...&quot;</span>);<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>工具再次改进：<code>DynamicProxy.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.proxy.dynamic;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxy</span> &#123;<br>    <span class="hljs-comment">// 传一个目标类进来，返回一个代理对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>                target.getClass().getClassLoader(),<br>                target.getClass().getInterfaces(),<br>                (proxy, method, args) -&gt; &#123;<br>                    <span class="hljs-comment">// 在调用目标对象方法前，进行一些操作</span><br>                    System.out.println(<span class="hljs-string">&quot;before proxy execute ...&quot;</span>);<br>                    <br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 调用目标对象方法</span><br>                        result = method.invoke(target, args);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        <span class="hljs-comment">// 异常处理</span><br>                        System.out.println(<span class="hljs-string">&quot;错误信息：&quot;</span> + e.getMessage());<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>                    &#125;<br>                    <br>                    <span class="hljs-comment">// 在调用目标对象方法后，进行一些操作</span><br>                    System.out.println(<span class="hljs-string">&quot;after proxy execute ...&quot;</span>);<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>CGLIB动态代理技术</p></li><li><p>Javassist动态代理技术</p></li></ul><h3 id="aop-专业术语">AOP 专业术语</h3><ul><li>学习于 <code>杜聚宾</code> 与 <code>雷丰阳</code> 老师</li></ul><p>连接点（JoinPoint）：可以进行织入通知的地方</p><p>切入点（PointCut）：真正织入通知的地方</p><p>通知（Advice）：要织入的代码</p><p>切面类（Aspect）：里面有多个通知，<strong>切面=通知+连接点</strong></p><p>织入（Weave）：把通知添加到目标对象上的过程</p><p>目标对象（Target）：被织入的对象</p><p>代理对象（Proxy）：织入后的对象（新对象）</p><figure><img src="/images/SSM_Study/AOP术语.svg" srcset="/img/loading.gif" lazyload alt="AOP专业术语" /><figcaption aria-hidden="true">AOP专业术语</figcaption></figure><h3 id="spring-aop-编写记录">Spring AOP 编写记录</h3><p>参照官方文档：<ahref="https://docs.spring.io/spring-framework/reference/core/aop.html">AspectOriented Programming with Spring :: Spring Framework</a></p><ul><li><p>有一个目标类 <code>PeopleImpl.java</code> 实现了<code>People.java</code> 接口：</p><ul><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.people;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(String foodName)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>目标类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.people.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.wind.spring.aop.people.People;<br><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">// 放进容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PeopleImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;working...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(String foodName)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;eating &quot;</span> + foodName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>创建一个测试类，用于测试：<code>AOPTest</code>.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.spring.aop.people.People;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AOPTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    People people;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(people);<br>        people.work();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果我想用 Spring 的 AOP为上面的类加一个日志功能如何做？</p></li><li><p>第一步：先在 <code>pom.xml</code> 文件中导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>第二步：要有一个切面类：<code>LogAspect.java</code></p></li><li><p>第三步：切面类中写通知方法</p></li><li><p>第四步：给通知方法指定切入点表达式</p></li><li><p>注意：</p><ul><li>切面类要用 <code>@Aspect</code> 注解，表明这是一个切面</li><li>切面类也要放进 ioc 容器中，否则无法使用</li><li>里面写很多个方法，这些个方法就是通知（Advice）</li><li>给通知方法指定切入点表达式<ul><li>在方法执行的什么时候进行通知？用下面四个注解指定</li><li>在什么方法上进行通知？用切入点表达式指定</li></ul></li><li>此处有四个常用注解，每个注解都需要一个切入点表达式：<ul><li><code>@Before</code> ：在执行方法前进行通知</li><li><code>@AfterReturning</code>：在方法正常返回后进行通知（注意与下面的 <code>@After</code>注解进行区分）</li><li><code>@AfterThrowing</code> ：在发生异常后进行通知</li><li><code>@After</code> ：方法执行后进行通知，不管正常异常返回</li></ul></li><li>切入点表达式基本写法，用中括号的都可以不写：<code>execution([方法访问控制修饰符] 方法返回值类型 [全类名]+方法名(参数类型) [throws 异常类名])</code><ul><li>方法名如果为 <code>*</code> 号，则表示所有方法，方法参数用<code>..</code> 表示任意数量参数，包名用 <code>..</code>表示多个层级的包</li><li>匹配所有方法<code>execution(* *(..))</code>，一般不会用<ul><li>例如：</li><li><code>execution(public void org.wind.spring.aop.people.People.work())</code></li><li><code>execution(public void org.wind.spring.aop.people.People.eat(String))</code></li><li><code>execution(void work())</code></li><li><code>execution(void eat(String))</code></li><li><code>execution(void *())</code></li><li><code>"execution(public void org.wind.spring.aop.people.People.*(..))"</code></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(public void org.wind.spring.aop.people.People.work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logStart</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志开始...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(public void work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logEnd</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志结束...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(public void work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logReturn</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志返回...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(public void work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logException</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志异常...&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再次运行测试程序，发现已经有日志了，代表切面成功织入了</p></li><li><p>可以打印一下对象的类型：</p></li><li><p>修改测试类：<code>AOPTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.spring.aop.people.People;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AOPTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    People people;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <br>        System.out.println(people.getClass()); <span class="hljs-comment">// 这里打印一下对象的类型</span><br>        <br>        people.work();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现后面是<code>$$SpringCGLIB$$0</code>结尾，即是代理对象</p></li></ul><h4 id="注解-aspect-记录">注解 <code>@Aspect</code> 记录</h4><p>表示这是一个切面类</p><h4 id="注解-before-记录">注解 <code>@Before</code> 记录</h4><p>在指定的目标类方法执行之前进行通知</p><h4 id="注解-afterreturning-记录">注解 <code>@AfterReturning</code>记录</h4><p>在指定的目标类方法正常返回后进行通知</p><p>这个注解有一个参数 <code>returning</code> 用于指定返回值：</p><p>如果通知方法有两个参数，请注意顺序：JoinPoint 参数在前 Object参数在后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(value = &quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;, returning = &quot;result&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logReturn</span><span class="hljs-params">(Object result)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;日志返回...，目标方法返回结果为：&quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注解-afterthrowing-记录">注解 <code>@AfterThrowing</code>记录</h4><p>在指定的目标类方法发生异常进行通知</p><p>这个注解有一个参数 <code>throwing</code> 用于指定异常对象</p><p>如果通知方法有两个参数，请注意顺序：JoinPoint 参数在前 Exception参数在后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(value = &quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;, throwing = &quot;e&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;日志异常...，异常信息&quot;</span> + e.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注解-after-记录">注解 <code>@After</code> 记录</h4><p>在指定的目标类方法执行之后进行通知，不论是否发生异常都会通知，与上面的<code>@AfterReturning</code> 不一样</p><h4 id="注解-around-记录">注解 <code>@Around</code> 记录</h4><ul><li><p>即环绕通知时用</p></li><li><p>前面的“前置通知、返回通知、异常通知、后置通知”都只是感知，不能修改目标方法的参数、返回值等</p></li><li><p>“环绕通知”可以控制目标方法是否执行，修改目标方法参数、执行结果等</p></li><li><p>被 <code>@Around</code> 注解的方法有下面要求：</p><ul><li><p>The method should declare <code>Object</code> as its return type,and the first parameter of the method must be of type<code>ProceedingJoinPoint</code>.Within the body of the advice method,you must invoke <code>proceed()</code> on the<code>ProceedingJoinPoint</code> in order for the underlying method torun. Invoking <code>proceed()</code> without arguments will result inthe caller’s original arguments being supplied to the underlying methodwhen it is invoked. For advanced use cases, there is an overloadedvariant of the <code>proceed()</code> method which accepts an array ofarguments (<code>Object[]</code>). The values in the array will be usedas the arguments to the underlying method when it is invoked.</p><ul><li>返回值类型为：<code>Object</code></li><li>第一个参数类型为：<code>ProceedingJoinPoint</code></li><li>在方法体内要执行 <code>ProceedingJoinPoint</code> 的<code>proceed()</code>方法，方法可以传参数，参数类型为：<code>Object[]</code></li></ul></li></ul></li><li><p>环绕通知示例，切面代码：<code>AroundAspect.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AroundAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* org.wind.spring.aop.people.People.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    ;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 环绕通知有固定写法，如下：</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Around(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundAdvice</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>        <span class="hljs-comment">// 获取目标方法的参数</span><br>        Object[] args = joinPoint.getArgs();<br><br>        <span class="hljs-comment">// 方法前做事情，即前置通知了</span><br>        System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 前置通知&quot;</span>);<br><br>        <span class="hljs-comment">//Object result = joinPoint.proceed(args); // 类似于反射中的 method.invoke();</span><br><br>        <span class="hljs-comment">// 如果想做异常通知则：捕获异常做</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 类似于反射中的 method.invoke();</span><br>            result = joinPoint.proceed(args);<br>            System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 返回通知&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;e.getMessage() = &quot;</span> + e.getMessage());<br>            System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 异常通知&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 无论正常异常都会有通知，即后置通知</span><br>            System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 后置通知&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 也可以在这里做返回通知</span><br>        <span class="hljs-comment">//System.out.println(&quot;【环绕通知】 -- 返回通知&quot;);</span><br><br>        <span class="hljs-comment">// 可以修改返回结果</span><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="切入点表达式写法记录">切入点表达式写法记录</h4><ul><li><p>参照官方文档：<ahref="https://docs.spring.io/spring-framework/reference/core/aop/ataspectj/pointcuts.html">Declaringa Pointcut :: Spring Framework</a></p></li><li><p>切入点表达式基本写法，用中括号的都可以不写：<code>execution([方法访问控制修饰符] 方法返回值类型 [全类名]+方法名(参数类型) [throws 异常类名])</code></p><ul><li><p>方法名如果为 <code>*</code> 号，则表示所有方法，方法参数用<code>..</code> 表示任意数量参数，包名用 <code>..</code>表示多个层级的包</p></li><li><p>匹配所有方法<code>execution(* *(..))</code>，一般不会用</p><ul><li>例如：</li><li><code>execution(public void org.wind.spring.aop.people.People.work())</code></li><li><code>execution(public void org.wind.spring.aop.people.People.eat(String))</code></li><li><code>execution(void work())</code></li><li><code>execution(void eat(String))</code></li><li><code>execution(void *())</code></li><li><code>"execution(public void org.wind.spring.aop.people.People.*(..))"</code></li></ul></li></ul></li><li><p><strong><code>execution</code></strong>：用于匹配方法执行连接点，最常用</p><ul><li>例子：<ul><li><p><code>execution(public * *(..))</code></p></li><li><p><code>execution(* set*(..))</code></p></li><li><p><code>execution(* com.xyz.service.AccountService.*(..))</code></p></li><li><p><code>execution(* com.xyz.service.*.*(..))</code></p></li><li><p><code>execution(* com.xyz.service..*.*(..))</code></p></li></ul></li></ul></li><li><p><code>within</code>：匹配指定类型内（包括子类型）的所有连接点，例子：</p><ul><li>类型 <code>com.xyz.service</code>下所有类和子包下的类的方法都进行切面：<ul><li><code>within(com.xyz.service..*)</code></li></ul></li><li>类型 <code>com.xyz.service</code> 下所有类的方法都进行切面：<ul><li><code>within(com.xyz.service.*)</code></li></ul></li></ul></li><li><p><code>this</code>：匹配代理对象是指定类型或其子类型的任何连接点，例子：</p><ul><li>实现了 <code>com.xyz.service.AccountService</code>接口的代理对象下的所有方法都进行切面：<ul><li><code>this(com.xyz.service.AccountService)</code></li></ul></li></ul></li><li><p><code>target</code>：匹配目标对象是指定类型或其子类型的任何连接点，例子：</p><ul><li>实现了 <code>com.xyz.service.AccountService</code>接口的目标对象下的所有方法都进行切面：<ul><li><code>target(com.xyz.service.AccountService)</code></li></ul></li></ul></li><li><p><strong><code>args</code></strong>：匹配方法参数是指定类型或其子类型的任何连接点（比较常用），例子：</p><ul><li>匹配方法参数有一个且类型为：<code>java.io.Serializable</code>的方法进行切面：</li><li><code>args(java.io.Serializable)</code></li></ul></li><li><p><code>bean</code>：匹配特定 Spring Bean 的所有连接点，这依赖于Spring Bean 的名称或 ID，例子：</p><ul><li>匹配 Bean 的 name 是 <code>tradeService</code>的组件，为其下所有方法进行切面：</li><li><code>bean(tradeService)</code></li><li>匹配 Bean 的 name 是以 <code>Service</code>结尾的组件，为其下所有方法进行切面：<ul><li><code>bean(*Service)</code></li></ul></li></ul></li><li><p><code>@target</code>：匹配标注了指定注解的所有目标对象的方法，例子：</p><ul><li>匹配目标对象上带有 <code>@Transactional</code>注解的对象，为其下所有方法进行切面：<ul><li><code>@target(org.springframework.transaction.annotation.Transactional)</code></li></ul></li></ul></li><li><p><code>@args</code>：匹配方法参数标注指定注解，例子：</p><ul><li>匹配方法参数上带有 <code>@Classified</code>注解的方法，为其进行切面：<ul><li><code>@args(com.xyz.security.Classified)</code></li></ul></li></ul></li><li><p><code>@within</code>：匹配目标对象类型上拥有指定注解的所有方法，例子：</p><ul><li>匹配目标对象上带有 <code>@Transactional</code>的对象，为其下所有方法进行切面：<ul><li><code>@within(org.springframework.transaction.annotation.Transactional)</code></li></ul></li></ul></li><li><p><strong><code>@annotation</code></strong>：匹配任何被指定注解标注的方法，例子：</p><ul><li>匹配带有<code>@Transactional</code> 注解的方法，为其进行切面：<ul><li><code>@annotation(org.springframework.transaction.annotation.Transactional)</code></li></ul></li></ul></li></ul><h4 id="增强器链记录">增强器链记录</h4><ul><li>切面中的所有方法其实就是增强器，他们被组织成一个链路放到集合中，目标方法真正执行前后，会去增强器链中执行那些需要提前执行的方法</li><li>打个断点，运行测试程序，点开代理对象，有一个<code>DynamicAdvisedInterceptor</code> 点开它，有一个<code>advised</code> 再点开，有一个 <code>advisors</code>里面就是一堆增强器</li><li>AOP 的底层原理（面试？）<ul><li>1、Spring 会为每个被切面切入的组件创建代理对象（Spring CGLIB创建的代理对象）</li><li>2、代理对象中保存了切面类里面所有通知方法构成的增强器链</li><li>3、目标方法执行时，会先去执行增强器链中拿到需要提前执行的通知方法去执行</li></ul></li></ul><h4 id="通知方法的执行顺序记录">通知方法的执行顺序记录</h4><ul><li>正常执行顺序：<ul><li>前置通知（<code>@Before</code>） -&gt; 目标方法 -&gt;返回通知（<code>@AfterReturning</code>） -&gt;后置通知（<code>@After</code>）</li></ul></li><li>不正常执行顺序<ul><li>前置通知（<code>@Before</code>） -&gt; 目标方法 -&gt;异常通知（<code>@AfterThrowing</code>） -&gt;后置通知（<code>@After</code>）</li></ul></li></ul><h4 id="joinpoint-连接点信息获取">JoinPoint 连接点信息获取</h4><ul><li><p>即然都做日志通知了，但是不知道为哪个目标方法做的通知（方法名），不知道目标方法的参数有哪些，也不知道目标方法的返回值是什么，所以这时候需要一个能获取连接点信息的东西，即<code>org.aspectj.lang.JoinPoint</code></p></li><li><p>通知方法的返回值，访问限定符无要求，但是方法的参数不能随便写，可以写一个<code>org.aspectj.lang.JoinPoint</code>类型参数用于获取方法名，方法参数等：<code>LogAspect.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(public void org.wind.spring.aop.people.People.work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logStart</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-comment">// 1. 拿到方法的全签名</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-comment">// 获取目标方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> signature.getName();<br>        <span class="hljs-comment">// 目标方法传来的参数值</span><br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;日志开始...，方法名：&quot;</span> + name + <span class="hljs-string">&quot;参数列表：&quot;</span>+ Arrays.toString(args));<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(public void work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logEnd</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志结束...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(public void work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logReturn</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志返回...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(public void work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logException</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志异常...&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行测试程序</p></li><li><p>获取目标方法的返回值，在注解 <code>@AfterReturning</code> 中的<code>returning</code> 参数指定：<code>LogAspect.java</code></p></li><li><p>如果通知方法有两个参数，请注意顺序：JoinPoint 参数在前 Object参数在后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(public void org.wind.spring.aop.people.People.work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logStart</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-comment">// 1. 拿到方法的全签名</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-comment">// 获取目标方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> signature.getName();<br>        <span class="hljs-comment">// 目标方法传来的参数值</span><br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;日志开始...，方法名：&quot;</span> + name + <span class="hljs-string">&quot;参数列表：&quot;</span>+ Arrays.toString(args));<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(public void work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logEnd</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志结束...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logReturn</span><span class="hljs-params">(Object result)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志返回...，目标方法返回结果为：&quot;</span> + result);<br>    &#125;<br><br><br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(public void work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logException</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志异常...&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>程序发生异常时，获取异常的信息，在注解<code>@AfterThrowing</code> 中的 <code>throwing</code>参数指定：<code>LogAspect.java</code></p></li><li><p>如果通知方法有两个参数，请注意顺序：JoinPoint 参数在前 Exception参数在后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(public void org.wind.spring.aop.people.People.work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logStart</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-comment">// 1. 拿到方法的全签名</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-comment">// 获取目标方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> signature.getName();<br>        <span class="hljs-comment">// 目标方法传来的参数值</span><br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;日志开始...，方法名：&quot;</span> + name + <span class="hljs-string">&quot;参数列表：&quot;</span>+ Arrays.toString(args));<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(public void work())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logEnd</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志结束...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logReturn</span><span class="hljs-params">(Object result)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志返回...，目标方法返回结果为：&quot;</span> + result);<br>    &#125;<br><br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;, throwing = &quot;e&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志异常...，异常信息&quot;</span> + e.getMessage());<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="注解-pointcut-记录">注解 <code>@Pointcut</code> 记录</h4><ul><li><p>为了实现切入点表达式的复用：可以用 <code>@Pointcut</code>注解，用法：在任意一个方法上加上注解，注解里面指定切入点表达式，然后在需要用切入点表达式的注解上写入方法名即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义</span><br><span class="hljs-meta">@Pointcut(&quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span>&#123;&#125;;<br><br><span class="hljs-comment">// 用法</span><br><span class="hljs-meta">@Before(&quot;pointcut()&quot;)</span><br><span class="hljs-meta">@After(&quot;pointcut()&quot;)</span><br><span class="hljs-meta">@AfterReturning(&quot;pointcut()&quot;)</span><br><span class="hljs-meta">@AfterThrowing(&quot;pointcut()&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>可以再次更改 <code>LogAspect.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <br>    <span class="hljs-meta">@Pointcut(&quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span>&#123;&#125;;<br><br>    <span class="hljs-meta">@Before(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logStart</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-comment">// 1. 拿到方法的全签名</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-comment">// 获取目标方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> signature.getName();<br>        <span class="hljs-comment">// 目标方法传来的参数值</span><br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;日志开始...，方法名：&quot;</span> + name + <span class="hljs-string">&quot;参数列表：&quot;</span>+ Arrays.toString(args));<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logEnd</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志结束...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;pointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logReturn</span><span class="hljs-params">(Object result)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志返回...，目标方法返回结果为：&quot;</span> + result);<br>    &#125;<br><br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;pointcut()&quot;, throwing = &quot;e&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志异常...，异常信息&quot;</span> + e.getMessage());<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="注解-order-记录">注解 <code>@Order</code> 记录</h4><ul><li><p>如果有多个切面，那么切面通知的执行顺序是怎么样的呢？</p></li><li><p>切面 <code>LogAspect.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <br>    <span class="hljs-meta">@Pointcut(&quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span>&#123;&#125;;<br><br>    <span class="hljs-meta">@Before(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logStart</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-comment">// 1. 拿到方法的全签名</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-comment">// 获取目标方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> signature.getName();<br>        <span class="hljs-comment">// 目标方法传来的参数值</span><br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;日志开始...，方法名：&quot;</span> + name + <span class="hljs-string">&quot;参数列表：&quot;</span>+ Arrays.toString(args));<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logEnd</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志结束...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;pointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logReturn</span><span class="hljs-params">(Object result)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志返回...，目标方法返回结果为：&quot;</span> + result);<br>    &#125;<br><br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;pointcut()&quot;, throwing = &quot;e&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志异常...，异常信息&quot;</span> + e.getMessage());<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>切面 <code>AuthAspect.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span>&#123;&#125;;<br><br>    <span class="hljs-meta">@Before(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Auth Before Method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Auth After Method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Auth After Returning Method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Auth After Throwing Method&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试程序得出结论：如果不指定顺序默认按照切面类的类名字母排序进行从外到内地切面通知，有点类似于Filter 和 Interceptor，流程图如下：</p><figure><img src="/images/SSM_Study/Spring多切面执行顺序.svg" srcset="/img/loading.gif" lazyloadalt="Spring多切面执行顺序" /><figcaption aria-hidden="true">Spring多切面执行顺序</figcaption></figure></li><li><p>该如何指定切面的顺序呢？可以用 <code>@Order</code>注解指定：数字越小，优先级越高</p></li><li><p>切面加 <code>@Order</code> 注解：<code>LogAspect.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <br>    <span class="hljs-meta">@Pointcut(&quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span>&#123;&#125;;<br><br>    <span class="hljs-meta">@Before(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logStart</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-comment">// 1. 拿到方法的全签名</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-comment">// 获取目标方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> signature.getName();<br>        <span class="hljs-comment">// 目标方法传来的参数值</span><br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;日志开始...，方法名：&quot;</span> + name + <span class="hljs-string">&quot;参数列表：&quot;</span>+ Arrays.toString(args));<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logEnd</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志结束...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;pointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logReturn</span><span class="hljs-params">(Object result)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志返回...，目标方法返回结果为：&quot;</span> + result);<br>    &#125;<br><br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;pointcut()&quot;, throwing = &quot;e&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志异常...，异常信息&quot;</span> + e.getMessage());<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>切面加 <code>@Order</code> 注解：<code>AuthAspect.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Order(2)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(public void org.wind.spring.aop.people.People.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span>&#123;&#125;;<br><br>    <span class="hljs-meta">@Before(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Auth Before Method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Auth After Method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Auth After Returning Method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Auth After Throwing Method&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="spring-三级缓存分析记录如何获取-bean-实例">Spring三级缓存分析记录：如何获取 Bean 实例</h4><ul><li><p>先写一个组件接口：<code>People.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.people;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再写一个组件，实现组件接口，并放到容器中：<code>PeopleImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.people.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.wind.spring.aop.annotation.MyAn;<br><span class="hljs-keyword">import</span> org.wind.spring.aop.people.People;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PeopleImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;working...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写个主程序，或者测试程序，加断点进行测试（&gt;&gt;&gt;即是打断点），这里直接主程序：<code>SpringAOPApplication.java</code></p></li><li><p>断点打到获取 Bean 的地方，启动 Debug 模式，Step Into</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">package</span> org.wind.spring.aop;<br><br> <span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br> <span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br> <span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext;<br> <span class="hljs-keyword">import</span> org.wind.spring.aop.people.impl.PeopleImpl;<br><br> <span class="hljs-meta">@SpringBootApplication</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAOPApplication</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>   <span class="hljs-comment">// 创建初始化容器...</span><br>   <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(SpringAOPApplication.class, args);<br>   <br>   <span class="hljs-comment">// 获取 Bean 断点打这里</span><br>   <span class="hljs-comment">// Step Into</span><br>&gt;&gt;&gt;   <span class="hljs-type">PeopleImpl</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ioc.getBean(PeopleImpl.class);<br>   <br>   <span class="hljs-comment">// 打印 Bean</span><br>   System.out.println(bean);<br>  &#125;<br><br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>Step Into后发现打开了一个新的类：<code>AbstractApplicationContext.java</code></p></li><li><p>调用了其中的<code>public &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) throws BeansException;</code>方法</p></li><li><p>方法里又调用了另一个类中的方法</p></li><li><p>再 Step Into</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.context.support;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultResourceLoader</span><br>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableApplicationContext</span> &#123;<br>  <br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>  <span class="hljs-comment">// 方法进入到这里，没有获取到 Bean 对象，Step Over</span><br>  assertBeanFactoryActive();<br>  <span class="hljs-comment">// 下面的方法 Step Over 后就有了 Bean 了，所以一定在下面的方法获取到了 Bean</span><br>  <span class="hljs-comment">// 所以 Step Into 进入 getBean 方法</span><br>  <span class="hljs-keyword">return</span> getBeanFactory().getBean(requiredType);<br> &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>此时又打开了一个新的类：<code>DefaultListableBeanFactory.java</code></p></li><li><p>调用了当前类中的重载方法：<code>public &lt;T&gt; T getBean(Class&lt;T&gt; requiredType, @Nullable Object... args) throws BeansException;</code></p></li><li><p>然后在方法中又调用了另一个方法，方法仍在当前类中：<code>private &lt;T&gt; T resolveBean(ResolvableType requiredType, @Nullable Object[] args, boolean nonUniqueAsNull);</code></p></li><li><p>对这个方法 Step Over 后发现获取到了 Bean，所以应该 Step Into这个方法</p></li><li><p>在这个方法里，又调用了另一个方法，方法仍在当前类中：<code>private &lt;T&gt; NamedBeanHolder&lt;T&gt; resolveNamedBean(ResolvableType requiredType, @Nullable Object[] args, boolean nonUniqueAsNull) throws BeansException;</code></p></li><li><p>对这个方法 Step Over 后发现获取到了 Bean，所以应该 Step Into这个方法，可以在这个方法前打个断点，重新 Debug 运行到下一个断点</p></li><li><p>在方法 <code>resolveNamedBean</code> 中根据类型获取 Bean的名字，再判断条件：再调用 <code>resolveNamedBean</code> 重载方法，当Step Over 后发现获取到了 Bean，此时应该 Step Into 这个方法</p></li><li><p>进去发现调用了 <code>getBean</code> 方法，Step Over 后就获取到了Bean，所以应该再进去：Step Into</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultListableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAutowireCapableBeanFactory</span><br>   <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableListableBeanFactory</span>, BeanDefinitionRegistry, Serializable &#123;<br>    <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>   <span class="hljs-comment">// 方法进入到了这里，Step Over 后就有了 Bean 所以一定在下面的方法获取到了 Bean</span><br>   <span class="hljs-comment">// 再次调用这个类下面的一个 getBean 方法，进去看一看 Step Into</span><br>   <span class="hljs-keyword">return</span> getBean(requiredType, (Object[]) <span class="hljs-literal">null</span>);<br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType, <span class="hljs-meta">@Nullable</span> Object... args)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>   <span class="hljs-comment">// 来到了这里，下一步 Step Over</span><br>   Assert.notNull(requiredType, <span class="hljs-string">&quot;Required type must not be null&quot;</span>);<br>   <br>   <span class="hljs-comment">// 这里调用了 resolveBean 方法，这个方法还在这个类中</span><br>   <span class="hljs-comment">// Step Over 后有了 Bean</span><br>   <span class="hljs-comment">// 所以 Step Into 进去这个方法</span><br>   <span class="hljs-type">Object</span> <span class="hljs-variable">resolved</span> <span class="hljs-operator">=</span> resolveBean(ResolvableType.forRawClass(requiredType), args, <span class="hljs-literal">false</span>);<br>   <br>   <span class="hljs-keyword">if</span> (resolved == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchBeanDefinitionException</span>(requiredType);<br>   &#125;<br>   <span class="hljs-keyword">return</span> (T) resolved;<br>  &#125;<br>  <br>  <span class="hljs-meta">@Nullable</span><br>  <span class="hljs-keyword">private</span> &lt;T&gt; T <span class="hljs-title function_">resolveBean</span><span class="hljs-params">(ResolvableType requiredType, <span class="hljs-meta">@Nullable</span> Object[] args, <span class="hljs-type">boolean</span> nonUniqueAsNull)</span> &#123;<br>   <br>   <span class="hljs-comment">// 下一步调用了 resolveNamedBean 方法，这个方法在这个类中</span><br>   <span class="hljs-comment">// Step Over 后就有了 Bean</span><br>   <span class="hljs-comment">// 所以 Step Into 进去，可以在这里打一个断点，方便调试</span><br>&gt;&gt;&gt;   NamedBeanHolder&lt;T&gt; namedBean = resolveNamedBean(requiredType, args, nonUniqueAsNull);<br><br>   <span class="hljs-keyword">if</span> (namedBean != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> namedBean.getBeanInstance();<br>   &#125;<br>   <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> getParentBeanFactory();<br>   <span class="hljs-keyword">if</span> (parent <span class="hljs-keyword">instanceof</span> DefaultListableBeanFactory dlfb) &#123;<br>    <span class="hljs-keyword">return</span> dlfb.resolveBean(requiredType, args, nonUniqueAsNull);<br>   &#125;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>    ObjectProvider&lt;T&gt; parentProvider = parent.getBeanProvider(requiredType);<br>    <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span>) &#123;<br>     <span class="hljs-keyword">return</span> parentProvider.getObject(args);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-keyword">return</span> (nonUniqueAsNull ? parentProvider.getIfUnique() : parentProvider.getIfAvailable());<br>    &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>  <br>  <span class="hljs-meta">@Nullable</span><br>  <span class="hljs-keyword">private</span> &lt;T&gt; NamedBeanHolder&lt;T&gt; <span class="hljs-title function_">resolveNamedBean</span><span class="hljs-params">(</span><br><span class="hljs-params">    ResolvableType requiredType, <span class="hljs-meta">@Nullable</span> Object[] args, <span class="hljs-type">boolean</span> nonUniqueAsNull)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>   <span class="hljs-comment">// 方法来到了这里，Step Over</span><br>   Assert.notNull(requiredType, <span class="hljs-string">&quot;Required type must not be null&quot;</span>);<br>   <br>   <span class="hljs-comment">// 这里调用了 getBeanNamesForType 方法（仍在当前类中），根据类型找 Bean</span><br>   <span class="hljs-comment">// 这就是为什么 Spring 先根据类型找 Bean</span><br>   <span class="hljs-comment">// Step Over</span><br>   String[] candidateNames = getBeanNamesForType(requiredType);<br><br>   <span class="hljs-comment">// 找到名字了，没有拿到 Bean</span><br>   <span class="hljs-comment">// 名字只有一个，下面 if 条件不成立，继续 Step Over</span><br>   <span class="hljs-keyword">if</span> (candidateNames.length &gt; <span class="hljs-number">1</span>) &#123;<br>    List&lt;String&gt; autowireCandidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(candidateNames.length);<br>    <span class="hljs-keyword">for</span> (String beanName : candidateNames) &#123;<br>     <span class="hljs-keyword">if</span> (!containsBeanDefinition(beanName) || getBeanDefinition(beanName).isAutowireCandidate()) &#123;<br>      autowireCandidates.add(beanName);<br>     &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!autowireCandidates.isEmpty()) &#123;<br>     candidateNames = StringUtils.toStringArray(autowireCandidates);<br>    &#125;<br>   &#125;<br><br>   <span class="hljs-comment">// 这个条件成立了，再 Step Over 执行 return 语句方法结束，就拿到 Bean 了</span><br>   <span class="hljs-comment">// 下面这个方法仍然在当前类中</span><br>   <span class="hljs-comment">// 所以一定是在下面的方法获取到了 Bean</span><br>   <span class="hljs-comment">// 所以 Step Into，可以在这里打一个断点，方便调试</span><br>   <span class="hljs-keyword">if</span> (candidateNames.length == <span class="hljs-number">1</span>) &#123;<br>&gt;&gt;&gt;    <span class="hljs-keyword">return</span> resolveNamedBean(candidateNames[<span class="hljs-number">0</span>], requiredType, args);<br>   &#125;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (candidateNames.length &gt; <span class="hljs-number">1</span>) &#123;<br>    Map&lt;String, Object&gt; candidates = CollectionUtils.newLinkedHashMap(candidateNames.length);<br>    <span class="hljs-keyword">for</span> (String beanName : candidateNames) &#123;<br>     <span class="hljs-keyword">if</span> (containsSingleton(beanName) &amp;&amp; args == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">beanInstance</span> <span class="hljs-operator">=</span> getBean(beanName);<br>      candidates.put(beanName, (beanInstance <span class="hljs-keyword">instanceof</span> NullBean ? <span class="hljs-literal">null</span> : beanInstance));<br>     &#125;<br>     <span class="hljs-keyword">else</span> &#123;<br>      candidates.put(beanName, getType(beanName));<br>     &#125;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">candidateName</span> <span class="hljs-operator">=</span> determinePrimaryCandidate(candidates, requiredType.toClass());<br>    <span class="hljs-keyword">if</span> (candidateName == <span class="hljs-literal">null</span>) &#123;<br>     candidateName = determineHighestPriorityCandidate(candidates, requiredType.toClass());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (candidateName != <span class="hljs-literal">null</span>) &#123;<br>     <span class="hljs-type">Object</span> <span class="hljs-variable">beanInstance</span> <span class="hljs-operator">=</span> candidates.get(candidateName);<br>     <span class="hljs-keyword">if</span> (beanInstance == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>     &#125;<br>     <span class="hljs-keyword">if</span> (beanInstance <span class="hljs-keyword">instanceof</span> Class) &#123;<br>      <span class="hljs-keyword">return</span> resolveNamedBean(candidateName, requiredType, args);<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NamedBeanHolder</span>&lt;&gt;(candidateName, (T) beanInstance);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!nonUniqueAsNull) &#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoUniqueBeanDefinitionException</span>(requiredType, candidates.keySet());<br>    &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>  <br>  <span class="hljs-meta">@Nullable</span><br>  <span class="hljs-keyword">private</span> &lt;T&gt; NamedBeanHolder&lt;T&gt; <span class="hljs-title function_">resolveNamedBean</span><span class="hljs-params">(</span><br><span class="hljs-params">    String beanName, ResolvableType requiredType, <span class="hljs-meta">@Nullable</span> Object[] args)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>   <span class="hljs-comment">// 方法来到了这里</span><br>   <span class="hljs-comment">// 执行 Step Over 后就有 Bean 了，所以一定在这个方法里</span><br>   <span class="hljs-comment">// 所以 Step Into，可以在这里打一个断点，方便调试</span><br>   <span class="hljs-comment">// 执行这个方法后打开了一个新的类</span><br>&gt;&gt;&gt;   <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> getBean(beanName, <span class="hljs-literal">null</span>, args);<br>   <br>   <span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> NullBean) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NamedBeanHolder</span>&lt;&gt;(beanName, adaptBeanInstance(beanName, bean, requiredType.toClass()));<br>  &#125;<br>  <br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>打开了 <code>AbstractBeanFactory</code> 类，调用了<code>public &lt;T&gt; T getBean(String name, @Nullable Class&lt;T&gt; requiredType, @Nullable Object... args) throws BeansException;</code>方法，里面只有一个 <code>doGetBean</code> 方法，再进去 StepInto</p></li><li><p>再 Step Over 到调用新的类中的 <code>getSingleton</code>方法后就获取到了 Bean，所以应该 Step Into</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FactoryBeanRegistrySupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableBeanFactory</span> &#123;<br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name, <span class="hljs-meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="hljs-meta">@Nullable</span> Object... args)</span><br>    <span class="hljs-keyword">throws</span> BeansException &#123;<br>   <br>   <span class="hljs-comment">// 方法来到了这里</span><br>   <span class="hljs-comment">// Step Into 进去看一看</span><br>   <span class="hljs-comment">// 调用的方法仍然在当前类中</span><br>   <span class="hljs-keyword">return</span> doGetBean(name, requiredType, args, <span class="hljs-literal">false</span>);<br>  &#125;<br>  <br>  <span class="hljs-keyword">protected</span> &lt;T&gt; T <span class="hljs-title function_">doGetBean</span><span class="hljs-params">(</span><br><span class="hljs-params">    String name, <span class="hljs-meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="hljs-meta">@Nullable</span> Object[] args, <span class="hljs-type">boolean</span> typeCheckOnly)</span><br>    <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>   <span class="hljs-comment">// 方法来到了这里，transformedBeanName 转换 name 为 BeanName</span><br>   <span class="hljs-comment">// Step Over 到下面 getSingleton 方法</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> transformedBeanName(name);<br>   Object beanInstance;<br><br>   <span class="hljs-comment">// Eagerly check singleton cache for manually registered singletons.</span><br>   <span class="hljs-comment">// 来到了这里，再 Step Over 发现就获取到了 Bean</span><br>   <span class="hljs-comment">// 所以 Step Into 进去，打开一个新的类，可以在这里打一个断点，方便调试</span><br>&gt;&gt;&gt;   <span class="hljs-type">Object</span> <span class="hljs-variable">sharedInstance</span> <span class="hljs-operator">=</span> getSingleton(beanName);<br><br>   <span class="hljs-keyword">if</span> (sharedInstance != <span class="hljs-literal">null</span> &amp;&amp; args == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>     <span class="hljs-keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;<br>      logger.trace(<span class="hljs-string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +<br>        <span class="hljs-string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);<br>     &#125;<br>     <span class="hljs-keyword">else</span> &#123;<br>      logger.trace(<span class="hljs-string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>     &#125;<br>    &#125;<br>    beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="hljs-literal">null</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// Fail if we&#x27;re already creating this bean instance:</span><br>    <span class="hljs-comment">// We&#x27;re assumably within a circular reference.</span><br>    <span class="hljs-keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCurrentlyInCreationException</span>(beanName);<br>    &#125;<br><br>    <span class="hljs-comment">// Check if bean definition exists in this factory.</span><br>    <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">parentBeanFactory</span> <span class="hljs-operator">=</span> getParentBeanFactory();<br>    <span class="hljs-keyword">if</span> (parentBeanFactory != <span class="hljs-literal">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;<br>     <span class="hljs-comment">// Not found -&gt; check parent.</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">nameToLookup</span> <span class="hljs-operator">=</span> originalBeanName(name);<br>     <span class="hljs-keyword">if</span> (parentBeanFactory <span class="hljs-keyword">instanceof</span> AbstractBeanFactory abf) &#123;<br>      <span class="hljs-keyword">return</span> abf.doGetBean(nameToLookup, requiredType, args, typeCheckOnly);<br>     &#125;<br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// Delegation to parent with explicit args.</span><br>      <span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);<br>     &#125;<br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// No args -&gt; delegate to standard getBean method.</span><br>      <span class="hljs-keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);<br>     &#125;<br>     <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);<br>     &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!typeCheckOnly) &#123;<br>     markBeanAsCreated(beanName);<br>    &#125;<br><br>    <span class="hljs-type">StartupStep</span> <span class="hljs-variable">beanCreation</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.beans.instantiate&quot;</span>)<br>      .tag(<span class="hljs-string">&quot;beanName&quot;</span>, name);<br>    <span class="hljs-keyword">try</span> &#123;<br>     <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-literal">null</span>) &#123;<br>      beanCreation.tag(<span class="hljs-string">&quot;beanType&quot;</span>, requiredType::toString);<br>     &#125;<br>     <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">mbd</span> <span class="hljs-operator">=</span> getMergedLocalBeanDefinition(beanName);<br>     checkMergedBeanDefinition(mbd, beanName, args);<br><br>     <span class="hljs-comment">// Guarantee initialization of beans that the current bean depends on.</span><br>     String[] dependsOn = mbd.getDependsOn();<br>     <span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (String dep : dependsOn) &#123;<br>       <span class="hljs-keyword">if</span> (isDependent(beanName, dep)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br>          <span class="hljs-string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>       &#125;<br>       registerDependentBean(dep, beanName);<br>       <span class="hljs-keyword">try</span> &#123;<br>        getBean(dep);<br>       &#125;<br>       <span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br>          <span class="hljs-string">&quot;&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="hljs-string">&quot;&#x27;&quot;</span>, ex);<br>       &#125;<br>       <span class="hljs-keyword">catch</span> (BeanCreationException ex) &#123;<br>        <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-comment">// Wrap exception with current bean metadata but only if specifically</span><br>         <span class="hljs-comment">// requested (indicated by required type), not for depends-on cascades.</span><br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br>           <span class="hljs-string">&quot;Failed to initialize dependency &#x27;&quot;</span> + ex.getBeanName() + <span class="hljs-string">&quot;&#x27; of &quot;</span> +<br>             requiredType.getSimpleName() + <span class="hljs-string">&quot; bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;: &quot;</span> +<br>             ex.getMessage(), ex);<br>        &#125;<br>        <span class="hljs-keyword">throw</span> ex;<br>       &#125;<br>      &#125;<br>     &#125;<br><br>     <span class="hljs-comment">// Create bean instance.</span><br>     <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>      sharedInstance = getSingleton(beanName, () -&gt; &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>       &#125;<br>       <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>        <span class="hljs-comment">// Explicitly remove instance from singleton cache: It might have been put there</span><br>        <span class="hljs-comment">// eagerly by the creation process, to allow for circular reference resolution.</span><br>        <span class="hljs-comment">// Also remove any beans that received a temporary reference to the bean.</span><br>        destroySingleton(beanName);<br>        <span class="hljs-keyword">throw</span> ex;<br>       &#125;<br>      &#125;);<br>      beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);<br>     &#125;<br><br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mbd.isPrototype()) &#123;<br>      <span class="hljs-comment">// It&#x27;s a prototype -&gt; create a new instance.</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">prototypeInstance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>       beforePrototypeCreation(beanName);<br>       prototypeInstance = createBean(beanName, mbd, args);<br>      &#125;<br>      <span class="hljs-keyword">finally</span> &#123;<br>       afterPrototypeCreation(beanName);<br>      &#125;<br>      beanInstance = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);<br>     &#125;<br><br>     <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">scopeName</span> <span class="hljs-operator">=</span> mbd.getScope();<br>      <span class="hljs-keyword">if</span> (!StringUtils.hasLength(scopeName)) &#123;<br>       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No scope name defined for bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>      &#125;<br>      <span class="hljs-type">Scope</span> <span class="hljs-variable">scope</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.scopes.get(scopeName);<br>      <span class="hljs-keyword">if</span> (scope == <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">scopedInstance</span> <span class="hljs-operator">=</span> scope.get(beanName, () -&gt; &#123;<br>        beforePrototypeCreation(beanName);<br>        <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>         afterPrototypeCreation(beanName);<br>        &#125;<br>       &#125;);<br>       beanInstance = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br>       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScopeNotActiveException</span>(beanName, scopeName, ex);<br>      &#125;<br>     &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>     beanCreation.tag(<span class="hljs-string">&quot;exception&quot;</span>, ex.getClass().toString());<br>     beanCreation.tag(<span class="hljs-string">&quot;message&quot;</span>, String.valueOf(ex.getMessage()));<br>     cleanupAfterBeanCreationFailure(beanName);<br>     <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>     beanCreation.end();<br>     <span class="hljs-keyword">if</span> (!isCacheBeanMetadata()) &#123;<br>      clearMergedBeanDefinition(beanName);<br>     &#125;<br>    &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> adaptBeanInstance(name, beanInstance, requiredType);<br>  &#125;<br>  <br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>Step Into后打开了一个新的类：<code>DefaultSingletonBeanRegistry</code></p></li><li><p>调用了其<code>public Object getSingleton(String beanName);</code> 方法</p></li><li><p>方法中又调用了重载方法，Step Into</p></li><li><p>重点来了，这就是 Spring 的三级缓存机制</p></li><li><p>获取一个 Bean 先在 <code>singletonObjects</code>（成品区）中获取，如果没有再到 <code>earlySingletonObjects</code>（半成品区）中获取，如果没有加锁再从 <code>singletonObjects</code>（成品区）和 <code>earlySingletonObjects</code>（半成品区）中找，如果没有再找工厂 <code>singletonFactories</code>获取组件，获取到后放到 <code>earlySingletonObjects</code>中，并返回</p></li><li><p>为什么要有三级缓存机制？主要为了解决循环依赖的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSingletonBeanRegistry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleAliasRegistry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SingletonBeanRegistry</span> &#123;<br> <br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">256</span>);<br> <br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br> <br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-meta">@Nullable</span><br> <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getSingleton</span><span class="hljs-params">(String beanName)</span> &#123;<br>  <span class="hljs-comment">// 来到了这里，Step Into</span><br>  <span class="hljs-comment">// getSingleton 方法仍在当前类中</span><br>  <span class="hljs-keyword">return</span> getSingleton(beanName, <span class="hljs-literal">true</span>);<br> &#125;<br> <br> <span class="hljs-meta">@Nullable</span><br> <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">getSingleton</span><span class="hljs-params">(String beanName, <span class="hljs-type">boolean</span> allowEarlyReference)</span> &#123;<br>  <br>  <span class="hljs-comment">// 重点来了，这里就是 Spring 的三级缓存机制</span><br>  <br>  <span class="hljs-comment">// 先进 this.singletonObjects 里找</span><br>  <span class="hljs-comment">// 如果找不到再进 this.earlySingletonObjects 里找</span><br>  <span class="hljs-comment">// 如果再找不到，就加锁防止并发，再进 this.singletonObjects 和 this.earlySingletonObjects 里找</span><br>  <span class="hljs-comment">// 再没有就去 this.singletonFactories 找工厂，从工厂中制造并拿到一个 Bean 后添加到 this.earlySingletonObjects 里面</span><br>  <br>  <span class="hljs-comment">// 为什么要这样做？为了解决循环依赖的问题</span><br>  <span class="hljs-comment">// 什么是循环依赖问题？</span><br>  <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * 比如：有一个组件 A，在 A 中有一个属性 B 上面有一个 <span class="hljs-doctag">@Autowired</span> 注解，表明要注入的是一个 B 组件</span><br><span class="hljs-comment">   *  而 B 组件中有一个属性 A，属性 A 上面也有一个注解 <span class="hljs-doctag">@Autowired</span>，表明要注入的是一个 A 组件</span><br><span class="hljs-comment">   *  那么 Spring 在创建 A 组件时就需要创建一个 B 组件用于注入，而创建 B 组件时又需要一个 A 组件用于注入，这时候就产生了“循环依赖”问题</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   */</span><br>  <br>  <span class="hljs-comment">// Spring 是如何解决循环依赖问题的呢？</span><br>  <span class="hljs-comment">// 用三级缓存</span><br>  <span class="hljs-comment">// 当创建 A 组件时，需要一个 B 组件，就去 this.singletonObjects 中找</span><br>  <span class="hljs-comment">// 如果没有，就创建 B 组件，此时先把 A 组件先放进 this.earlySingletonObjects 中</span><br>  <span class="hljs-comment">// 在创建 B 组件时候需要一个 A 组件，就去 this.singletonObjects 中找，发现没有，再去 this.earlySingletonObjects 找，找到了，把地址赋上去</span><br>  <span class="hljs-comment">// 此时 B 组件就创建完成了，就把 B 组件放到 this.singletonObjects 中</span><br>  <span class="hljs-comment">// 再把 B 组件注入到 A 的属性中，此时 A 组件也创建完成了</span><br>  <span class="hljs-comment">// 此时把 A 组件也放到 this.singletonObjects 中，就此解决了“循环依赖”问题</span><br>  <br>  <span class="hljs-comment">// Quick check for existing instance without full singleton lock</span><br>  <span class="hljs-type">Object</span> <span class="hljs-variable">singletonObject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br>  <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;<br>   singletonObject = <span class="hljs-built_in">this</span>.earlySingletonObjects.get(beanName);<br>   <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span> &amp;&amp; allowEarlyReference) &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.singletonObjects) &#123;<br>     <span class="hljs-comment">// Consistent creation of early reference within full singleton lock</span><br>     singletonObject = <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br>     <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>      singletonObject = <span class="hljs-built_in">this</span>.earlySingletonObjects.get(beanName);<br>      <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>       ObjectFactory&lt;?&gt; singletonFactory = <span class="hljs-built_in">this</span>.singletonFactories.get(beanName);<br>       <span class="hljs-keyword">if</span> (singletonFactory != <span class="hljs-literal">null</span>) &#123;<br>        singletonObject = singletonFactory.getObject();<br>        <span class="hljs-built_in">this</span>.earlySingletonObjects.put(beanName, singletonObject);<br>        <span class="hljs-built_in">this</span>.singletonFactories.remove(beanName);<br>       &#125;<br>      &#125;<br>     &#125;<br>    &#125;<br>   &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> singletonObject;<br> &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>工厂 Bean 的制造晚于普通 Bean 的制造</p></li><li><p>Spring默认没有开启循环引用，需要在配置文件中开启：<code>application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.main.allow-circular-references</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure></li></ul><h4id="环绕通知记录around-注解">环绕通知记录（<code>@Around 注解</code>）</h4><ul><li><p>参见官方文档：<ahref="https://docs.spring.io/spring-framework/reference/core/aop/ataspectj/advice.html"class="uri">https://docs.spring.io/spring-framework/reference/core/aop/ataspectj/advice.html</a></p></li><li><p>前面的“前置通知、返回通知、异常通知、后置通知”都只是感知，不能修改目标方法的参数、返回值等</p></li><li><p>“环绕通知”可以控制目标方法是否执行，修改目标方法参数、执行结果等</p></li><li><p>被 <code>@Around</code> 注解的方法有下面要求：</p><ul><li><p>The method should declare <code>Object</code> as its return type,and the first parameter of the method must be of type<code>ProceedingJoinPoint</code>.Within the body of the advice method,you must invoke <code>proceed()</code> on the<code>ProceedingJoinPoint</code> in order for the underlying method torun. Invoking <code>proceed()</code> without arguments will result inthe caller’s original arguments being supplied to the underlying methodwhen it is invoked. For advanced use cases, there is an overloadedvariant of the <code>proceed()</code> method which accepts an array ofarguments (<code>Object[]</code>). The values in the array will be usedas the arguments to the underlying method when it is invoked.</p><ul><li>返回值类型为：<code>Object</code></li><li>第一个参数类型为：<code>ProceedingJoinPoint</code></li><li>在方法体内要执行 <code>ProceedingJoinPoint</code> 的<code>proceed()</code>方法，方法可以传参数，参数类型为：<code>Object[]</code></li></ul></li></ul></li><li><p>环绕通知示例，切面代码：<code>AroundAspect.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AroundAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* org.wind.spring.aop.people.People.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    ;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 环绕通知有固定写法，如下：</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Around(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundAdvice</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>        <span class="hljs-comment">// 获取目标方法的参数</span><br>        Object[] args = joinPoint.getArgs();<br><br>        <span class="hljs-comment">// 方法前做事情，即前置通知了</span><br>        System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 前置通知&quot;</span>);<br><br>        <span class="hljs-comment">//Object result = joinPoint.proceed(args); // 类似于反射中的 method.invoke();</span><br><br>        <span class="hljs-comment">// 如果想做异常通知则：捕获异常做</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 类似于反射中的 method.invoke();</span><br>            result = joinPoint.proceed(args);<br>            System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 返回通知&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;e.getMessage() = &quot;</span> + e.getMessage());<br>            System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 异常通知&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 无论正常异常都会有通知，即后置通知</span><br>            System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 后置通知&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 也可以在这里做返回通知</span><br>        <span class="hljs-comment">//System.out.println(&quot;【环绕通知】 -- 返回通知&quot;);</span><br><br>        <span class="hljs-comment">// 可以修改返回结果</span><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>注意</strong>：因为上面的环绕通知代码中用了 try ... catch...所以如果环绕通知外再有切面，那么就感知不到异常的发生，就走正常返回通知，而不是异常通知了，这不是我们想要的结果，所以当环绕通知中发生异常时如果想要做异常通知可以用try ... catch ... 处理，但一定要在 catch语句块中再把异常抛出去，让外面的切面感知到发生了异常，即环绕通知中的异常必须要抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.aop.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AroundAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* org.wind.spring.aop.people.People.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    ;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 环绕通知有固定写法，如下：</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Around(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundAdvice</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>        <span class="hljs-comment">// 获取目标方法的参数</span><br>        Object[] args = joinPoint.getArgs();<br><br>        <span class="hljs-comment">// 方法前做事情，即前置通知了</span><br>        System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 前置通知&quot;</span>);<br><br>        <span class="hljs-comment">//Object result = joinPoint.proceed(args); // 类似于反射中的 method.invoke();</span><br><br>        <span class="hljs-comment">// 如果想做异常通知则：捕获异常做</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 类似于反射中的 method.invoke();</span><br>            result = joinPoint.proceed(args);<br>            System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 返回通知&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;e.getMessage() = &quot;</span> + e.getMessage());<br>            System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 异常通知&quot;</span>);<br>            <br>            <span class="hljs-keyword">throw</span> e; <span class="hljs-comment">// 将异常抛出去，让其它切面感知到</span><br>            <br>            <span class="hljs-comment">// 如果当前方法没有 throws Throwable 声明，还要封装一个 RuntimeException</span><br>            <span class="hljs-comment">// throw new RuntimeException(e.getMessage());</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 无论正常异常都会有通知，即后置通知</span><br>            System.out.println(<span class="hljs-string">&quot;【环绕通知】 -- 后置通知&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 也可以在这里做返回通知</span><br>        <span class="hljs-comment">//System.out.println(&quot;【环绕通知】 -- 返回通知&quot;);</span><br><br>        <span class="hljs-comment">// 可以修改返回结果</span><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="spring-事务记录">6. Spring 事务记录</h2><ul><li>声明式事务：通过注解等方式，告诉框架我要做什么，怎么做，框架就会按意思去做<ul><li>优点：代码量小</li><li>缺点：封装过度，排错不容易</li></ul></li><li>编程式事务：手动写代码实现想要的功能<ul><li>优点：排错容易</li><li>缺点：代码量大</li></ul></li><li>Spring 中用声明式比较多，即注解</li></ul><h4 id="准备工作">准备工作</h4><ul><li><p>创建项目，编辑 <code>pom.xml</code> 文件，添加下面代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个数据库用于学习：<code>spring_tx</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `spring_tx`;<br><br>USE `spring_tx`;<br><br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `account`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `account`  (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>  `balance` <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)  <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;余额&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `account` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">10000.00</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `account` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10000.00</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `account` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;wangwu&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">10000.00</span>);<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `book`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `book`  (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;图书id&#x27;</span>,<br>  `bookName` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;图书名&#x27;</span>,<br>  `price` <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;单价&#x27;</span>,<br>  `stock` <span class="hljs-type">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;库存量&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;剑指Java&#x27;</span>, <span class="hljs-number">100.00</span>, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;剑指大数据&#x27;</span>, <span class="hljs-number">100.00</span>, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;剑指Offer&#x27;</span>, <span class="hljs-number">100.00</span>, <span class="hljs-number">100</span>);<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>在 spring配置文件指定数据源等信息：<code>application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 数据库地址</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/spring_tx</span><br><span class="hljs-comment"># 数据库用户名</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"># 数据库密码</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"># 数据库驱动类名</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure></li><li><p>测试数据源对象等：<code>SpringTxApplicationTests.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTxApplicationTests</span> &#123;<br><br> <span class="hljs-meta">@Autowired</span><br> DataSource dataSource;<br><br> <span class="hljs-meta">@Autowired</span><br> JdbcTemplate jdbcTemplate; <span class="hljs-comment">// 类似于 QueryRunner</span><br><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>  <span class="hljs-comment">// 获取 connection 对象</span><br>  <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>  <span class="hljs-comment">// 打印</span><br>  System.out.println(<span class="hljs-string">&quot;connection = &quot;</span> + connection);<br> &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="查询图书记录">查询图书记录</h4><ul><li><p>创建两个 Bean 用于封装：</p><ul><li><p><code>Account.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> BigDecimal balance;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Book.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String bookName;<br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-keyword">private</span> Integer stock;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>创建两个 Dao 用于做查询：</p><ul><li><p><code>AccountDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>BookDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">// 根据 id 查找图书</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(Integer id)</span> &#123;<br><br>        <span class="hljs-comment">// 1. 定义查询图书 sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from book where id = ?&quot;</span>;<br><br>        <span class="hljs-comment">// 2. 执行查询语句</span><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Book.class), id);<br><br>        <span class="hljs-keyword">return</span> book;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>测试：<code>SpringTxApplicationTests.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.dao.BookDao;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTxApplicationTests</span> &#123;<br>    <br> <span class="hljs-meta">@Autowired</span><br> BookDao bookDao;<br> <br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuery</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">Book</span> <span class="hljs-variable">bookById</span> <span class="hljs-operator">=</span> bookDao.getBookById(<span class="hljs-number">1</span>);<br>  System.out.println(<span class="hljs-string">&quot;bookById = &quot;</span> + bookById);<br> &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="新增图书记录">新增图书记录</h4><ul><li><p>修改 <code>BookDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span> &#123;<br>        <br>        <span class="hljs-comment">// 1. 定义插入 sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into book(bookName, price, stock) values(?, ?, ?)&quot;</span>;<br><br>        <span class="hljs-comment">// 2. 添加数据</span><br>        jdbcTemplate.update(sql, book.getBookName(), book.getPrice(), book.getStock());<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试：<code>SpringTxApplicationTests.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.dao.BookDao;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTxApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    BookDao bookDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        book.setBookName(<span class="hljs-string">&quot;西游记&quot;</span>);<br>        book.setPrice(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">99.9</span>));<br>        book.setStock(<span class="hljs-number">100</span>);<br><br>        bookDao.addBook(book);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="更改图书库存数量记录">更改图书库存数量记录</h4><ul><li><p>修改 <code>BookDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">// 更改图书库存</span><br>    <span class="hljs-comment">// num 为要减少的库存量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBookStock</span><span class="hljs-params">(Integer bookId, Integer num)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update book set stock = stock-? where id = ?&quot;</span>;<br>        jdbcTemplate.update(sql, num, bookId);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试：<code>SpringTxApplicationTests.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.dao.BookDao;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTxApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    BookDao bookDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 买了 2 个 4 号图书</span><br>        bookDao.updateBookStock(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="根据图书-id-删除图书记录">根据图书 id 删除图书记录</h4><ul><li><p>修改 <code>BookDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">// 根据图书 id 删除图书</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(Integer bookId)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from book where id = ?&quot;</span>;<br>        jdbcTemplate.update(sql, bookId);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试：<code>SpringTxApplicationTests.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.dao.BookDao;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Spring03TxApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    BookDao bookDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span> &#123;<br>        bookDao.deleteBook(<span class="hljs-number">4</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="根据-username-扣减账户余额记录">根据 username扣减账户余额记录</h4><ul><li><p>修改 <code>AccountDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">// 根据 username 扣减账户余额</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalanceByUsername</span><span class="hljs-params">(String username, BigDecimal balance)</span> &#123;<br><br>        <span class="hljs-comment">// 1. 定义 sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set balance = balance - ? where username = ?&quot;</span>;<br>        <span class="hljs-comment">// 2. 执行 sql</span><br>        jdbcTemplate.update(sql, balance, username);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试：<code>AccountDaoTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.dao.AccountDao;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDaoTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    AccountDao accountDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span> &#123;<br>        accountDao.updateBalanceByUsername(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;99.9&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="编写用户购买图书完整方法记录">编写用户购买图书完整方法记录</h4><ul><li><p>这个方法涉及逻辑，应该在 Service 层，创建一个<code>UserService</code> 做以上功能：</p><ul><li><p><code>UserService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 结账方法</span><br>    <span class="hljs-comment">// username 哪个用户买</span><br>    <span class="hljs-comment">// bookId 买了哪本书</span><br>    <span class="hljs-comment">// buyNum 买了几本</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(String username, Integer bookId, Integer buyNum)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>UserServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.service.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.dao.AccountDao;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.dao.BookDao;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.service.UserService;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    BookDao bookDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    AccountDao accountDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(String username, Integer bookId, Integer buyNum)</span> &#123;<br>        <span class="hljs-comment">// 0. 先查询图书信息才能做下面的工作</span><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> bookDao.getBookById(bookId);<br><br>        <span class="hljs-comment">// 书的价格</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> book.getPrice();<br>        <span class="hljs-comment">// 总扣减余额</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(buyNum).multiply(price);<br><br>        <span class="hljs-comment">// 1. 扣减用户余额</span><br>        accountDao.updateBalanceByUsername(username, total);<br><br>        <span class="hljs-comment">// 2. 减少被买书本库存</span><br>        bookDao.updateBookStock(bookId, buyNum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>测试：<code>AccountDaoTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.service.UserService;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDaoTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br><br>    <span class="hljs-comment">// 测试结账</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testcheckout</span><span class="hljs-params">()</span> &#123;<br>        userService.checkout(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="注解-enabletransactionmanagement-与-transactional-记录">注解<code>@EnableTransactionManagement</code> 与 <code>@Transactional</code>记录</h4><ul><li>上面的代码虽然运行暂时没有问题，但如果在执行过程中出现了异常，那么数据库中的书库存更改了，钱也扣了，因为没有事务，所以也不回滚，就有大问题了！</li><li>此时可以用 Spring 的事务注解</li><li>在类上标注解 <code>@EnableTransactionManagement</code></li><li>在可能发生异常的类或者方法上用 <code>@Transactional</code> 注解</li></ul><h5 id="注解-transactional-用法细节记录">注解<code>@Transactional</code> 用法细节记录</h5><ul><li><p>value：参数类型为 <code>String</code>，同 transactionManager参数，用于指定一个 TransactionManager Bean 作为事务管理器</p><ul><li><p><code>TransactionManager</code> 有三个子接口，主要看<code>PlatformTransactionManager</code> 接口</p></li><li><p><code>PlatformTransactionManager</code> 接口中有三个方法，分别为commit 和 rollback 和 getTransaction</p></li><li><p>由此便知事务管理器是负责控制事务的提交和回滚的</p></li><li><p>如何知道默认的事务管理器是哪个，在测试中用<code>@Autowired</code>注解注入一个再打印便知道了，打印结果为：<code>org.springframework.jdbc.support.JdbcTransactionManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.transaction.TransactionManager;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    TransactionManager transactionManager;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span> <span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;transactionManager = &quot;</span> + transactionManager);<br>        System.out.println(transactionManager.getClass());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>事务的 commit、rollback、getTransaction 方法是由谁调用的呢？</p><ul><li><code>TransactionManager</code> 控制事务的提交和回滚</li><li>而有一个切面 <code>TransactionInterceptor</code>控制什么时候提交和回滚<ul><li><code>completeTransactionAfterThrowing(txInfo, ex);</code></li><li><code>commitTransactionAfterReturning(txInfo);</code></li></ul></li></ul></li></ul></li><li><p>transactionManager：同 value 参数</p></li><li><p>label：参数类型为 <code>String[]</code>不常用，用于给事务打标签</p></li><li><p><strong>propagation</strong>：参数类型为 <code>Propagation</code>枚举类型，默认为 <code>Propagation.REQUIRED</code></p><ul><li><p>传播行为：一个大的事务中有另一个或一些小的事务，是开启一个新的事务？还是合并到大事务中？等等，此时就要控制传播行为</p></li><li><p>Spring 中有七种事务的传播行为：</p><ul><li><strong>REQUIRED</strong>：Support a current transaction, create anew one if noneexists.（支持当前事务，如果当前没有事务则新建一个事务）有就用，没有就建了再用</li><li>SUPPORTS：Support a current transaction, execute non-transactionallyif noneexists.（支持当前事务，如果当前没有事务就直接无事务地执行）有就用，没有就不用了</li><li>MANDATORY：Support a current transaction, throw an exception if noneexists.（支持当前事务，如果当前没有事务则抛出异常）有就用，没有就报错</li><li><strong>REQUIRES_NEW</strong>：Create a new transaction, and suspendthe current transaction if oneexists.（创建一个新的事务，如果当前有事务，则挂起）有也不用，就要自己新建一个来用</li><li>NOT_SUPPORTED：Execute non-transactionally, suspend the currenttransaction if oneexists.（直接无事务地执行代码，如果当前有事务，则挂起）有也不用，也不新建一个来用</li><li>NEVER：Execute non-transactionally, throw an exception if atransactionexists.（直接无事务地执行代码，如果当前有事务，则抛出异常）没有就不用，但有了就报错</li><li>NESTED：Execute within a nested transaction if a current transactionexists, behave like REQUIREDotherwise.（如果有当前事务，则在当前事务嵌套一个事务执行代码，如果没有就和上面的REQUIRED 行为一样），可以回滚到保存点</li><li>注意区分：REQUIRES_NEW 和 NESTED</li></ul></li><li><p>分析时一定要注意异常机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">A &#123;<br>    B() &#123;    <span class="hljs-comment">// REQUIRED</span><br>        F()  <span class="hljs-comment">// REQUIRES_NEW</span><br>        G()  <span class="hljs-comment">// REQUIRED</span><br>        H()  <span class="hljs-comment">// REQUIRES_NEW</span><br>    &#125;<br>    C() &#123;    <span class="hljs-comment">// REQUIRES_NEW</span><br>        I()  <span class="hljs-comment">// REQUIRES_NEW</span><br>        J()  <span class="hljs-comment">// REQUIRED</span><br>    &#125;<br>    D() &#123;    <span class="hljs-comment">// REQUIRES_NEW</span><br>        K()  <span class="hljs-comment">// REQUIRES_NEW</span><br>        L()  <span class="hljs-comment">// REQUIRES_NEW    // 点位2异常：K F H C(I,J) 不回滚，E 及下面代码不执行</span><br>    &#125;<br>    E() &#123;    <span class="hljs-comment">// REQUIRED</span><br>        M()  <span class="hljs-comment">// REQUIRED</span><br>        <span class="hljs-comment">// 点位3异常：F H C(I,J) D(K,L) 不回滚，N 及下面代码不执行</span><br>        N()  <span class="hljs-comment">// REQUIRES_NEW</span><br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;    <span class="hljs-comment">// 点位1异常：C(I,J) D(K,L) F H N 不回滚</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果大事务与小事务都设置了属性，那么一定是用大的，比如timeout</p></li></ul></li><li><p><strong>isolation</strong>：参数类型为 <code>Isolation</code>枚举类型，默认为 <code>Isolation.DEFAULT</code></p><ul><li><p>隔离级别：多个线程并发读取数据库的时候要用到，因为写的时候数据库会加锁，所以都是跟读取有关</p></li><li><p>MySQL 默认的隔离级别为：可重复读</p></li><li><p>MariaDB 默认的隔离级别为：可重复读</p></li><li><p>Oracle 默认的隔离级别为：读已提交</p></li><li><p>SQL Server 默认的隔离级别为：读已提交</p></li><li><p>SQLite 默认的隔离级别为：串行化</p></li><li><p>PostgreSQL 默认的隔离级别为：读已提交</p><ul><li><p>读未提交（ReadUncommitted）：读到没有提交的数据，有脏读问题，即读数据的时候，一个线程已经把数据改了，但没有提交，而另一个线程又开始读取数据，那么读到的数据仍然是没有更改之前的数据</p><ul><li><p>代码示例：</p></li><li><p>类 <code>Book.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String bookName;<br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-keyword">private</span> Integer stock;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类 <code>BookDao.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Isolation;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">// 根据 id 查询书本价格</span><br>    <span class="hljs-comment">// 指定事务的隔离级别为“读未提交”</span><br>    <span class="hljs-meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">getBookPriceById</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select price from book where id = ?&quot;</span>;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.queryForObject(sql, BigDecimal.class, bookId);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试类 <code>BookDaoTest.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.spring.tx.dao.BookDao;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    BookDao bookDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuery</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bookPrice</span> <span class="hljs-operator">=</span> bookDao.getBookPriceById(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;bookPrice = &quot;</span> + bookPrice);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>连接数据库，并开启事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 开启事务<br><span class="hljs-keyword">begin</span>;<br># 查看数据库<br><span class="hljs-keyword">show</span> databases;<br># 使用数据库<br>use spring_tx;<br># 查看数据表<br><span class="hljs-keyword">show</span> tables;<br># 查看所有书本信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> book;<br># 更改 id 为 <span class="hljs-number">1</span> 的书本价格为 <span class="hljs-number">99.0</span><br><span class="hljs-keyword">update</span> book <span class="hljs-keyword">set</span> price <span class="hljs-operator">=</span> <span class="hljs-number">99.0</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>运行测试方法，显示结果为 99.00</p></li><li><p>数据库事务再回滚，再查看价格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 事务回滚<br><span class="hljs-keyword">rollback</span>;<br># 查看所有书本信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> book;<br></code></pre></td></tr></table></figure></li><li><p>上面就是“读未提交”的脏读，下面再测试不可重复读，修改测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">package</span> org.wind.spring.tx;<br><br>    <span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br>    <span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br>    <span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br>    <span class="hljs-keyword">import</span> org.wind.spring.tx.dao.BookDao;<br><br>    <span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br>    <span class="hljs-meta">@SpringBootTest</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoTest</span> &#123;<br><br>        <span class="hljs-meta">@Autowired</span><br>        BookDao bookDao;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuery</span><span class="hljs-params">()</span> &#123;<br>&gt;&gt;&gt;            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bookPrice</span> <span class="hljs-operator">=</span> bookDao.getBookPriceById(<span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;bookPrice = &quot;</span> + bookPrice);<br>&gt;&gt;&gt;            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bookPrice1</span> <span class="hljs-operator">=</span> bookDao.getBookPriceById(<span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;bookPrice1 = &quot;</span> + bookPrice1);<br>&gt;&gt;&gt;            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bookPrice2</span> <span class="hljs-operator">=</span> bookDao.getBookPriceById(<span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;bookPrice2 = &quot;</span> + bookPrice2);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>开启 Debug 模式：在上面箭头地方打断点</p></li><li><p>运行到断点的时候，开启事务，修改价格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 开启事务<br><span class="hljs-keyword">begin</span>;<br># 修改价格<br><span class="hljs-keyword">update</span> book <span class="hljs-keyword">set</span> price <span class="hljs-operator">=</span> <span class="hljs-number">90.0</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>Step Over 下一步，此时可以看到读取到的 bookPrice 是90.00</p></li><li><p>再修改价格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> book <span class="hljs-keyword">set</span> price <span class="hljs-operator">=</span> <span class="hljs-number">30.0</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>Step Over 两次，此时可以看到读取到的 bookPrice1 是 30.00</p></li><li><p>再修改价格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> book <span class="hljs-keyword">set</span> price <span class="hljs-operator">=</span> <span class="hljs-number">50.0</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>Step Over 两次，此时可以看到读取到的 bookPrice2 是 50.00</p></li><li><p>如果此时进行 rollback 那么就是脏读和不重复读了</p></li></ul></li><li><p>读已提交（Read Committed）：读到已经提交的数据</p><ul><li><p>更改类 <code>BookDao.java</code> 中的注解<code>@Transactional</code> 中的参数 isolation 为<code>Isolation.READ_COMMITTED</code></p></li><li><p>再 Debug 测试程序，并开启事务，修改价格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 开启事务<br><span class="hljs-keyword">begin</span>;<br># 更改价格为 <span class="hljs-number">39</span><br><span class="hljs-keyword">update</span> book <span class="hljs-keyword">set</span> price <span class="hljs-operator">=</span> <span class="hljs-number">39.0</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>一直 Step Over 到前两个价格都输出后，发现价格都没有变，都是100.00</p></li><li><p>提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 提交事务<br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure></li><li><p>再次 Step Over 发现第三次读到的价格变成了 39.00</p></li></ul></li><li><p>可重复读（RepeatableRead）：同一事务期间多次重复读取的数据相同</p><ul><li><p>不可重复读代码示例：</p></li><li><p>修改类 <code>BookDao.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">package</span> org.wind.spring.tx.dao;<br><br>    <span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br>    <span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br>    <span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br>    <span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Isolation;<br>    <span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br>    <span class="hljs-keyword">import</span> org.wind.spring.tx.bean.Book;<br><br>    <span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br>    <span class="hljs-meta">@Component</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>        <span class="hljs-meta">@Autowired</span><br>        JdbcTemplate jdbcTemplate;<br><br>        <span class="hljs-meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><br>        <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">getBookPriceById</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select price from book where id = ?&quot;</span>;<br><br>&gt;&gt;&gt;            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal1</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, BigDecimal.class, bookId);<br>            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal2</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, BigDecimal.class, bookId);<br>            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal3</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, BigDecimal.class, bookId);<br>            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal4</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, BigDecimal.class, bookId);<br>            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal5</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, BigDecimal.class, bookId);<br><br>            <span class="hljs-keyword">return</span> jdbcTemplate.queryForObject(sql, BigDecimal.class, bookId);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>在上面箭头的地方打断点，运行测试程序，来到断点处，开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 开启事务<br><span class="hljs-keyword">begin</span>;<br></code></pre></td></tr></table></figure></li><li><p>Step Over 下一步，bigDecimal1 为 100.00</p></li><li><p>修改价格，并提交事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 修改价格为 <span class="hljs-number">60.00</span><br><span class="hljs-keyword">update</span> book <span class="hljs-keyword">set</span> price <span class="hljs-operator">=</span> <span class="hljs-number">60.0</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br># 提交事务<br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure></li><li><p>再 Step Over下一步，发现价格发生了变化，这就是不可重复读</p></li><li><p>可重复读示例代码：</p></li><li><p>更改类 <code>BookDao.java</code> 中的注解<code>@Transactional</code> 中的参数 isolation 为<code>Isolation.REPEATABLE_READ</code></p></li><li><p>Step Over 下一步，bigDecimal1 为 100.00</p></li><li><p>修改价格，再测试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 修改价格为 <span class="hljs-number">60.00</span><br><span class="hljs-keyword">update</span> book <span class="hljs-keyword">set</span> price <span class="hljs-operator">=</span> <span class="hljs-number">60.0</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>Step Over 下一步，读到的价格仍然是 100.00</p></li><li><p>提交事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure></li><li><p>Step Over 下一步，读到的价格依然是 100.00</p></li><li><p>这就是可重复读</p></li></ul></li><li><p>串行化（Serializable）：最高隔离级别，完全禁止了并发</p></li><li><p>总结表格：o 表示存在的问题，x 表示没有的问题</p><table><thead><tr><th>级别/问题</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>o</td><td>o</td><td>o</td></tr><tr><td>读已提交</td><td>x</td><td>o</td><td>o</td></tr><tr><td>可重复读</td><td>x</td><td>x</td><td>o</td></tr><tr><td>串行化</td><td>x</td><td>x</td><td>x</td></tr></tbody></table></li></ul></li></ul></li><li><p>timeout：参数类型为 <code>int</code>用于控制事务的超时时间，时间单位为秒，默认值为底层事务系统的默认超时时间。</p><ul><li>一但超过指定的时间，事务就会回滚</li><li>注意，超时的时间是指从方法开始到最后一次数据库操作的时间，如果最后一次数据库操作没有超时，那么就不算超时</li><li>所以才叫指定事务的超时时间，而不是方法的超时时间</li></ul></li><li><p>timeoutString：参数类型为 <code>String</code> 功能同 timeout参数，不过参数类型不一样</p></li><li><p>readOnly：参数类型为 <code>boolean</code>用于指定是否全是只读操作的事务，如果是则可以设置为真，可以提升性能</p><ul><li>如果有增删改就不要设置为真</li></ul></li><li><p>rollbackFor：参数类型为<code>Class&lt;? extends Throwable&gt;[]</code>用于指定当发生指定异常的时候才回滚</p><ul><li>比如指定当发生了 <code>IOException</code> 才回滚，那么除了指定的<code>IOException</code> 和运行时异常，其它异常都不会回滚<ul><li><code>@Transactional(rollbackFor = &#123;IOException.class&#125;)</code></li></ul></li><li>异常分为两大类：<ul><li><p>运行时异常（unchecked exception【受检异常】）</p></li><li><p>编译时异常（checked exception【受检异常】）</p></li></ul></li><li>如果不指定，那么默认发生了 RuntimeException 和 Error异常就会回滚，即是运行时异常都回滚</li><li>如果指定了，那么就是默认+指定的异常都会回滚</li></ul></li><li><p>rollbackForClassName：参数类型为 <code>String[]</code> 作用同rollbackFor 参数，不过填写的是异常类的全类名</p></li><li><p>noRollbackFor：参数类型为<code>Class&lt;? extends Throwable&gt;[]</code>用于指定发生指定异常时不回滚</p><ul><li>如果不指定，那么默认发生了编译时异常都不回滚</li><li>如果指定了，那么就是默认+指定的异常都不回滚</li></ul></li><li><p>noRollbackForClassName：参数类型为 <code>String[]</code> 作用同noRollbackFor 参数，不过填写的是异常类的全类名</p></li></ul><h2 id="补充springboot-测试功能记录">补充：SpringBoot 测试功能记录</h2><p>在 SpringBoot 中，可以很方便地进行测试</p><p>在 <code>src\test\java</code>下写测试类：<code>SpringApplicationTests.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Spring01IocApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有一个要求，就是测试类要和主类同一个路径下：</p><p>比如我的主类在 <code>src\main\java</code>下：<code>SpringApplicationMain.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.spring;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringApplicationMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  SpringApplication.run(SpringApplicationMain.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：主类和测试类在同一个路径下：即 org.wind 下</strong></p><p>测试组件也很方便，直接 <code>@Autowired</code> 就行了</p><h2 id="补充spring-工具类记录">补充：Spring 工具类记录</h2><ul><li>Spring有很多工具类可以在反射时用：<code>ClassUtils.java</code>、<code>AnnotationUtils.java</code></li></ul><h2 id="补充懒汉单例模式记录">补充：懒汉单例模式记录</h2><ul><li>懒汉单例模式为什么要有两次判断是否为空：保证不会多次创建实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonLazy</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> SingletonLazy instance;<br>    <span class="hljs-comment">// 私有构造防止通过 new 实例化对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonLazy</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonLazy <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 第一次检查实例对象是否存在，如果不存在才创建</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 多线程并发时，如果上面的条件都成立，就要加锁创建实例</span><br>            <span class="hljs-keyword">synchronized</span> (SingletonLazy.class) &#123;<br>                <span class="hljs-comment">// 加锁后还要判断，如果不判断，那么一个线程创建了实例，锁释放了</span><br>                <span class="hljs-comment">// 而此时另一个线程又创一次实例，就不是懒汉单例模式了</span><br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonLazy</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充ioc-容器启动-12-大步记录">补充：IoC 容器启动 12大步记录</h2><ul><li><p>由之前的通过配置文件创建容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;classpath:spring.xml&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>点开 <code>ClassPathXmlApplicationContext</code>类，找到构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.context.support;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractXmlApplicationContext</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassPathXmlApplicationContext</span><span class="hljs-params">(String configLocation)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">// 调用了另一个构造方法，即下面的构造方法</span><br>        <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;configLocation&#125;, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassPathXmlApplicationContext</span><span class="hljs-params">(</span><br><span class="hljs-params">  String[] configLocations, <span class="hljs-type">boolean</span> refresh, <span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span><br>   <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>  <span class="hljs-built_in">super</span>(parent);<br>  setConfigLocations(configLocations);<br>  <span class="hljs-keyword">if</span> (refresh) &#123;<br>            <span class="hljs-comment">// 注意，在这一步就完成了容器的启动，点进去，打开了一个新的类</span><br>   refresh();<br>  &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类 <code>AbstractApplicationContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.context.support;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultResourceLoader</span><br>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableApplicationContext</span> &#123;<br>    <span class="hljs-comment">// 以下就是 IoC 容器启动的 12 大步，一个官方注解一大步，共 12 大步</span><br>    <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br>  <span class="hljs-built_in">this</span>.startupShutdownLock.lock();<br>  <span class="hljs-keyword">try</span> &#123;<br>   <span class="hljs-built_in">this</span>.startupShutdownThread = Thread.currentThread();<br><br>   <span class="hljs-type">StartupStep</span> <span class="hljs-variable">contextRefresh</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.refresh&quot;</span>);<br><br>   <span class="hljs-comment">// Prepare this context for refreshing.</span><br>   prepareRefresh();<br><br>   <span class="hljs-comment">// Tell the subclass to refresh the internal bean factory.</span><br>   <span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> obtainFreshBeanFactory();<br><br>   <span class="hljs-comment">// Prepare the bean factory for use in this context.</span><br>   prepareBeanFactory(beanFactory);<br><br>   <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// Allows post-processing of the bean factory in context subclasses.</span><br>    postProcessBeanFactory(beanFactory);<br><br>    <span class="hljs-type">StartupStep</span> <span class="hljs-variable">beanPostProcess</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.beans.post-process&quot;</span>);<br>    <span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span><br>    invokeBeanFactoryPostProcessors(beanFactory);<br>    <span class="hljs-comment">// Register bean processors that intercept bean creation.</span><br>    registerBeanPostProcessors(beanFactory);<br>    beanPostProcess.end();<br><br>    <span class="hljs-comment">// Initialize message source for this context.</span><br>    initMessageSource();<br><br>    <span class="hljs-comment">// Initialize event multicaster for this context.</span><br>    initApplicationEventMulticaster();<br><br>    <span class="hljs-comment">// Initialize other special beans in specific context subclasses.</span><br>    onRefresh();<br><br>    <span class="hljs-comment">// Check for listener beans and register them.</span><br>    registerListeners();<br><br>    <span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br>    finishBeanFactoryInitialization(beanFactory);<br><br>    <span class="hljs-comment">// Last step: publish corresponding event.</span><br>    finishRefresh();<br>   &#125;<br><br>   <span class="hljs-keyword">catch</span> (RuntimeException | Error ex ) &#123;<br>    <span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;<br>     logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - &quot;</span> +<br>       <span class="hljs-string">&quot;cancelling refresh attempt: &quot;</span> + ex);<br>    &#125;<br><br>    <span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span><br>    destroyBeans();<br><br>    <span class="hljs-comment">// Reset &#x27;active&#x27; flag.</span><br>    cancelRefresh(ex);<br><br>    <span class="hljs-comment">// Propagate exception to caller.</span><br>    <span class="hljs-keyword">throw</span> ex;<br>   &#125;<br><br>   <span class="hljs-keyword">finally</span> &#123;<br>    contextRefresh.end();<br>   &#125;<br>  &#125;<br>  <span class="hljs-keyword">finally</span> &#123;<br>   <span class="hljs-built_in">this</span>.startupShutdownThread = <span class="hljs-literal">null</span>;<br>   <span class="hljs-built_in">this</span>.startupShutdownLock.unlock();<br>  &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第 1 步： <code>prepareRefresh</code> 刷新前准备</p></li><li><p>第 2 步： <code>obtainFreshBeanFactory</code> 获取一个新的 Bean工厂</p></li><li><p>第 3 步： <code>prepareBeanFactory</code> 准备 Bean工厂，向其中添加一些必要的组件</p></li><li><p>第 4 步： <code>postProcessBeanFactory</code> 允许对 Bean工厂做一些后置处理</p></li><li><p>第 5 步： <code>invokeBeanFactoryPostProcessors</code> 执行 Bean工厂的后置处理器</p></li><li><p>第 6 步：<code>registerBeanPostProcessors</code> 注册 Bean后置处理器</p><ul><li><p>点进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.context.support;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultResourceLoader</span><br>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableApplicationContext</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanPostProcessors</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br>        <span class="hljs-comment">// 再点进去</span><br>        PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再点进 <code>registerBeanPostProcessors</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.context.support;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostProcessorRegistrationDelegate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanPostProcessors</span><span class="hljs-params">(</span><br><span class="hljs-params">   ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext)</span> &#123;<br>        <span class="hljs-comment">// 注意这一步会拿到所有后置处理器的名</span><br>        String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><br>  <span class="hljs-type">int</span> <span class="hljs-variable">beanProcessorTargetCount</span> <span class="hljs-operator">=</span> beanFactory.getBeanPostProcessorCount() + <span class="hljs-number">1</span> + postProcessorNames.length;<br>  beanFactory.addBeanPostProcessor(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPostProcessorChecker</span>(beanFactory, postProcessorNames, beanProcessorTargetCount));<br><br>  List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  List&lt;String&gt; orderedPostProcessorNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  List&lt;String&gt; nonOrderedPostProcessorNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  <span class="hljs-keyword">for</span> (String ppName : postProcessorNames) &#123;<br>   <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;<br>                <span class="hljs-comment">// 如果在容器中拿不到 Bean 则创建，所以 getBean 方法还有创建 Bean 的功能</span><br>    <span class="hljs-type">BeanPostProcessor</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> beanFactory.getBean(ppName, BeanPostProcessor.class);<br>    priorityOrderedPostProcessors.add(pp);<br>    <span class="hljs-keyword">if</span> (pp <span class="hljs-keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;<br>     internalPostProcessors.add(pp);<br>    &#125;<br>   &#125;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;<br>    orderedPostProcessorNames.add(ppName);<br>   &#125;<br>   <span class="hljs-keyword">else</span> &#123;<br>    nonOrderedPostProcessorNames.add(ppName);<br>   &#125;<br>  &#125;<br><br>  sortPostProcessors(priorityOrderedPostProcessors, beanFactory);<br>  registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);<br><br>  List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(orderedPostProcessorNames.size());<br>  <span class="hljs-keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;<br>   <span class="hljs-type">BeanPostProcessor</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> beanFactory.getBean(ppName, BeanPostProcessor.class);<br>   orderedPostProcessors.add(pp);<br>   <span class="hljs-keyword">if</span> (pp <span class="hljs-keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;<br>    internalPostProcessors.add(pp);<br>   &#125;<br>  &#125;<br>  sortPostProcessors(orderedPostProcessors, beanFactory);<br>  registerBeanPostProcessors(beanFactory, orderedPostProcessors);<br><br>  List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(nonOrderedPostProcessorNames.size());<br>  <span class="hljs-keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;<br>   <span class="hljs-type">BeanPostProcessor</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> beanFactory.getBean(ppName, BeanPostProcessor.class);<br>   nonOrderedPostProcessors.add(pp);<br>   <span class="hljs-keyword">if</span> (pp <span class="hljs-keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;<br>    internalPostProcessors.add(pp);<br>   &#125;<br>  &#125;<br>  registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);<br><br>  sortPostProcessors(internalPostProcessors, beanFactory);<br>  registerBeanPostProcessors(beanFactory, internalPostProcessors);<br><br>        beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationListenerDetector</span>(applicationContext));<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>第 7 步： <code>initMessageSource</code> 支持 MessageSource（国际化消息）</p></li><li><p>第 8 步： <code>initApplicationEventMulticaster</code>初始化应用事件多播器</p><ul><li>事件驱动开发 ，从容器中获取类型为<code>ApplicationEventMulticaster</code> 名字为<code>applicationEventMulticaster</code> 的组件，没有就新建</li><li>后面 SpringBoot 会有</li></ul></li><li><p>第 9 步： <code>onRefresh</code>在特定的上下文子类中初始化其他特殊 bean（留给子类的方法）</p></li><li><p>第 10 步： <code>registerListeners</code> 注册监听器</p><ul><li>从容器中获取类型为 <code>ApplicationListener</code> 的组件</li></ul></li><li><p>第 11 步：<strong><code>finishBeanFactoryInitialization</code></strong> 完成 Bean工厂初始化</p><ul><li><p>Instantiate all remaining (non-lazy-init)singletons（实例化所有剩余的 非懒加载 的单例组件）</p></li><li><p>这一步执行后，容器中所有自己写的 Bean 创建好了</p></li><li><p>可以在这一步打一个断点，用 Debug 模式运行后去 beanFactory 看看singletonObjects 中有没有自己写的Bean，除了后置处理器创建好了，其它自己写的 Bean 还没有创建好</p></li><li><p>Step Into进去看看，注意最后一步：<code>beanFactory.preInstantiateSingletons();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.context.support;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultResourceLoader</span><br>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableApplicationContext</span> &#123;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finishBeanFactoryInitialization</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br>  <span class="hljs-comment">// Initialize conversion service for this context.</span><br>  <span class="hljs-keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;<br>    beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;<br>   beanFactory.setConversionService(<br>     beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));<br>  &#125;<br><br>  <span class="hljs-comment">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span><br>  <span class="hljs-comment">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span><br>  <span class="hljs-comment">// at this point, primarily for resolution in annotation attribute values.</span><br>  <span class="hljs-keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;<br>   beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));<br>  &#125;<br><br>  <span class="hljs-comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span><br>  String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;<br>   <span class="hljs-keyword">try</span> &#123;<br>    beanFactory.getBean(weaverAwareName, LoadTimeWeaverAware.class);<br>   &#125;<br>   <span class="hljs-keyword">catch</span> (BeanNotOfRequiredTypeException ex) &#123;<br>    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>     logger.debug(<span class="hljs-string">&quot;Failed to initialize LoadTimeWeaverAware bean &#x27;&quot;</span> + weaverAwareName +<br>       <span class="hljs-string">&quot;&#x27; due to unexpected type mismatch: &quot;</span> + ex.getMessage());<br>    &#125;<br>   &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Stop using the temporary ClassLoader for type matching.</span><br>  beanFactory.setTempClassLoader(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-comment">// Allow for caching all bean definition metadata, not expecting further changes.</span><br>  beanFactory.freezeConfiguration();<br><br>     <span class="hljs-comment">// 实例化所有剩余的 非懒加载 的单例组件</span><br>  <span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br>  beanFactory.preInstantiateSingletons();<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再 Step Into 进去 <code>preInstantiateSingletons</code>方法看看，获取所有的 beanNames 放到集合中，再进行两次 for 循环创建Bean，其中第一个 for 循环是初始化所有非懒加载的 beans，第二个 for循环是触发所有的后置处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br><span class="hljs-meta">@SuppressWarnings(&quot;serial&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultListableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAutowireCapableBeanFactory</span><br>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableListableBeanFactory</span>, BeanDefinitionRegistry, Serializable &#123;<br>    <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preInstantiateSingletons</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>  <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>   logger.trace(<span class="hljs-string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span><br>  <span class="hljs-comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span><br>  List&lt;String&gt; beanNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-built_in">this</span>.beanDefinitionNames);<br><br>  <span class="hljs-comment">// Trigger initialization of all non-lazy singleton beans...</span><br>  <span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;<br>   <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> getMergedLocalBeanDefinition(beanName);<br>            <span class="hljs-comment">// 如果 bean 不是抽象和是单例和非懒加载的就进行初始化</span><br>   <span class="hljs-keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;<br>                <span class="hljs-comment">// 如果是 FactoryBean 就用 FactoryBean 的创建法</span><br>    <span class="hljs-keyword">if</span> (isFactoryBean(beanName)) &#123;<br>     <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> getBean(FACTORY_BEAN_PREFIX + beanName);<br>     <span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> SmartFactoryBean&lt;?&gt; smartFactoryBean &amp;&amp; smartFactoryBean.isEagerInit()) &#123;<br>      getBean(beanName);<br>     &#125;<br>    &#125;<br>                <span class="hljs-comment">// 否则是普通 Bean 就用 getBean 创建 Bean</span><br>                <span class="hljs-comment">// 所以 getBean 有两个功能：</span><br>                <span class="hljs-comment">//     1. 获取 Bean</span><br>                <span class="hljs-comment">//     2. 创建 Bean</span><br>    <span class="hljs-keyword">else</span> &#123;<br>     getBean(beanName);<br>    &#125;<br>   &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Trigger post-initialization callback for all applicable beans...</span><br>  <span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;<br>   <span class="hljs-type">Object</span> <span class="hljs-variable">singletonInstance</span> <span class="hljs-operator">=</span> getSingleton(beanName);<br>   <span class="hljs-keyword">if</span> (singletonInstance <span class="hljs-keyword">instanceof</span> SmartInitializingSingleton smartSingleton) &#123;<br>    <span class="hljs-type">StartupStep</span> <span class="hljs-variable">smartInitialize</span> <span class="hljs-operator">=</span> getApplicationStartup().start(<span class="hljs-string">&quot;spring.beans.smart-initialize&quot;</span>)<br>      .tag(<span class="hljs-string">&quot;beanName&quot;</span>, beanName);<br>    smartSingleton.afterSingletonsInstantiated();<br>    smartInitialize.end();<br>   &#125;<br>  &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果再往下：<code>doGetBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FactoryBeanRegistrySupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableBeanFactory</span> &#123;<br>    <br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>  <span class="hljs-keyword">return</span> doGetBean(name, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br> &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再往下，从三级缓存中没有获取到对象，走 else 分支，调用<code>createBean</code> 方法创建 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FactoryBeanRegistrySupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableBeanFactory</span> &#123;<br><br>        <span class="hljs-keyword">protected</span> &lt;T&gt; T <span class="hljs-title function_">doGetBean</span><span class="hljs-params">(</span><br><span class="hljs-params">                String name, <span class="hljs-meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="hljs-meta">@Nullable</span> Object[] args, <span class="hljs-type">boolean</span> typeCheckOnly)</span><br>                <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>            <span class="hljs-comment">// 省略代码</span><br>            <span class="hljs-comment">// ...</span><br><br>            <span class="hljs-comment">// 从三级缓存中没有获取到对象走到这里</span><br>            <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-comment">// 省略代码</span><br>                <span class="hljs-comment">// ...</span><br><br>                <span class="hljs-keyword">if</span> (!typeCheckOnly) &#123;<br>                    <span class="hljs-comment">// 标记 Bean 是要创建的</span><br>                    markBeanAsCreated(beanName);<br>                &#125;<br><br>                <span class="hljs-type">StartupStep</span> <span class="hljs-variable">beanCreation</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.beans.instantiate&quot;</span>)<br>                        .tag(<span class="hljs-string">&quot;beanName&quot;</span>, name);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-literal">null</span>) &#123;<br>                        beanCreation.tag(<span class="hljs-string">&quot;beanType&quot;</span>, requiredType::toString);<br>                    &#125;<br>                    <span class="hljs-comment">// 拿到 Bean 的定义信息</span><br>                    <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">mbd</span> <span class="hljs-operator">=</span> getMergedLocalBeanDefinition(beanName);<br>                    checkMergedBeanDefinition(mbd, beanName, args);<br><br>                    <span class="hljs-comment">// 如果 Bean 有依赖其它 Bean 先造依赖的 Bean</span><br>                    <span class="hljs-comment">// Guarantee initialization of beans that the current bean depends on.</span><br>                    String[] dependsOn = mbd.getDependsOn();<br>                    <span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">// 省略代码</span><br>                        <span class="hljs-comment">// ...</span><br>                    &#125;<br><br>                    <span class="hljs-comment">// 真正开始创建 Bean 实例对象</span><br>                    <span class="hljs-comment">// Create bean instance.</span><br>                    <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>                        sharedInstance = getSingleton(beanName, () -&gt; &#123;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                <span class="hljs-comment">// 这一步创建 Bean</span><br>&gt;&gt;&gt;                             <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>                            &#125;<br>                            <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>                                <span class="hljs-comment">// 省略代码</span><br>                          <span class="hljs-comment">// ...</span><br>                            &#125;<br>                        &#125;);<br>                        beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);<br>                    &#125;<br><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mbd.isPrototype()) &#123;<br>                        <span class="hljs-comment">// 省略代码</span><br>                        <span class="hljs-comment">// ...</span><br>                    &#125;<br><br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 省略代码</span><br>                        <span class="hljs-comment">// ...</span><br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>                    <span class="hljs-comment">// 省略代码</span><br>                    <span class="hljs-comment">// ...</span><br>                &#125;<br>                <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 省略代码</span><br>                    <span class="hljs-comment">// ...</span><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> adaptBeanInstance(name, beanInstance, requiredType);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>再往下，在 <code>createBean</code> 中再调用<code>resolveBeforeInstantiation</code> 方法调用后置处理器，再调用<code>doCreateBean</code> 方法创建 Bean，并放到<code>earlySingletonObjects</code> 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutowireCapableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractBeanFactory</span><br>            <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AutowireCapableBeanFactory</span> &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span><br>                <span class="hljs-keyword">throws</span> BeanCreationException &#123;<br><br>            <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>                logger.trace(<span class="hljs-string">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">mbdToUse</span> <span class="hljs-operator">=</span> mbd;<br><br>            Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);<br>            <span class="hljs-keyword">if</span> (resolvedClass != <span class="hljs-literal">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="hljs-literal">null</span>) &#123;<br>                mbdToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(mbd);<br>                mbdToUse.setBeanClass(resolvedClass);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    mbdToUse.prepareMethodOverrides();<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionStoreException</span>(mbdToUse.getResourceDescription(),<br>                            beanName, <span class="hljs-string">&quot;Validation of method overrides failed&quot;</span>, ex);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 执行后置处理器方法，即下面的方法</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> resolveBeforeInstantiation(beanName, mbdToUse);<br>                <span class="hljs-comment">// 此时还没有 Bean 对象</span><br>                <span class="hljs-keyword">if</span> (bean != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> bean;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>    <span class="hljs-comment">// 省略代码</span><br>                <span class="hljs-comment">// ...</span><br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 这个才是真正的创建 Bean</span><br>&gt;&gt;&gt;             <span class="hljs-type">Object</span> <span class="hljs-variable">beanInstance</span> <span class="hljs-operator">=</span> doCreateBean(beanName, mbdToUse, args);<br>                <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>                    logger.trace(<span class="hljs-string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> beanInstance;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;<br>                <span class="hljs-comment">// 省略代码</span><br>                <span class="hljs-comment">// ...</span><br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                <span class="hljs-comment">// 省略代码</span><br>                <span class="hljs-comment">// ...</span><br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doCreateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span><br>   <span class="hljs-keyword">throws</span> BeanCreationException &#123;<br><br>            <span class="hljs-comment">// Instantiate the bean.</span><br>            <span class="hljs-type">BeanWrapper</span> <span class="hljs-variable">instanceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>                instanceWrapper = <span class="hljs-built_in">this</span>.factoryBeanInstanceCache.remove(beanName);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (instanceWrapper == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 真正创建 Bean 实例</span><br>&gt;&gt;&gt;             instanceWrapper = createBeanInstance(beanName, mbd, args);<br>            &#125;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> instanceWrapper.getWrappedInstance();<br>            Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();<br>            <span class="hljs-keyword">if</span> (beanType != NullBean.class) &#123;<br>                mbd.resolvedTargetType = beanType;<br>            &#125;<br><br>            <span class="hljs-comment">// Allow post-processors to modify the merged bean definition.</span><br>            <span class="hljs-keyword">synchronized</span> (mbd.postProcessingLock) &#123;<br>                <span class="hljs-keyword">if</span> (!mbd.postProcessed) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,<br>                                <span class="hljs-string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);<br>                    &#125;<br>                    mbd.markAsPostProcessed();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// Eagerly cache singletons to be able to resolve circular references</span><br>            <span class="hljs-comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">earlySingletonExposure</span> <span class="hljs-operator">=</span> (mbd.isSingleton() &amp;&amp; <span class="hljs-built_in">this</span>.allowCircularReferences &amp;&amp;<br>                    isSingletonCurrentlyInCreation(beanName));<br>            <span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br>                <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>                    logger.trace(<span class="hljs-string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +<br>                            <span class="hljs-string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 添加到 earlySingletonObjects 中</span><br>                addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));<br>            &#125;<br><br>            <span class="hljs-comment">// Initialize the bean instance.</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">exposedObject</span> <span class="hljs-operator">=</span> bean;<br>            <span class="hljs-keyword">try</span> &#123;<br>                populateBean(beanName, mbd, instanceWrapper);<br>                exposedObject = initializeBean(beanName, exposedObject, mbd);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> BeanCreationException bce &amp;&amp; beanName.equals(bce.getBeanName())) &#123;<br>                    <span class="hljs-keyword">throw</span> bce;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, ex.getMessage(), ex);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">earlySingletonReference</span> <span class="hljs-operator">=</span> getSingleton(beanName, <span class="hljs-literal">false</span>);<br>                <span class="hljs-keyword">if</span> (earlySingletonReference != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (exposedObject == bean) &#123;<br>                        exposedObject = earlySingletonReference;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;<br>                        String[] dependentBeans = getDependentBeans(beanName);<br>                        Set&lt;String&gt; actualDependentBeans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(dependentBeans.length);<br>                        <span class="hljs-keyword">for</span> (String dependentBean : dependentBeans) &#123;<br>                            <span class="hljs-keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;<br>                                actualDependentBeans.add(dependentBean);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCurrentlyInCreationException</span>(beanName,<br>                                    <span class="hljs-string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; has been injected into other beans [&quot;</span> +<br>                                    StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +<br>                                    <span class="hljs-string">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +<br>                                    <span class="hljs-string">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +<br>                                    <span class="hljs-string">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +<br>                                    <span class="hljs-string">&quot;&#x27;getBeanNamesForType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// Register bean as disposable.</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                registerDisposableBeanIfNecessary(beanName, bean, mbd);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(<br>                        mbd.getResourceDescription(), beanName, <span class="hljs-string">&quot;Invalid destruction signature&quot;</span>, ex);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> exposedObject;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>再往下，把创建好的实例添加到 singletonObjects 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSingletonBeanRegistry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleAliasRegistry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SingletonBeanRegistry</span> &#123;<br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getSingleton</span><span class="hljs-params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> &#123;<br>            Assert.notNull(beanName, <span class="hljs-string">&quot;Bean name must not be null&quot;</span>);<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.singletonObjects) &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">singletonObject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br>                <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.singletonsCurrentlyInDestruction) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationNotAllowedException</span>(beanName,<br>                                <span class="hljs-string">&quot;Singleton bean creation not allowed while singletons of this factory are in destruction &quot;</span> +<br>                                <span class="hljs-string">&quot;(Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                        logger.debug(<span class="hljs-string">&quot;Creating shared instance of singleton bean &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                    &#125;<br>                    beforeSingletonCreation(beanName);<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">newSingleton</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">recordSuppressedExceptions</span> <span class="hljs-operator">=</span> (<span class="hljs-built_in">this</span>.suppressedExceptions == <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (recordSuppressedExceptions) &#123;<br>                        <span class="hljs-built_in">this</span>.suppressedExceptions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>                    &#125;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        singletonObject = singletonFactory.getObject();<br>                        newSingleton = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br>                        <span class="hljs-comment">// Has the singleton object implicitly appeared in the meantime -&gt;</span><br>                        <span class="hljs-comment">// if yes, proceed with it since the exception indicates that state.</span><br>                        singletonObject = <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br>                        <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">throw</span> ex;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (BeanCreationException ex) &#123;<br>                        <span class="hljs-keyword">if</span> (recordSuppressedExceptions) &#123;<br>                            <span class="hljs-keyword">for</span> (Exception suppressedException : <span class="hljs-built_in">this</span>.suppressedExceptions) &#123;<br>                                ex.addRelatedCause(suppressedException);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">throw</span> ex;<br>                    &#125;<br>                    <span class="hljs-keyword">finally</span> &#123;<br>                        <span class="hljs-keyword">if</span> (recordSuppressedExceptions) &#123;<br>                            <span class="hljs-built_in">this</span>.suppressedExceptions = <span class="hljs-literal">null</span>;<br>                        &#125;<br>                        afterSingletonCreation(beanName);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (newSingleton) &#123;<br>                        <span class="hljs-comment">// 把实例添加到 singletonObjects 中</span><br>&gt;&gt;&gt;                     addSingleton(beanName, singletonObject);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">return</span> singletonObject;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSingleton</span><span class="hljs-params">(String beanName, Object singletonObject)</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.singletonObjects) &#123;<br>                <span class="hljs-comment">// 添加 Bean 实例到 singletonObjects 中</span><br>                <span class="hljs-built_in">this</span>.singletonObjects.put(beanName, singletonObject);<br>                <span class="hljs-comment">// 从 singletonFactories 中移除</span><br>                <span class="hljs-built_in">this</span>.singletonFactories.remove(beanName);<br>                <span class="hljs-comment">// 从 earlySingletonObjects 中移除</span><br>                <span class="hljs-built_in">this</span>.earlySingletonObjects.remove(beanName);<br>                <span class="hljs-built_in">this</span>.registeredSingletons.add(beanName);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>第 12 步： <code>finishRefresh</code> 完成容器刷新</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC 记录（基于 SpringBoot）</title>
    <link href="/2025/02/23/SpringMVC_Record/"/>
    <url>/2025/02/23/SpringMVC_Record/</url>
    
    <content type="html"><![CDATA[<h1 id="springmvc-记录基于-springboot">SpringMVC 记录（基于SpringBoot）</h1><h2 id="springmvc-版的-helloworld-程序记录">1. SpringMVC 版的 HelloWorld程序记录</h2><h3 id="helloworld-程序">HelloWorld 程序</h3><ul><li><p>在 <code>pom.xml</code> 中引入 web-starter ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个类：<code>HelloController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello SpringMVC ! 你好，SpringMVC！&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动程序，打开浏览器输入 <code>localhost:8080/hello</code>网址并打开，成功显示信息</p></li><li><p>注意：如果 8080 端口被占用应用会启动不起来，此时可以在<code>application.properties</code> 配置文件中指定端口：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8000</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="注解-requestmapping-记录">注解 <code>@RequestMapping</code>记录</h3><ul><li><p>这个注解可以放在类和方法上，用于匹配请求路径</p><ul><li>比如有一个 <code>GET</code> 请求过来，请求路径是 <code>/hello</code>那么就会去找参数 <code>value</code> 或 <code>path</code> 的值为<code>/hello</code> 和 参数 <code>method</code> 值为 <code>GET</code>的被 <code>@RequestMapping</code> 标注的方法或者类</li><li>就像上面的 HelloWorld 例子一样，当一个路径为 <code>/hello</code>的请求过来，就会执行 <code>HelloContorller</code> 类中的<code>hello()</code> 方法</li></ul></li><li><p>参数 <code>value</code>：类型为 <code>String[]</code></p><ul><li>同参数 <code>path</code>，填写匹配的路径，路径有要求，可以看<ahref="https://docs.spring.io/spring-framework/reference/web/webflux/controller/ann-requestmapping.html">官方文档</a>，如果通配符和精确路径都能匹配，那么优先走精确路径<ul><li>?：匹配一个字符</li><li>*：匹配 0 到多个字符，只能匹配一个路径片段</li><li>**：匹配 0 到多个路径片段，用在路径结尾</li></ul></li></ul></li><li><p>参数 <code>path</code>：同参数 <code>value</code></p></li><li><p>参数 <code>method</code>：类型为 <code>RequestMethod[]</code></p><ul><li><p>如果指定了，那么这个方法只处理 <code>method</code>限定的请求方式</p></li><li><p>比如限定为 POST 那么发 GET请求过来，即使路径匹配了也不会执行被标注的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingLimitController</span> &#123;<br><br>    <span class="hljs-comment">// 如果在浏览器上访问 /methodLimit 路径不会执行下面的方法，因为请求方法不一致</span><br>    <span class="hljs-comment">// 可以用 Postman 测试 POST 请求下的 /methodLimit 路径</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/methodLimit&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">methodLimit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;method limit&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>参数 <code>params</code>：类型为 <code>String[]</code></p><ul><li><p>限定请求必需要有 <code>params</code>指定的参数，如果没有那么被标注的方法就不处理这个请求</p></li><li><p>有四种写法：</p><ul><li><p>param</p></li><li><p>param=value</p></li><li><p>!param</p></li><li><p>param!=value（这个情况如果没有 param 参数也会执行方法，因为此时value 为空）</p></li></ul></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingLimitController</span> &#123;<br><br>    <span class="hljs-comment">// 如果请求的是 /paramLimit 路径，那么只有带有 name 参数和 age 参数且 age 参数值为 18 时才会执行下面的方法</span><br>    <span class="hljs-comment">// 例如： /paramLimit?name=zhangsan&amp;age=18</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/paramLimit&quot;, params = &#123;&quot;name&quot;, &quot;age=18&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paramLimit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;param limit&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>参数 <code>headers</code>：类型为 <code>String[]</code></p><ul><li><p>限定请求必需要有 <code>headers</code>指定的请求头，如果没有那么被标注的方法就不处理这个请求</p></li><li><p>有四种写法：</p><ul><li><p>header</p></li><li><p>header=value</p></li><li><p>!header</p></li><li><p>header!=value（这个情况如果没有 header 参数也会执行方法，因为此时value 为空）</p></li></ul></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingLimitController</span> &#123;<br><br>    <span class="hljs-comment">// 只有访问的是 /headerLimit 路径，且路径中有请求头 wind 值为 zwindy 才会访问</span><br>    <span class="hljs-comment">// 可以用 Postman 进行测试</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/headerLimit&quot;, headers = &#123;&quot;wind=zwindy&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">headerLimit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;header limit&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>参数 <code>consumes</code>：类型为 <code>String[]</code></p><ul><li><p>限定请求的内容类型为 <code>consumes</code>指定的类型，如果不符合那么被标注的方法就不处理这个请求</p></li><li><p>即指定浏览器携带给服务器的数据类型</p></li><li><p>类型可以到 <code>org.springframework.http.MediaType</code>类中查看</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingLimitController</span> &#123;<br><br>    <span class="hljs-comment">// 限定浏览器要给服务器携带的是 json 数据格式，如果不是就不执行下面的方法</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/consumeLimit&quot;, consumes = &quot;application/json&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">consumeLimit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;consume limit&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>参数 <code>produces</code>：类型为 <code>String[]</code></p><ul><li><p>限定响应的内容类型为 <code>produces</code>指定的类型，如果不符合那么被标注的方法就不处理这个请求</p></li><li><p>即指定服务器响应给浏览器的数据类型</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingLimitController</span> &#123;<br><br>    <span class="hljs-comment">// 此时访问 /produceLimit 路径时返回的就是一个 html 类型的数据，浏览器会渲染</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/produceLimit&quot;, produces = &quot;text/html;charset=utf-8&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">produceLimit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;h1&gt;produce limit&lt;/h1&gt;&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4id="注解-getmapping-postmapping-putmapping-deletemapping-patchmapping-记录">注解<code>@GetMapping</code>, <code>@PostMapping</code>,<code>@PutMapping</code>, <code>@DeleteMapping</code>,<code>@PatchMapping</code> 记录</h4><ul><li>这一些注解等同于<code>@RequestMapping(method = RequestMethod.请求方式)</code><ul><li>比如 <code>@GetMapping</code> =<code>@RequestMapping(method = RequestMethod.GET)</code></li></ul></li><li>在后面的 <code>RESTful</code> 风格代码时用的多</li></ul><h3 id="注解-responsebody-记录">注解 <code>@ResponseBody</code>记录</h3><ul><li>这个注解可以放在类和方法上，用于指定这个类或者方法返回的是响应体数据，而不是模板路径（即前后端不分离的模板页面路径）<ul><li>这个注解标在类上就表示类中的所有方法返回的都是响应体</li><li>标在方法上就表示这个方法返回的是响应体</li><li>比如上面的 HelloWorld 例子中的 <code>hello()</code>方法返回的就是一个字符串，而不是模板文件的路径（xxx.html,xxx.jsp,xxx.thymeleaf）</li></ul></li></ul><h3 id="注解-restcontroller-记录">注解 <code>RestController</code>记录</h3><ul><li><p>如果一个类是 Controller类，而这个类中的所有方法返回的都是响应体，那么代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">xxxController</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">xxxController</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="http-请求与响应记录">2. HTTP 请求与响应记录</h2><ul><li><code>HTTP</code> 请求会带各种数据<ul><li>请求首行：请求方式、请求路径、请求协议</li><li>请求头：<code>key:value</code></li><li>空白行</li><li>请求体：此次请求携带的其它数据</li></ul></li><li><code>HTTP</code> 请求如果不指定端口则默认访问的是 <code>80</code>端口</li><li><code>HTTPS</code> 请求如果不指定端口则默认访问的是 <code>443</code>端口</li><li>比如一个 <code>GET</code>请求：<code>http://www.example.com:80/a/b/index.html?key1=value1&amp;key2=value2#first</code><ul><li><code>http://</code> 即为请求协议（Protocol）</li><li><code>www.example.com</code> 即为主机（域名）（Domain Name）</li><li><code>:80</code> 即为请求的端口（Port）</li><li><code>/a/b/index.html</code> 即为请求的路径（Path）</li><li><code>?key1=value1&amp;key2=value2</code>即为请求参数（Parameters）</li><li><code>#first</code> 为片段（Anchor），即锚点，不会发给服务器</li></ul></li><li><code>GET</code> 请求数据一般在请求首行中，而 <code>POST</code>请求在负载（Payload）中</li><li><code>HTTP</code> 响应<ul><li>响应首行：响应协议、响应状态码</li><li>响应头：<code>key:value</code></li><li>空白行</li><li>响应体</li></ul></li></ul><h2 id="请求处理记录">3. 请求处理记录</h2><ul><li><p>可以先看看<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods.html">官方文档</a></p></li><li><p>在开始之前，先导入一个 <code>index.html</code> 文件，把它放到<code>src/main/resources/static</code> 下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    本网页使用layui框架编写； layui官网：https://layui.dev/  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/layui/2.9.15/css/layui.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/layui/2.9.15/layui.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.layui-col-xs6</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs6&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>SpringMVC - 请求测试<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-collapse&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验1：使用普通变量，收集请求参数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span> &gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;justify-content: center&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/handle01&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 250px;padding: 10px&quot;</span> &gt;</span><br><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span></span><br><span class="hljs-tag">                                               <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">lay-affix</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs12&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-cellphone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cellphone&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;agreement&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;同意&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#terms&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; top: 6px; left: -15px;&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>用户协议<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-fluid&quot;</span> <span class="hljs-attr">lay-submit</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验2：使用@RequestParam，逐一封装多个参数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;justify-content: center&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/handle02&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 250px;padding: 10px&quot;</span> &gt;</span><br><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span></span><br><span class="hljs-tag">                                               <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">lay-affix</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs12&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-cellphone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cellphone&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;agreement&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;同意&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#terms&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; top: 6px; left: -15px;&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>用户协议<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-fluid&quot;</span> <span class="hljs-attr">lay-submit</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验3：使用POJO，统一封装多个参数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;justify-content: center&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/handle03&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 250px;border: 5px solid black;padding: 10px&quot;</span> &gt;</span><br><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span></span><br><span class="hljs-tag">                                               <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">lay-affix</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs12&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-cellphone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cellphone&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;agreement&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;同意&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#terms&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; top: 6px; left: -15px;&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>用户协议<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-fluid&quot;</span> <span class="hljs-attr">lay-submit</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验4：使用@RequestHeader获取请求头数据<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/handle04&quot;</span>&gt;</span>随便发个请求<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验5：使用@CookieValue获取Cookie数据<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/handle05&quot;</span>&gt;</span>随便又发个请求<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验6：使用POJO，级联封装复杂对象<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;justify-content: center&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form layui-form-pane&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/handle06&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 400px;padding: 10px&quot;</span> &gt;</span><br><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span></span><br><span class="hljs-tag">                                               <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">lay-affix</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs12&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-cellphone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cellphone&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs4&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-website&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address.province&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;省&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs4&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-find-fill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address.city&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;市&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs4&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-tree&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address.area&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;区&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>爱好<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;足球&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;足球&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;篮球&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;篮球&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乒乓球&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;乒乓球&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>年级<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;grade&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;一年级&quot;</span>&gt;</span>一年级<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;二年级&quot;</span>&gt;</span>二年级<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;三年级&quot;</span>&gt;</span>三年级<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;四年级&quot;</span>&gt;</span>四年级<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;agreement&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;同意&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#terms&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; top: 6px; left: -15px;&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>用户协议<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-fluid&quot;</span> <span class="hljs-attr">lay-submit</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验7：使用@RequestBody，封装JSON对象<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-bg-blue&quot;</span>&gt;</span>去Postman测试，自己带上【实验6】中数据的json<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验8：使用@RequestPart/@RequestParam，封装文件，测试文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;justify-content: center&quot;</span>&gt;</span><br><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form layui-form-pane&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/handle08&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 350px;padding: 10px&quot;</span> &gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-elem-field&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: lemonchiffon&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>文件上传要求<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-field-box&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1. 表单：method=post<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2. enctype=&quot;multipart/form-data&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3. 注意：SpringMVC对上传文件有大小限制（默认单文件最大：1MB；整个请求最大：10MB）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span></span><br><span class="hljs-tag">                                               <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">lay-affix</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs12&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-wrap&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-prefix&quot;</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-cellphone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cellphone&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>头像<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;headerImg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>生活照<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lifeImg&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;agreement&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;同意&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#terms&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; top: 6px; left: -15px;&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>用户协议<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-fluid&quot;</span> <span class="hljs-attr">lay-submit</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验9：使用HttpEntity，封装请求原始数据<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-bg-blue&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/handle09?user=admin&amp;age=18&quot;</span>&gt;</span>随便㕛发个请求<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验10：使用原生Servlet API，获取原生请求对象<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-bg-blue&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/handle09?user=admin&amp;age=18&quot;</span>&gt;</span>随便叒发个请求<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-xs6&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>SpringMVC - 响应测试<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-collapse&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验1：返回json数据<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/resp01&quot;</span>&gt;</span>给个JSON<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验2：文件下载测试<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/download&quot;</span>&gt;</span>给个美女<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-title&quot;</span>&gt;</span>实验3：使用Thymeleaf模版引擎，实现服务端渲染<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-colla-content&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-elem-field&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: lemonchiffon&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>服务端渲染<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-field-box&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>现在服务端渲染的方式用的很少了；项目基本都是前后分离。<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这样各端专注于自己的开发，快速协同分工<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-elem-field&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: lightcyan&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>前后分离<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-field-box&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>1. 前端开发人员编写独立的前端项目<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>2. 前端项目自己控制页面跳转逻辑<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>3. 后端仅需返回前端需要的JSON数据<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>4. 后端无需关心页面效果等问题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>优点：分工明确，快速协同，专注用户体验<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>缺点：成本高，技术复杂，门槛高<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-elem-field&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: lightcyan&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>前后不分离(服务端渲染)<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-field-box&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>1. 后端开发人员要控制页面跳转逻辑（利用转发、重定向）<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>2. 服务器要拿到业务数据，全部填充到页面，然后整体把页面返回给客户端<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>3. 模版引擎作用：将数据填充到页面模板<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>4. JSP其实就是一种模板引擎<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>优点：弱前端、低成本、速度快<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>缺点：不专业、体验差、效率低、易扯皮<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个 <code>Controller</code>用于处理请求：<code>RequestTestController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="获取请求参数记录">获取请求参数记录</h3><ul><li><p>处理 <code>GET</code>请求：<code>/handle01?username=zhangsan&amp;password=123456&amp;cellphone=12345678910&amp;agreement=on</code></p></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/handle01&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle01</span><span class="hljs-params">(String username,</span><br><span class="hljs-params">                           String password,</span><br><span class="hljs-params">                           String cellphone,</span><br><span class="hljs-params">                           <span class="hljs-type">boolean</span> agreement)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);<br>        System.out.println(<span class="hljs-string">&quot;password = &quot;</span> + password);<br>        System.out.println(<span class="hljs-string">&quot;cellphone = &quot;</span> + cellphone);<br>        System.out.println(<span class="hljs-string">&quot;agreement = &quot;</span> + agreement);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再次请求，发现控制台获取到了数据，如果请求没有携带数据打印为空</p></li></ul><h3 id="获取指定请求参数记录">获取指定请求参数记录</h3><ul><li><p>处理 <code>GET</code>请求：<code>/handle02?username=zhangsan&amp;password=123456&amp;cellphone=12345678910&amp;agreement=on</code></p></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/handle02&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle02</span><span class="hljs-params">(String uname,</span><br><span class="hljs-params">                           String passwd,</span><br><span class="hljs-params">                           String phone,</span><br><span class="hljs-params">                           <span class="hljs-type">boolean</span> agreemt)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;uname = &quot;</span> + uname);<br>        System.out.println(<span class="hljs-string">&quot;passwd = &quot;</span> + passwd);<br>        System.out.println(<span class="hljs-string">&quot;phone = &quot;</span> + phone);<br>        System.out.println(<span class="hljs-string">&quot;agreemt = &quot;</span> + agreemt);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问请求，发现没有，此时要用注解 <code>@RequestParam</code>指定要绑定的请求参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/handle02&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle02</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String uname,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String passwd,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(&quot;cellphone&quot;)</span> String phone,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(&quot;agreement&quot;)</span> <span class="hljs-type">boolean</span> agreemt)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;uname = &quot;</span> + uname);<br>        System.out.println(<span class="hljs-string">&quot;passwd = &quot;</span> + passwd);<br>        System.out.println(<span class="hljs-string">&quot;phone = &quot;</span> + phone);<br>        System.out.println(<span class="hljs-string">&quot;agreemt = &quot;</span> + agreemt);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再次访问请求，发现数据正常打印了</p></li><li><p>如果用了 <code>@RequestParam</code>而请求参数没有指定的参数，就会报错，此时要在注解中指定参数为非必须<code>required = false</code></p></li></ul><h4 id="注解-requestparam-记录">注解 <code>@RequestParam</code>记录</h4><ul><li><p>从请求中（不论任何请求）获取指定的参数赋值给被标注的变量</p><ul><li><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 表示从请求参数中获取参数 abc 的值赋值给变量 myvalue</span><br><span class="hljs-meta">@RequestParam(&quot;abc&quot;)</span><br>String myvalue<br></code></pre></td></tr></table></figure></li></ul></li><li><p>注解参数 <code>value</code>：类型为 <code>String</code></p><ul><li>同参数 <code>name</code> 用于指定要获取的参数的名</li></ul></li><li><p>注解参数 <code>name</code>：类型为 <code>String</code></p><ul><li>作用同 <code>value</code></li></ul></li><li><p>注解参数 <code>required</code>：类型为 <code>boolean</code></p><ul><li>用于指定这个参数是否必须，默认值为 <code>true</code></li><li>如果这个注解参数设置为 <code>true</code>，又没有设置<code>defaultValue</code>注解参数，那么从请求的参数中获取不到对应的参数时会报错</li></ul></li><li><p>注解参数 <code>defaultValue</code>：类型为<code>String</code></p><ul><li>如果从请求的参数中没有获取到值，就用这个注解参数为变量指定默认值</li><li>用了这个参数，就可以不用 <code>required</code> 参数了</li></ul></li></ul><h3 id="获取并封装请求参数为对象记录">获取并封装请求参数为对象记录</h3><ul><li><p>处理 <code>POST</code>请求：<code>/handle03</code>，负载（请求体）数据：<code>username=zhangsan&amp;password=123456&amp;cellphone=12345678910&amp;agreement=on</code></p></li><li><p>此时仍然可以用 <code>@RequestParam</code>获取请求参数，但为了方便就把多个属性封装成一个 POJO 类</p></li><li><p>编写一个 POJO 类 <code>Person.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String cellphone;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> agreement;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写<code>Mapping</code>，如果类中的属性名与请求的参数名一致，直接写一个<code>Person</code> 参数就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.Person;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/handle03&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle03</span><span class="hljs-params">(Person person)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="获取请求头信息记录">获取请求头信息记录</h3><ul><li><p>获取 <code>GET</code> 请求 <code>/handle04</code>的请求头信息，比如 <code>Host</code></p></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.Person;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/handle04&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle04</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;Host&quot;)</span> String host)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;host = &quot;</span> + host);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="注解-requestheader-记录">注解 <code>@RequestHeader</code>记录</h4><ul><li>用于获取请求中的请求头信息</li><li>注解参数 <code>value</code>：类型为 <code>String</code><ul><li>同注解参数 <code>name</code></li><li>指定要获取的请求头中的哪个信息，比如<code>Host</code>、<code>User-Agent</code>等等</li></ul></li><li>注解参数 <code>name</code>：类型为<code>String</code>，作用同注解参数 <code>value</code></li><li>注解参数 <code>required</code>：类型为 <code>boolean</code><ul><li>用于指定要获取的请求头信息是否是必要的，默认值为<code>true</code></li><li>如果为 <code>true</code> 且没有指定注解参数<code>defaultValue</code>而请求中又没有相应的请求头信息，那么就会报错</li></ul></li><li>注解参数 <code>defaultValue</code>：类型为 <code>String</code><ul><li>当从请求中没有获取到想要的请求头信息，此时如果指定了<code>defaultValue</code> 就用其指定的值</li><li>如果没有指定 <code>defaultValue</code> 而注解参数<code>required</code> 又为 <code>true</code> 那就会报错</li></ul></li></ul><h3 id="获取请求中的-cookie-信息记录">获取请求中的 <code>Cookie</code>信息记录</h3><ul><li><p>获取 <code>GET</code> 请求 <code>/handle05</code> 中的<code>Cookie</code></p></li><li><p>先给网站造一个 <code>Cookie</code>：ckname=zhangsan</p></li><li><p>再编写 <code>Mapping</code> 获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.Person;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/handle05&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle05</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(&quot;ckname&quot;)</span> String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ckname = &quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="注解-cookievalue-记录">注解 <code>@CookieValue</code> 记录</h4><ul><li>用于获取请求中的 <code>Cookie</code> 信息</li><li>注解参数 <code>value</code>：类型为 <code>String</code><ul><li>同注解参数 <code>name</code></li><li>指定要获取的请求中的哪个具体的 <code>Cookie</code> 信息</li></ul></li><li>注解参数 <code>name</code>：类型为<code>String</code>，作用同注解参数 <code>value</code></li><li>注解参数 <code>required</code>：类型为 <code>boolean</code><ul><li>用于指定要获取的请求中的 <code>Cookie</code>信息是否是必要的，默认值为 <code>true</code></li><li>如果为 <code>true</code> 且没有指定注解参数<code>defaultValue</code> 而请求中又没有相应的 <code>Cookie</code>信息，那么就会报错</li></ul></li><li>注解参数 <code>defaultValue</code>：类型为 <code>String</code><ul><li>当从请求中没有获取到想要的 <code>Cookie</code> 信息，此时如果指定了<code>defaultValue</code> 就用其指定的值</li><li>如果没有指定 <code>defaultValue</code> 而注解参数<code>required</code> 又为 <code>true</code> 那就会报错</li></ul></li></ul><h3 id="获取请求参数并多层封装记录">获取请求参数并多层封装记录</h3><ul><li><p>获取 <code>GET</code> 请求<code>/handle06?username=zhangsan&amp;password=123456&amp;cellphone=12345678910&amp;address.province=陕西&amp;address.city=西安&amp;address.area=长安&amp;sex=男&amp;hobby=足球&amp;hobby=篮球&amp;hobby=乒乓球&amp;grade=二年级&amp;agreement=on</code>的信息</p></li><li><p>更改 <code>Person</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String cellphone;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> agreement;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String[] hobby;<br>    <span class="hljs-keyword">private</span> String grade;<br><br>    <span class="hljs-keyword">private</span> Address address;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String area;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.Person;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/handle06&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle06</span><span class="hljs-params">(Person person)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="获取其它请求格式信息记录">获取其它请求格式信息记录</h3><ul><li><p>获取 <code>POST</code> 请求 <code>/handle07</code>中的请求体数据，数据为 <code>json</code>格式，此时就要进行转换，才能封装为 POJO 类对象</p></li><li><p>可以利用 <code>Postman</code>模拟发送请求，数据要和被封装的对象对应，数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhangsan&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cellphone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12345678910</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;agreement&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;man&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hobby&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;篮球&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;足球&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;grade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;三年级&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;province&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;陕西&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;西安&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;长安&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>Person</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String cellphone;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> agreement;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String[] hobby;<br>    <span class="hljs-keyword">private</span> String grade;<br><br>    <span class="hljs-keyword">private</span> Address address;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String area;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.Person;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/handle07&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle07</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Person person)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 也可以原封不动拿到字符串,再自己做转换</span><br>    <span class="hljs-comment">//@PostMapping(&quot;/handle07&quot;)</span><br>    <span class="hljs-comment">//public String handle07(@RequestBody String personStr) &#123;</span><br>    <span class="hljs-comment">//    System.out.println(&quot;person = &quot; + personStr);</span><br>    <span class="hljs-comment">//    return &quot;ok&quot;;</span><br>    <span class="hljs-comment">//&#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="注解-requestbody-记录">注解 <code>@RequestBody</code> 记录</h4><ul><li>这个注解的作用是直接将请求体数据解析，然后自动进行转换处理（如果可以转换），再赋值给被注解的对象</li><li>一般是通过请求头 <code>Content-Type</code>来对应的消息转换器进行数据的转换，<ahref="https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#rest-message-conversion">官方文档</a><ul><li>比如 <code>application/json</code> 就用<code>MappingJackson2HttpMessageConverter</code> 消息转换器</li></ul></li><li>如果是不能解析的数据，而又用了这个注解，则方法不会执行，控制台出现警告</li><li>参数 <code>required</code>：类型为 <code>boolean</code>，默认值为<code>true</code><ul><li>如果为 <code>true</code> 且没有获取到请求体数据，则报错</li></ul></li></ul><h3 id="获取请求体中的文件信息记录">获取请求体中的文件信息记录</h3><ul><li><p>获取 <code>POST</code> 请求 <code>/handle08</code>上传过来的文件</p></li><li><p>前端上传文件有两个要求：请求方式为 <code>POST</code>和提交数据的类型为 <code>multipart/form-data</code></p></li><li><p>传文件时，浏览器会把文件以二进制的方式放到请求体中进行上传</p></li><li><p>SpringMVC 对文件获取的方法：<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/multipart-forms.html">官方文档</a></p></li><li><p>即要用到 <code>MultipartFile</code> 类接收上传过来的文件</p></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.Person;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-comment">// 注意：这里不用写 @RequestBody 注解，因为上传的数据不是可以转换的消息数据</span><br>    <span class="hljs-meta">@PostMapping(&quot;handle08&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle08</span><span class="hljs-params">(Person person,</span><br><span class="hljs-params">                           // 用 <span class="hljs-meta">@RequestParam</span> 指定要获取文件的参数名 (key: fileValue)</span><br>                           <span class="hljs-comment">// 单个文件用 MultipartFile 对象，多个就用数组</span><br>                           <span class="hljs-meta">@RequestParam(&quot;headerImg&quot;)</span> MultipartFile headerImgFile,<br>                           <span class="hljs-meta">@RequestParam(&quot;lifeImg&quot;)</span> MultipartFile[] lifeImgFiles) <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">// 1. 获取原始文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> headerImgFile.getOriginalFilename();<br>        System.out.println(<span class="hljs-string">&quot;原始文件名 = &quot;</span> + originalFilename);<br><br>        <span class="hljs-comment">// 2. 获取文件大小</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> headerImgFile.getSize();<br>        System.out.println(<span class="hljs-string">&quot;文件大小 = &quot;</span> + size);<br><br>        <span class="hljs-comment">// 3. 获取文件流，可以进行文件流操作</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> headerImgFile.getInputStream();<br><br>        <span class="hljs-comment">// 4. 保存文件</span><br>        headerImgFile.transferTo(Path.of(<span class="hljs-string">&quot;D:\\&quot;</span> + originalFilename));<br>        <span class="hljs-comment">// 或者</span><br>        <span class="hljs-comment">//headerImgFile.transferTo(new File(&quot;D:\\&quot; + originalFilename));</span><br><br>        <span class="hljs-comment">// 如果数组长度不为 0 才进行保存操作</span><br>        <span class="hljs-keyword">if</span> (lifeImgFiles.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (MultipartFile lifeImg : lifeImgFiles) &#123;<br>                lifeImg.transferTo(Path.of(<span class="hljs-string">&quot;D:\\&quot;</span> + lifeImg.getOriginalFilename()));<br>                <span class="hljs-comment">//lifeImg.transferTo(new File(&quot;D:\\&quot; + lifeImg.getOriginalFilename()));</span><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;life image save success&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意：这里不用 <code>@RequestBody</code>注解，因为上传过来的数据不是可以转换的消息数据</p></li><li><p>这里会有默认文件大小限制，可以在配置文件<code>application.properties</code> 中手动指定文件大小限制：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">1GB</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">1GB</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="类-multipartfile-记录">类 <code>MultipartFile</code> 记录</h4><ul><li>用于接收请求体的文件数据，可以配合 <code>@RequestParam</code>注解使用</li></ul><h3 id="获取整个请求信息记录">获取整个请求信息记录</h3><ul><li><p>获取 <code>POST</code> 请求 <code>/handle09</code>的所有请求信息</p></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.http.HttpEntity;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/handle09&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle09</span><span class="hljs-params">(HttpEntity&lt;String&gt; httpEntity)</span> &#123;<br><br>        <span class="hljs-comment">// 1. 获取请求头信息</span><br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> httpEntity.getHeaders();<br>        System.out.println(<span class="hljs-string">&quot;请求头 = &quot;</span> + headers);<br><br>        <span class="hljs-comment">// 2. 获取请求体信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> httpEntity.getBody();<br>        System.out.println(<span class="hljs-string">&quot;请求体 = &quot;</span> + body);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="类-httpentityt-记录">类 <code>HttpEntity&lt;T&gt;</code>记录</h4><ul><li>用于获取整个请求信息，其泛型 <code>&lt;T&gt;</code>为请求体类型</li><li>有一个子类 <code>RequestEntity&lt;T&gt;</code> 封装的东西更多</li></ul><h3 id="用-tomcat-原生的-servlet-处理请求记录">用 <code>Tomcat</code>原生的 <code>Servlet</code> 处理请求记录</h3><ul><li><p>处理 <code>GET</code> 请求<code>/handle10?username=zhangsan</code></p></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/handle10&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle10</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                         HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        writer.write(<span class="hljs-string">&quot;your name&quot;</span> + username);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="获取请求信息总结记录">获取请求信息总结记录</h3><ol type="1"><li>直接写与参数名同名变量名</li><li>用 <code>@RequestParam</code> 注解指定要获取的参数名</li><li>写 <code>POJO</code> 类获取请求信息并封装</li><li>用 <code>@RequestHeader</code> 获取请求头信息</li><li>用 <code>@CookieValue</code> 获取请求中的 <code>Cookie</code>信息</li><li>用 <code>@RequestBody</code> 注解获取其它格式的请求信息</li><li>用 <code>MultipartFile</code> 获取请求体中的文件数据</li><li>用 <code>HttpEntity&lt;T&gt;</code> 或者<code>RequestEntity&lt;T&gt;</code> 获取整个请求信息</li><li>用原生 <code>Servlet</code> 获取请求信息</li><li>等等...，可以看<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html">官方文档</a></li></ol><h2 id="响应处理记录">4. 响应处理记录</h2><ul><li><p>可以先看看<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods.html">官方文档</a></p></li><li><p>创建一个 <code>Controller</code>用于响应请求：<code>ResponseTestController.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.Person;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseTestController</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="响应一个-json-格式的数据记录">响应一个 <code>json</code>格式的数据记录</h3><ul><li><p>如果响应的数据是一个对象，SpringMVC 会自动转换为<code>json</code> 数据，关键要有一个注解<code>@ResponseBody</code></p></li><li><p>响应给 <code>GET</code> 请求 <code>/resp01</code> 一个<code>json</code> 数据</p></li><li><p>编写 <code>Pojo</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String cellphone;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> agreement;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String[] hobby;<br>    <span class="hljs-keyword">private</span> String grade;<br><br>    <span class="hljs-keyword">private</span> Address address;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String area;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Mapping</code>：也可以返回 <code>Map</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.Person;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseTestController</span> &#123;<br><br>    <span class="hljs-comment">// 此处也可以返回 Map 等等</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/resp01&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">resp01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setUsername(<span class="hljs-string">&quot;zs&quot;</span>);<br>        person.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        person.setCellphone(<span class="hljs-string">&quot;12345678910&quot;</span>);<br>        person.setAgreement(<span class="hljs-literal">true</span>);<br>        person.setSex(<span class="hljs-string">&quot;20&quot;</span>);<br>        person.setHobby(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;football&quot;</span>, <span class="hljs-string">&quot;basketball&quot;</span>&#125;);<br>        person.setGrade(<span class="hljs-string">&quot;grade 3&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="响应一个文件数据记录">响应一个文件数据记录</h3><ul><li><p>响应给 <code>GET</code> 请求 <code>/download</code>一个文件数据</p></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/download&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; download() <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取文件转成文件流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/1.png&quot;</span>);<br><br>        <span class="hljs-comment">// 把文件流转为字节流</span><br>        <span class="hljs-comment">// 这样可能会出现内存溢出问题</span><br>        <span class="hljs-type">byte</span>[] bytes = fileInputStream.readAllBytes();<br><br>        <span class="hljs-comment">// 有下面问题</span><br>        <span class="hljs-comment">// 1. 如果响应的文件有中文，会出现文件名乱码</span><br>        <span class="hljs-comment">// 2. 如果文件太大会出现内存溢出</span><br><br>        <span class="hljs-comment">// 解决文件名乱码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> URLEncoder.encode(<span class="hljs-string">&quot;人.png&quot;</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 获取一个响应构建器</span><br><span class="hljs-comment">        ResponseEntity.BodyBuilder ok = ResponseEntity.ok();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 指定响应的内容类型为一个流</span><br><span class="hljs-comment">        ok.contentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="hljs-comment">        // 指定响应体的长度大小</span><br><span class="hljs-comment">        ok.contentLength(bytes.length);</span><br><span class="hljs-comment">        // 指定一个响应头，告诉浏览器这是一个要下载的文件，并指定文件名</span><br><span class="hljs-comment">        ok.header(&quot;Content-Disposition&quot;, &quot;attachment; filename=1.png&quot;);</span><br><span class="hljs-comment">        ok.header(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + encode);</span><br><span class="hljs-comment">        // 指定响应的内容体</span><br><span class="hljs-comment">        ResponseEntity&lt;byte[]&gt; body = ok.body(bytes);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 进行响应</span><br><span class="hljs-comment">        return body;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">// 上面的代码可以直接返回</span><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok()<br>                .contentType(MediaType.APPLICATION_OCTET_STREAM)<br>                .contentLength(bytes.length)<br>                <span class="hljs-comment">//.header(&quot;Content-Disposition&quot;, &quot;attachment; filename=1.png&quot;)</span><br>                .header(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=&quot;</span> + encode)<br>                .body(bytes);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>以上程序有两个需要注意的问题：</p><ul><li><p>如果响应的文件名有中文，会发生乱码问题，此时要用<code>URLEncoder</code> 进行编码后再放到响应头中，再响应</p></li><li><p>如果读取的文件太大会出现内存溢出问题，此时可以修改返回的响应体类型为<code>InputStreamResource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.InputStreamResource;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/download&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;InputStreamResource&gt; <span class="hljs-title function_">download</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取文件转成文件流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/1.png&quot;</span>);<br><br>        <span class="hljs-comment">// 解决文件名乱码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> URLEncoder.encode(<span class="hljs-string">&quot;人.png&quot;</span>);<br><br>        <span class="hljs-comment">// 用 InputStreamResource 进行流的封装，避免发生内存溢出的问题</span><br>        <span class="hljs-type">InputStreamResource</span> <span class="hljs-variable">inputStreamResource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamResource</span>(fileInputStream);<br><br>        <span class="hljs-comment">// 上面的代码可以直接返回</span><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok()<br>                .contentType(MediaType.APPLICATION_OCTET_STREAM)<br>                .contentLength(fileInputStream.available())<br>                .header(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=&quot;</span> + encode)<br>                .body(inputStreamResource);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="类-responseentityt-记录">类 <code>ResponseEntity&lt;T&gt;</code>记录</h4><ul><li>可以参考<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/responseentity.html">官方文档</a>，<ahref="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html">API文档</a></li><li>这个类的作用是用于自定义一个响应，比如想返回一个文件，此时就可以用</li></ul><h3 id="响应一个页面记录">响应一个页面记录</h3><ul><li><p>在开始前先写一个 <code>Controller</code> 类<code>PageTestController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageTestController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Spring 推荐使用 <ahref="https://www.thymeleaf.org/">Thymeleaf</a>作为模板引擎，渲染页面</p></li><li><p>在 <code>pom.xml</code> 中导入 <code>Thymeleaf</code> 包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在哪里写页面呢？</p><ul><li>在 <code>src/main/resources</code> 路径下有两个文件夹：<ul><li><code>static</code>：用来存放静态资源，比如<code>js</code>、<code>css</code>、<code>images</code> 等等</li><li><code>templates</code>：用来存放模板页面</li></ul></li></ul></li><li><p>在 <code>templates</code> 目录下写一个登录页面<code>login.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;login.do&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再写一个登录成功页面 <code>success.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>成功<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>恭喜，登录成功<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>用户名：&#123;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：&#123;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注意：要响应一个页面就不要再用 <code>@RestController</code> 和<code>@ResponseBody</code> 了，因为这两个注解都是响应数据用的</p></li><li><p>编写 <code>Mapping</code> 处理 <code>/</code> 路径请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageTestController</span> &#123;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 页面地址 = classpath:/templates/ + 视图名 + .html</span><br>        <span class="hljs-comment">// 写一个视图名</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Mapping</code> 处理前端 <code>/login.do</code>请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageTestController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login.do&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username,</span><br><span class="hljs-params">                        String password,</span><br><span class="hljs-params">                        // 模型就是页面要展示的所有数据</span><br><span class="hljs-params">                        Model model)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;用户登录：&quot;</span> + username + <span class="hljs-string">&quot;,&quot;</span> + password);<br><br>        <span class="hljs-comment">// 数据库查到信息</span><br>        <span class="hljs-comment">// 往模型中放数据</span><br>        model.addAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        model.addAttribute(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">// 跳转到 classpath:/templates/success.html 页面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>success</code> 页面获取数据并展示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>成功<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>恭喜，登录成功<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span> <span class="hljs-attr">th:id</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：[[$&#123;age&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>用 <code>Thymeleaf</code> 渲染一个列表数据：</p><ul><li><p>编写一个 <code>POJO</code> 类 <code>User.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.bean;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Mapping</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.User;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageTestController</span> &#123;<br>    <br>    <span class="hljs-meta">@PostMapping(&quot;/login.do&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username,</span><br><span class="hljs-params">                        String password,</span><br><span class="hljs-params">                        // 模型就是页面要展示的所有数据</span><br><span class="hljs-params">                        Model model)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;用户登录：&quot;</span> + username + <span class="hljs-string">&quot;,&quot;</span> + password);<br><br>        <span class="hljs-comment">// 数据库查到信息</span><br>        <span class="hljs-comment">// 往模型中放数据</span><br>        model.addAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        model.addAttribute(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>);<br><br>        List&lt;User&gt; list = Arrays.asList(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">19</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">16</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4L</span>, <span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">27</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">5L</span>, <span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">15</span>)<br>        );<br><br>        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>, list);<br><br>        <span class="hljs-comment">// 跳转到 classpath:/templates/success.html 页面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Thymeleaf</code> 模板 <code>success.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>成功<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>恭喜，登录成功<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span> <span class="hljs-attr">th:id</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：[[$&#123;age&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成年否<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user : $&#123;list&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>[[$&#123;user.name&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>[[$&#123;user.age&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user.age &gt;= 18&#125;&quot;</span>&gt;</span>是<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user.age &lt; 18&#125;&quot;</span>&gt;</span>否<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="获取和存储-request-域数据">获取和存储 <code>request</code>域数据</h4><ul><li>可以使用原生的 <code>HttpServletRequest</code></li><li>也可以使用下面的两个接口，一个类</li></ul><h5 id="接口-model-记录">接口 <code>Model</code> 记录</h5><ul><li><p>用法类似于 <code>HttpServletRequest</code></p></li><li><p>用在处理请求的 <code>Mapping</code> 方法中的参数上，用于读取<code>request</code> 域中的数据，和往 <code>request</code>域中存放数据</p></li><li><p>常用方法 <code>Model.addAttribute()</code> 和<code>Model.getAttribute()</code></p></li></ul><h5 id="类-modelmap-记录">类 <code>ModelMap</code> 记录</h5><ul><li>用法类似于上面的 <code>Model</code></li></ul><h5 id="接口-map-记录">接口 <code>Map</code> 记录</h5><ul><li><code>Map</code> 接口常用于集合中，但在这里也可以和上面的<code>Model</code> 和 <code>ModelMap</code>作替换使用，即用法差不多</li></ul><h4 id="获取和存储-session-域数据">获取和存储 <code>session</code>域数据</h4><ul><li>可以使用原生的 <code>HttpSession</code></li><li>也可以使用 <code>@SessionAttributes</code> 注解，可以看<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/sessionattributes.html">官方文档</a></li></ul><h5 id="注解-sessionattributes-记录">注解<code>@SessionAttributes</code> 记录</h5><ul><li><p>用法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@SessionAttributes(&quot;pet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EditPetForm</span> &#123;<br><br> <span class="hljs-meta">@PostMapping(&quot;/pets&quot;)</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle</span><span class="hljs-params">(ModelMap modelMap)</span> &#123;<br>        <span class="hljs-comment">// 此时数据存放的位置就是在 session 中了</span><br>        modelMap.addAttribute(<span class="hljs-string">&quot;pet&quot;</span>, <span class="hljs-string">&quot;My pets&quot;</span>);<br>        <br>        <span class="hljs-comment">// 由于 @SessionAttributes 没有指定 abc 存放到 session 中，所以 abc 存放在 request 中</span><br>        modelMap.addAttribute(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>);<br> &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="获取和存储-application-域数据">获取和存储<code>application</code> 域数据</h4><ul><li>一般用原生的 <code>ServletContext</code> 进行获取和存储<ul><li>可以通过 <code>request</code> 获取<code>HttpServletRequest.getServletContext()</code></li></ul></li></ul><h4 id="类-modelandview-记录">类 <code>ModelAndView</code> 记录</h4><ul><li><p>返回一个页面除了返回视图名以外，还可以通过返回<code>ModelAndView</code> 类实现</p></li><li><p>主要三个步骤：</p><ul><li>创建视图对象</li><li>给视图对象设置视图名称</li><li>给视图对象绑定数据（非必须，需要绑则绑）</li><li>返回视图对象</li></ul></li><li><p>改造上面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.wind.springmvc.bean.User;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageTestController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login.do&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">login</span><span class="hljs-params">(String username,</span><br><span class="hljs-params">                              String password)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;用户登录：&quot;</span> + username + <span class="hljs-string">&quot;,&quot;</span> + password);<br><br>        List&lt;User&gt; list = Arrays.asList(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">19</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">16</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4L</span>, <span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">27</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">5L</span>, <span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">15</span>)<br>        );<br><br>        <span class="hljs-comment">// 创建视图对象</span><br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br><br>        <span class="hljs-comment">// 设置视图名字，用于找页面文件</span><br>        view.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br><br>        <span class="hljs-comment">// 给视图绑定数据</span><br>        view.addObject(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        view.addObject(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>);<br>        view.addObject(<span class="hljs-string">&quot;list&quot;</span>, list);<br><br>        <span class="hljs-comment">// 返回视图</span><br>        <span class="hljs-keyword">return</span> view;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4id="转发forward与重定向redirect">转发（forward）与重定向（redirect）</h4><ul><li>转发是一次请求：浏览器访问 <code>/a</code>，然后从 <code>/a</code>转发到 <code>/b</code>，最后由 <code>/b</code> 响应给浏览器</li><li>重定向是两次请求：浏览器访问 <code>/a</code>，此时 <code>/a</code>响应了 <code>/b</code> 的路径，浏览器再根据路径往 <code>/b</code>发送请求，最后由 <code>/b</code> 响应给浏览器</li><li>转发是服务器内部的资源跳转，不可实现跨域访问</li><li>重定向可以完成内部资源跳转，也可以实现跨域跳转</li><li>转发可以访问服务器受保护的资源</li><li>重定向相当于让浏览器再发一次请求，不能访问服务器受保护的资源</li></ul><h5 id="原生-servlet-实现记录">原生 <code>Servlet</code> 实现记录</h5><ul><li><p>转发（forward）：</p><ul><li><p>调用 <code>ServletRequest</code> 接口下的<code>RequestDispatcher getRequestDispatcher(String path);</code>方法获得一个 <code>RequestDispatcher</code></p><ul><li>其中方法参数 <code>path</code> 就是要转发的目标的路径</li></ul></li><li><p>再调用 <code>RequestDispatcher</code> 接口下的<code>void forward(ServletRequest request, ServletResponse response) throws ServletException, IOException;</code>方法进行转发</p><ul><li>这个方法需要传入两个参数，分别为 <code>ServletRequest</code> 类和<code>ServletResponse</code> 类</li></ul></li><li><p>由于 <code>HttpServletRequest</code> 接口继承了<code>ServletRequest</code> 接口，所以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 转发到 /index 路径，下面的类名要替换成实例对象</span><br>HttpServletRequest.getRequestDispatcher(<span class="hljs-string">&quot;/index&quot;</span>).forward(HttpServletRequest, HttpServletResponse);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>重定向（redirect）：</p><ul><li><p>由于重定向是两次请求，所以要先响应一个路径</p></li><li><p>直接调用 <code>HttpServletResponse</code> 接口下的<code>void sendRedirect(String location) throws IOException;</code>方法</p><ul><li>其中方法参数 <code>location</code> 就是要重定向的目标的路径</li></ul></li><li><p>所以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重定向到 /index 路径，下面的类名要替换成实例对象</span><br>HttpServletResponse.sendRedirect(<span class="hljs-string">&quot;/index&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="springmvc-实现记录">SpringMVC 实现记录</h5><ul><li><p>转发：在返回时用 <code>forward:/view</code> 其中<code>view</code> 为视图名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForwardTestController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/fgohome&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fGoHome</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 把 /gohome 请求转发到 /index 对应的 Mapping</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/findex&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/findex&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fIndexMapping</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 响应 index 视图给浏览器</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以看到当在浏览器地址栏上输入<code>http://localhost:8080/fgohome</code>后浏览器路径没有发生变化，这就是转发</p></li><li><p>重定向：在返回时用 <code>redirect:/view</code> 其中<code>view</code> 为视图名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedirectTestController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/rgohome&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rGoHome</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 把路径 /rindex 响应给浏览器，浏览器再向 /rindex 路径发送请求</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/rindex&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/rindex&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rIndexMapping</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 响应 index 视图给浏览器</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以看到当在浏览器地址栏上输入<code>http://localhost:8080/rgohome</code> 后浏览器地址栏上的路径变为了<code>http://localhost:8080/rindex</code> 这就是重定向</p></li></ul><h3 id="响应处理总结记录">响应处理总结记录</h3><ol type="1"><li>响应一个 <code>json</code>数据：返回值类型为对象，就会自动用消息转换器转换为<code>json</code>，要加 <code>@ResponseBody</code> 或者<code>@RestController</code> 注解</li><li>响应一个文件数据：返回值类型为类<code>ResponseEntity&lt;T&gt;</code> 定制响应</li><li>响应一个页面：<ol type="1"><li>返回值类型为 <code>String</code> 且不能用 <code>@ResponseBody</code>和 <code>@RestController</code> 注解</li><li>返回值类型为类 <code>ModelAndView</code></li></ol></li><li>等等...，可以看<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/return-types.html">官方文档</a></li></ol><h2 id="restful-风格记录">5. RESTful 风格记录</h2><ul><li><p>创建一个项目用于写 <code>RESTful</code>风格代码：<code>springmvc-restful-crud</code></p></li><li><p><code>pom.xml</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>新建一个数据库用于写代码，这里使用的是 <code>MySQL</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> restful_crud;<br>USE restful_crud;<br><br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `employee`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `employee`  (<br>  `id` <span class="hljs-type">bigint</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;员工名字&#x27;</span>,<br>  `age` <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>  `gender` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;住址&#x27;</span>,<br>  `salary` <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;薪资&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">5</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `employee` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;aa@qq.com&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>, <span class="hljs-number">9999.00</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `employee` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;someone&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;sss&#x27;</span>, <span class="hljs-number">100.00</span>);<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>在配置文件 <code>application.properties</code> 中配置数据源：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/restful_crud</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="基础架子搭建记录">基础架子搭建记录</h3><h4 id="dao-层记录"><code>DAO</code> 层记录</h4><ul><li><p>写一个 <code>bean</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> BigDecimal salary;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写一个 <code>dao</code> 做 <code>CRUD</code></p><ul><li><p>先写接口再写实现：</p></li><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类（放到容器中，因为被注入的是实现类，而不是接口）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="service-层记录"><code>Service</code> 层记录</h4><ul><li><p>先写接口再写实现：</p><ul><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmployeeService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="controller-层记录"><code>Controller</code> 层记录</h4><ul><li><code>EmployeeRestController</code> 类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeRestController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现员工表的-crud-记录">实现员工表的 <code>CRUD</code> 记录</h3><h4 id="dao-层记录-1"><code>DAO</code> 层记录</h4><ul><li><p>先写 <code>dao</code> 并测试：</p></li><li><p>即用 <code>JdbcTemplate</code> 进行 <code>CRUD</code></p><ul><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.dao;<br><br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br><br>    <span class="hljs-comment">// 根据 id 获取员工信息</span><br>    Employee <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Long id)</span>;<br>    <span class="hljs-comment">// 新增员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Employee emp)</span>;<br>    <span class="hljs-comment">// 修改员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Employee emp)</span>;<br>    <span class="hljs-comment">// 根据 id 删除员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">(Long id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">// 定义 sql 语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from employee where id = ?&quot;</span>;<br>        <span class="hljs-comment">// 执行语句并接收返回结果</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Employee&gt;(Employee.class), id);<br>        <span class="hljs-comment">// 把结果返回</span><br>        <span class="hljs-keyword">return</span> employee;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Employee emp)</span> &#123;<br>        <span class="hljs-comment">// 定义 sql 语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into employee(name, age, email, gender, address, salary) values (?, ?, ?, ?, ?, ?)&quot;</span>;<br>        <span class="hljs-comment">// 执行语句</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql,<br>                emp.getName(),<br>                emp.getAge(),<br>                emp.getEmail(),<br>                emp.getGender(),<br>                emp.getAddress(),<br>                emp.getSalary());<br>        <span class="hljs-comment">// 打印影响行数</span><br>        System.out.println(<span class="hljs-string">&quot;影响行数：&quot;</span> + update);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Employee emp)</span> &#123;<br>        <span class="hljs-comment">// 定义 sql 语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update employee set name=?,age=?,email=?,gender=?,address=?,salary=? where id=?&quot;</span>;<br>        <span class="hljs-comment">// 执行语句</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql,<br>                emp.getName(),<br>                emp.getAge(),<br>                emp.getEmail(),<br>                emp.getGender(),<br>                emp.getAddress(),<br>                emp.getSalary(),<br>                emp.getId());<br>        <span class="hljs-comment">// 打印影响行数</span><br>        System.out.println(<span class="hljs-string">&quot;影响行数：&quot;</span> + update);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">// 定义 sql 语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from employee where id = ?&quot;</span>;<br>        <span class="hljs-comment">// 执行语句</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, id);<br>        <span class="hljs-comment">// 打印影响行数</span><br>        System.out.println(<span class="hljs-string">&quot;影响行数：&quot;</span> + update);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>测试类，注意在更新的时候如果只想更新部分数据也要写全部数据，如果不写就会是空值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.dao.EmployeeDao;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDaoTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeDao employeeDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmployeeDao2</span><span class="hljs-params">()</span> &#123;<br>        employeeDao.deleteEmpById(<span class="hljs-number">5L</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmployeeDao1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>        employee.setId(<span class="hljs-number">5L</span>);<br>        employee.setName(<span class="hljs-string">&quot;another&quot;</span>);<br>        employee.setAge(<span class="hljs-number">33</span>);<br>        employee.setEmail(<span class="hljs-string">&quot;bbbabbb.bbb&quot;</span>);<br>        employee.setGender(<span class="hljs-string">&quot;women&quot;</span>);<br>        employee.setAddress(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        <span class="hljs-comment">// 不改的值也要传，不然就是改为 null</span><br>        employee.setSalary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;9000&quot;</span>));<br>        <span class="hljs-comment">// 新增员工信息</span><br>        employeeDao.updateEmp(employee);<br><br>        System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmployeeDao</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 根据 id 获取员工信息</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> employeeDao.getEmpById(<span class="hljs-number">1L</span>);<br>        <span class="hljs-comment">// 打印获取到的信息</span><br>        System.out.println(<span class="hljs-string">&quot;empById = &quot;</span> + empById);<br><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>        employee.setName(<span class="hljs-string">&quot;other&quot;</span>);<br>        employee.setAge(<span class="hljs-number">20</span>);<br>        employee.setEmail(<span class="hljs-string">&quot;aaa@aaa.aaa&quot;</span>);<br>        employee.setGender(<span class="hljs-string">&quot;man&quot;</span>);<br>        employee.setAddress(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        employee.setSalary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;9000&quot;</span>));<br>        <span class="hljs-comment">// 新增员工信息</span><br>        employeeDao.addEmp(employee);<br><br>        System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="service-层记录-1"><code>Service</code> 层记录</h4><ul><li><p><code>Service</code> 层与 <code>DAO</code>层写起来差不多，但可以在真正做 <code>CRUD</code>前做一些验证、拦截等操作</p></li><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.service;<br><br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeService</span> &#123;<br><br>    <span class="hljs-comment">// 根据 id 获取员工信息</span><br>    Employee <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(Long id)</span>;<br>    <span class="hljs-comment">// 增加员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee employee)</span>;<br>    <span class="hljs-comment">// 更改员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(Employee employee)</span>;<br>    <span class="hljs-comment">// 根据 id 删除员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(Long id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.service;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.dao.EmployeeDao;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmployeeService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeDao employeeDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> employeeDao.getEmpById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee employee)</span> &#123;<br>        employeeDao.addEmp(employee);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(Employee employee)</span> &#123;<br><br>        <span class="hljs-comment">// 更新员工信息时，可能只是更新一部分数据</span><br>        <span class="hljs-comment">// 而如果 employee 对象中只有想更新的数据赋了值，但不想更新的数据为 null</span><br>        <span class="hljs-comment">// 那么在做 dao 操作时就会用 null 把原来的值覆盖了</span><br>        <span class="hljs-comment">// 为了避免这种情况，先去数据库中查原值，再把要修改的值替换原值，得到了一个对象</span><br>        <span class="hljs-comment">// 再对这个对象做 dao 操作</span><br><br>        <span class="hljs-comment">// 获取要修改的员工信息的 id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> employee.getId();<br>        <span class="hljs-comment">// 如果 id 为空，意味着没有传要修改员工的 id 过来，抛异常</span><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">// 1. 如果有 id 先查值</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">originEmployee</span> <span class="hljs-operator">=</span> employeeDao.getEmpById(id);<br><br>        <span class="hljs-comment">// 如果有内容就覆盖原对象中的值</span><br>        <span class="hljs-comment">// 这样如果要更新的对象没有相应的值，但原对象有，不会发生 null 数据的问题</span><br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(employee.getName())) &#123;<br>            originEmployee.setName(employee.getName());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(employee.getAddress())) &#123;<br>            originEmployee.setAddress(employee.getAddress());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(employee.getEmail())) &#123;<br>            originEmployee.setEmail(employee.getEmail());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(employee.getGender())) &#123;<br>            originEmployee.setGender(employee.getGender());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (employee.getAge() != <span class="hljs-literal">null</span>) &#123;<br>            originEmployee.setAge(employee.getAge());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (employee.getSalary() != <span class="hljs-literal">null</span>) &#123;<br>            originEmployee.setSalary(employee.getSalary());<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 更新数据</span><br>        employeeDao.updateEmp(originEmployee);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(Long id)</span> &#123;<br>        employeeDao.deleteEmpById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试类，这里在更新时如果只想更新部分数据就写部分就行了，因为在<code>Service</code> 层做过空值拦截处理了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.service.EmployeeService;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeService employeeService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmployeeService2</span><span class="hljs-params">()</span> &#123;<br>        employeeService.deleteEmployee(<span class="hljs-number">5L</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 此时不想改的数据可以不用写了，也不会为空</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmployeeService1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>        employee.setId(<span class="hljs-number">5L</span>);<br>        employee.setName(<span class="hljs-string">&quot;another&quot;</span>);<br>        employee.setGender(<span class="hljs-string">&quot;women&quot;</span>);<br>        <span class="hljs-comment">// 新增员工信息</span><br>        employeeService.updateEmployee(employee);<br><br>        System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmployeeService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 根据 id 获取员工信息</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> employeeService.getEmployeeById(<span class="hljs-number">1L</span>);<br>        <span class="hljs-comment">// 打印获取到的信息</span><br>        System.out.println(<span class="hljs-string">&quot;empById = &quot;</span> + empById);<br><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>        employee.setName(<span class="hljs-string">&quot;other&quot;</span>);<br>        employee.setAge(<span class="hljs-number">20</span>);<br>        employee.setEmail(<span class="hljs-string">&quot;aaa@aaa.aaa&quot;</span>);<br>        employee.setGender(<span class="hljs-string">&quot;man&quot;</span>);<br>        employee.setAddress(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        employee.setSalary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;9000&quot;</span>));<br>        <span class="hljs-comment">// 新增员工信息</span><br>        employeeService.addEmployee(employee);<br><br>        System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="controller-层记录-1"><code>Controller</code> 层记录</h4><ul><li><p><code>EmployeeRestController.java</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.service.EmployeeService;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeRestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeService employeeService;<br><br>    <span class="hljs-comment">// 根据 id 获取员工信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/employee/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> employeeService.getEmployeeById(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 根据 id 删除员工信息</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/employee/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        employeeService.deleteEmployee(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 增加员工信息</span><br>    <span class="hljs-meta">@PostMapping(&quot;/employee&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Employee employee)</span> &#123;<br>        employeeService.addEmployee(employee);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据 id 修改员工信息</span><br>    <span class="hljs-meta">@PutMapping(&quot;/employee&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Employee employee)</span> &#123;<br>        employeeService.updateEmployee(employee);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>上面的程序有一个问题：一会返回的是对象（json），一会返回的是字符串，不统一</p></li><li><p>所以要有一个统一的格式，这里选择返回有标准的 <code>json</code>格式，标准如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http状态码&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;提示消息&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;返回的数据&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>根据上面的 <code>json</code> 格式创建一个返回类<code>R.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.common;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span>&lt;T&gt;&#123;<br>    <br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-comment">// 数据类型也可以用 Object</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-comment">// 成功时返回一个对象，数据可以自己传过来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; R&lt;T&gt; <span class="hljs-title function_">ok</span><span class="hljs-params">(T data)</span> &#123;<br>        R&lt;T&gt; tr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>&lt;&gt;();<br>        tr.setCode(<span class="hljs-number">200</span>);<br>        tr.setMsg(<span class="hljs-string">&quot;ok&quot;</span>);<br>        tr.setData(data);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br><br>    <span class="hljs-comment">// 上面方法的重载，成功且没有数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R&lt;Object&gt; <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;<br>        R&lt;Object&gt; tr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>&lt;&gt;();<br>        tr.setCode(<span class="hljs-number">200</span>);<br>        tr.setMsg(<span class="hljs-string">&quot;ok&quot;</span>);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br><br>    <span class="hljs-comment">// 失败时返回一个对象，不可以指定数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>();<br>        tr.setCode(<span class="hljs-number">500</span>);<br>        tr.setMsg(<span class="hljs-string">&quot;error&quot;</span>);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br><br>    <span class="hljs-comment">// 失败方法重载，可以自定义状态码和消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(Integer code, String msg)</span> &#123;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>();<br>        tr.setCode(code);<br>        tr.setMsg(msg);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br><br>    <span class="hljs-comment">// 失败方法重载，可以自定义状态码和消息和数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(Integer code, String msg, Object data)</span> &#123;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>();<br>        tr.setCode(code);<br>        tr.setMsg(msg);<br>        tr.setData(data);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对上面的 <code>EmployeeRestController.java</code>程序进行改造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.common.R;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.service.EmployeeService;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeRestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeService employeeService;<br><br>    <span class="hljs-comment">// 根据 id 获取员工信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/employee/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Employee&gt; <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employeeById</span> <span class="hljs-operator">=</span> employeeService.getEmployeeById(id);<br><br>        <span class="hljs-keyword">return</span> R.ok(employeeById);<br>    &#125;<br><br>    <span class="hljs-comment">// 根据 id 删除员工信息</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/employee/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        employeeService.deleteEmployee(id);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>    <span class="hljs-comment">// 增加员工信息</span><br>    <span class="hljs-meta">@PostMapping(&quot;/employee&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Employee employee)</span> &#123;<br>        employeeService.addEmployee(employee);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>    <span class="hljs-comment">// 根据 id 修改员工信息</span><br>    <span class="hljs-meta">@PutMapping(&quot;/employee&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Employee employee)</span> &#123;<br>        employeeService.updateEmployee(employee);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="注解-pathvariable-记录">注解 <code>@PathVariable</code>记录</h5><ul><li><p>用于获取 <code>URI</code> 上的模板变量，即获取 <code>URI</code>上的模板变量然后赋值给被标注的变量，<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-requestmapping.html#mvc-ann-requestmapping-uri-templates">官方文档</a></p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 此时 @PathVariable 获取的就是路径上的 myvar 的值，并赋给 id 变量</span><br><span class="hljs-meta">@GetMapping(&quot;/abc/&#123;myvar&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;myvar&quot;)</span> Long id)</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>注解参数 <code>value</code>：类型为<code>String</code>，作用同注解参数 <code>name</code></p><ul><li>用于指定要获取的是 <code>URI</code>上的哪一个模板变量（即指定模板变量名）</li></ul></li><li><p>注解参数 <code>name</code>：类型为<code>String</code>，作用同注解参数 <code>value</code></p></li><li><p>注解参数 <code>required</code>：类型为<code>boolean</code>，默认值为 <code>true</code></p><ul><li>如果注解参数值为 <code>true</code> 而在 <code>URI</code>上又没有相应的模板变量，则会出现错误</li></ul></li></ul><h5id="补充获取所有员工信息的编写记录">补充：获取所有员工信息的编写记录</h5><ul><li><p><code>DAO</code> 层：</p><ul><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.dao;<br><br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br><br>    <span class="hljs-comment">// 根据 id 获取员工信息</span><br>    Employee <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Long id)</span>;<br>    <span class="hljs-comment">// 新增员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Employee emp)</span>;<br>    <span class="hljs-comment">// 修改员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Employee emp)</span>;<br>    <span class="hljs-comment">// 根据 id 删除员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">(Long id)</span>;<br>    <span class="hljs-comment">// 查询所有员工信息</span><br>    List&lt;Employee&gt; <span class="hljs-title function_">getEmployees</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">// 定义 sql 语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from employee where id = ?&quot;</span>;<br>        <span class="hljs-comment">// 执行语句并接收返回结果</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Employee&gt;(Employee.class), id);<br>        <span class="hljs-comment">// 把结果返回</span><br>        <span class="hljs-keyword">return</span> employee;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Employee emp)</span> &#123;<br>        <span class="hljs-comment">// 定义 sql 语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into employee(name, age, email, gender, address, salary) values (?, ?, ?, ?, ?, ?)&quot;</span>;<br>        <span class="hljs-comment">// 执行语句</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql,<br>                emp.getName(),<br>                emp.getAge(),<br>                emp.getEmail(),<br>                emp.getGender(),<br>                emp.getAddress(),<br>                emp.getSalary());<br>        <span class="hljs-comment">// 打印影响行数</span><br>        System.out.println(<span class="hljs-string">&quot;影响行数：&quot;</span> + update);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Employee emp)</span> &#123;<br>        <span class="hljs-comment">// 定义 sql 语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update employee set name=?,age=?,email=?,gender=?,address=?,salary=? where id=?&quot;</span>;<br>        <span class="hljs-comment">// 执行语句</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql,<br>                emp.getName(),<br>                emp.getAge(),<br>                emp.getEmail(),<br>                emp.getGender(),<br>                emp.getAddress(),<br>                emp.getSalary(),<br>                emp.getId());<br>        <span class="hljs-comment">// 打印影响行数</span><br>        System.out.println(<span class="hljs-string">&quot;影响行数：&quot;</span> + update);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">// 定义 sql 语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from employee where id = ?&quot;</span>;<br>        <span class="hljs-comment">// 执行语句</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, id);<br>        <span class="hljs-comment">// 打印影响行数</span><br>        System.out.println(<span class="hljs-string">&quot;影响行数：&quot;</span> + update);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title function_">getEmployees</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 定义 sql 语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from employee&quot;</span>;<br>        <span class="hljs-comment">// 执行语句</span><br>        List&lt;Employee&gt; employeeList = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Employee.class));<br>        <span class="hljs-comment">// 返回数据</span><br>        <span class="hljs-keyword">return</span> employeeList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>Service</code> 层：</p><ul><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.service;<br><br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeService</span> &#123;<br><br>    <span class="hljs-comment">// 根据 id 获取员工信息</span><br>    Employee <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(Long id)</span>;<br>    <span class="hljs-comment">// 增加员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee employee)</span>;<br>    <span class="hljs-comment">// 更改员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(Employee employee)</span>;<br>    <span class="hljs-comment">// 根据 id 删除员工信息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(Long id)</span>;<br>    <span class="hljs-comment">// 查询所有员工信息</span><br>    List&lt;Employee&gt; <span class="hljs-title function_">getAllEmployee</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.restful.service;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.restful.dao.EmployeeDao;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmployeeService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeDao employeeDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> employeeDao.getEmpById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee employee)</span> &#123;<br>        employeeDao.addEmp(employee);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(Employee employee)</span> &#123;<br><br>        <span class="hljs-comment">// 更新员工信息时，可能只是更新一部分数据</span><br>        <span class="hljs-comment">// 而如果 employee 对象中只有想更新的数据赋了值，但不想更新的数据为 null</span><br>        <span class="hljs-comment">// 那么在做 dao 操作时就会用 null 把原来的值覆盖了</span><br>        <span class="hljs-comment">// 为了避免这种情况，先去数据库中查原值，再把要修改的值替换原值，得到了一个对象</span><br>        <span class="hljs-comment">// 再对这个对象做 dao 操作</span><br><br>        <span class="hljs-comment">// 获取要修改的员工信息的 id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> employee.getId();<br>        <span class="hljs-comment">// 如果 id 为空，意味着没有传要修改员工的 id 过来，抛异常</span><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">// 1. 如果有 id 先查值</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">originEmployee</span> <span class="hljs-operator">=</span> employeeDao.getEmpById(id);<br><br>        <span class="hljs-comment">// 如果有内容就覆盖原对象中的值</span><br>        <span class="hljs-comment">// 这样如果要更新的对象没有相应的值，但原对象有，不会发生 null 数据的问题</span><br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(employee.getName())) &#123;<br>            originEmployee.setName(employee.getName());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(employee.getAddress())) &#123;<br>            originEmployee.setAddress(employee.getAddress());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(employee.getEmail())) &#123;<br>            originEmployee.setEmail(employee.getEmail());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(employee.getGender())) &#123;<br>            originEmployee.setGender(employee.getGender());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (employee.getAge() != <span class="hljs-literal">null</span>) &#123;<br>            originEmployee.setAge(employee.getAge());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (employee.getSalary() != <span class="hljs-literal">null</span>) &#123;<br>            originEmployee.setSalary(employee.getSalary());<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 更新数据</span><br>        employeeDao.updateEmp(originEmployee);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(Long id)</span> &#123;<br>        employeeDao.deleteEmpById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title function_">getAllEmployee</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> employeeDao.getEmployees();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>Controller</code> 层：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs sjava">package org.wind.springmvc.restful.controller;<br><br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.web.bind.annotation.*;<br>import org.wind.springmvc.restful.bean.Employee;<br>import org.wind.springmvc.restful.common.R;<br>import org.wind.springmvc.restful.service.EmployeeService;<br><br>import java.util.List;<br><br>@RestController<br>public class EmployeeRestController &#123;<br><br>    @Autowired<br>    EmployeeService employeeService;<br><br>    // 根据 id 获取员工信息<br>    @GetMapping(&quot;/employee/&#123;id&#125;&quot;)<br>    public R&lt;Employee&gt; get(@PathVariable(&quot;id&quot;) Long id) &#123;<br>        Employee employeeById = employeeService.getEmployeeById(id);<br><br>        return R.ok(employeeById);<br>    &#125;<br><br>    // 根据 id 删除员工信息<br>    @DeleteMapping(&quot;/employee/&#123;id&#125;&quot;)<br>    public R&lt;Object&gt; delete(@PathVariable(&quot;id&quot;) Long id) &#123;<br>        employeeService.deleteEmployee(id);<br>        return R.ok();<br>    &#125;<br><br>    // 增加员工信息<br>    @PostMapping(&quot;/employee&quot;)<br>    public R&lt;Object&gt; add(@RequestBody Employee employee) &#123;<br>        employeeService.addEmployee(employee);<br>        return R.ok();<br>    &#125;<br><br>    // 根据 id 修改员工信息<br>    @PutMapping(&quot;/employee&quot;)<br>    public R&lt;Object&gt; update(@RequestBody Employee employee) &#123;<br>        employeeService.updateEmployee(employee);<br>        return R.ok();<br>    &#125;<br><br>    // 查询所有员工信息<br>    @GetMapping(&quot;/employees&quot;)<br>    public R&lt;Object&gt; all() &#123;<br>        List&lt;Employee&gt; employees = employeeService.getAllEmployee();<br>        return R.ok(employees);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="cors-记录"><code>CORS</code> 记录</h3><ul><li><p>在前端写 <code>AJAX</code>请求访问后端写好的接口时，经常会遇到一个错误：</p><ul><li><code>xxx has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.</code></li></ul></li><li><p>以上错误是由于 <code>CORS</code> 策略引发的，即<ahref="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">同源策略</a></p><ul><li>如果不是同一个（域名、端口和协议）则会引发跨域问题</li></ul></li><li><p>解决 <code>CORS</code> 方法：</p><ul><li><code>jsonp</code>（JSON with Padding） 方法</li><li>反向代理配置，开发时可以用 <code>vite</code> 配置，部署时可以用<code>nginx</code> 配置，等等...，这里不演示</li><li>后端做处理，允许前端跨域：使用 <code>@CrossOrigin</code>注解，原理是在响应头中加了 <code>Access-Control-Allow-Origin: *</code><ahref="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin">MDN文档</a></li></ul></li></ul><h4 id="注解-crossorigin-记录">注解 <code>@CrossOrigin</code> 记录</h4><ul><li>这个注解在 <code>SpringMVC</code>中用于解决跨域问题，可以在类上注解，也可以在方法上注解，<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc-cors.html">官方文档</a></li></ul><h2 id="接口-handlerinterceptor-拦截器记录">6. 接口<code>HandlerInterceptor</code> （拦截器）记录</h2><h3id="什么是拦截器handlerinterceptor记录">什么是拦截器（<code>HandlerInterceptor</code>）记录</h3><ul><li><p>类似于 <code>Filter</code> 过滤器，<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-servlet/handlermapping-interceptor.html">官方文档</a></p></li><li><p>用于在请求到达 <code>Controller</code>目标方法前和目标方法执行后做一些操作，比如：</p><ul><li>登录权限验证</li><li>日志记录</li><li>等...</li></ul></li><li><p><code>SpringMVC</code> 中的 <code>HandlerInterceptor</code>接口有三个方法：</p><ul><li><p><code>preHandle</code> 方法：目标方法执行前调用这个方法</p><ul><li>返回值为 <code>boolean</code> 如果为 <code>true</code>则放行，<code>false</code> 则不放行（目标方法不执行）</li></ul></li><li><p><code>postHandle</code>方法：目标方法成功执行后调用这个方法</p></li><li><p><code>afterCompletion</code>方法：完成请求处理（渲染视图完成）后再调用这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <br>    <span class="hljs-comment">// 目标方法执行前调用</span><br><span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    <br>    <span class="hljs-comment">// 目标方法成功执行后调用</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>&#125;<br><br>    <span class="hljs-comment">// 渲染视图完成后调用</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="如何编写一个拦截器记录">如何编写一个拦截器记录</h3><ul><li><p>写一个类实现 <code>HandlerInterceptor</code> 接口，并把这个类放到<code>IoC</code> 容器中</p></li><li><p>配置需要拦截的请求路径：</p><ul><li><ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-config/interceptors.html">官方文档</a></li><li>配置文件：<code>xml</code> 文件</li><li>配置类：<code>WebMvcConfigurer</code> 放到容器中</li></ul></li><li><p>实现 <code>HandlerInterceptor</code> 接口，并重写方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.interceptor;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandlerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor.preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor.postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor.afterCompletion&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置拦截器：</p><ul><li><p>方法 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.interceptor.MyHandlerInterceptor;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySpringMVCConfig</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MyHandlerInterceptor myHandlerInterceptor;<br><br>    <span class="hljs-meta">@Bean</span><br>    WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>                registry.addInterceptor(myHandlerInterceptor)<br>                        <span class="hljs-comment">// 添加路径规则，拦截所有请求</span><br>                        .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                        <span class="hljs-comment">// 不拦截下面的请求</span><br>                        .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方法 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.interceptor.MyHandlerInterceptor;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySpringMVCConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MyHandlerInterceptor myHandlerInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(myHandlerInterceptor)<br>            <span class="hljs-comment">// 添加路径规则，拦截所有请求</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>            <span class="hljs-comment">// 不拦截下面的请求</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="多个拦截器的执行顺序记录">多个拦截器的执行顺序记录</h3><ul><li><p>多写几个拦截器进行测试：</p></li><li><p><code>MyHandlerInterceptor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.interceptor;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandlerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor.preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor.postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor.afterCompletion&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>MyHandlerInterceptor1</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.interceptor;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandlerInterceptor1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor1.preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor1.postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor1.afterCompletion&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>MyHandlerInterceptor2</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.interceptor;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandlerInterceptor2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor2.preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor2.postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor2.afterCompletion&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置类中添加拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.interceptor.MyHandlerInterceptor;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.interceptor.MyHandlerInterceptor1;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.interceptor.MyHandlerInterceptor2;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySpringMVCConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MyHandlerInterceptor myHandlerInterceptor;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MyHandlerInterceptor1 myHandlerInterceptor1;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MyHandlerInterceptor2 myHandlerInterceptor2;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(myHandlerInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<br><br>        registry.addInterceptor(myHandlerInterceptor1)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<br><br>        registry.addInterceptor(myHandlerInterceptor2)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发请求进行测试，得出顺序为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">MyHandlerInterceptor.preHandle<br>MyHandlerInterceptor1.preHandle<br>MyHandlerInterceptor2.preHandle<br>MyHandlerInterceptor2.postHandle<br>MyHandlerInterceptor1.postHandle<br>MyHandlerInterceptor.postHandle<br>MyHandlerInterceptor2.afterCompletion<br>MyHandlerInterceptor1.afterCompletion<br>MyHandlerInterceptor.afterCompletion<br></code></pre></td></tr></table></figure></li><li><p>可以得出结论：</p><ul><li><code>preHandle</code> 按顺序执行</li><li><code>postHandle</code> 倒序执行</li><li><code>afterCompletion</code> 倒序执行</li></ul></li><li><p>如果 <code>MyHandlerInterceptor1</code> 中的<code>preHandle</code> 不放行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.interceptor;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandlerInterceptor1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor1.preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor1.postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor1.afterCompletion&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试结果为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">MyHandlerInterceptor.preHandle<br>MyHandlerInterceptor1.preHandle<br>MyHandlerInterceptor.afterCompletion<br></code></pre></td></tr></table></figure></li><li><p>得出结论：</p><ul><li><code>postHandle</code> 只有在所有拦截器的 <code>preHandle</code>方法放行后才会执行</li><li>如果在其中的一个 <code>preHandle</code> 不放行，那么所有拦截器的<code>postHandle</code> 都不执行</li><li>如果在其中的一个 <code>preHandle</code>不放行，那么不放行的拦截器之前的所有拦截器的<code>afterCompletion</code> 都执行</li><li>即使 <code>postHandle</code> 在执行中出错，但所有的<code>afterCompletion</code> 都会执行，因为在执行<code>postHandle</code> 前所有的 <code>preHandler</code> 都放行了</li></ul></li></ul><h3 id="springmvc-中写一个过滤器filter记录"><code>SpringMVC</code>中写一个过滤器（Filter）记录</h3><ul><li><p>编写一个实现 <code>Filter</code> 接口的类，并放到容器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.filter;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;before doFilter&quot;</span>);<br>        chain.doFilter(request, response);<br>        System.out.println(<span class="hljs-string">&quot;after doFilter&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        Filter.<span class="hljs-built_in">super</span>.init(filterConfig);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        Filter.<span class="hljs-built_in">super</span>.destroy();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>但这样所有的请求都会进行过滤，即 <code>@WebFilter</code>注解用不了了</p></li></ul><h3 id="拦截器和过滤器的区别记录">拦截器和过滤器的区别记录</h3><table><thead><tr><th></th><th>拦截器</th><th>过滤器</th></tr></thead><tbody><tr><td>接口</td><td>HandlerInterceptor</td><td>Filter</td></tr><tr><td>定义</td><td>Spring 定义</td><td>Apache 定义</td></tr><tr><td>放行</td><td>preHandle 方法返回 true 时放行</td><td>调用 chain.doFilter 方法放行</td></tr><tr><td>整合性</td><td>可以直接整合 Spring 容器的所有组件</td><td>不受 Spring容器管理，无法直接使用容器中的组件，需要放到容器中，才可以使用</td></tr><tr><td>拦截范围</td><td>拦截 SpringMVC 能处理的请求</td><td>拦截 Web 应用所有请求</td></tr><tr><td>执行顺序</td><td>在过滤器执行后，拦截器才执行，拦截器全部执行后，过滤器又再执行</td><td>先比拦截器先，后比拦截器后</td></tr></tbody></table><ul><li>在 <code>SpringMVC</code> 的应用中，推荐使用拦截器</li></ul><h2 id="异常处理记录">7. 异常处理记录</h2><ul><li><p><ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-exceptionhandler.html">官方文档</a></p></li><li><p>编程式异常处理：通过写处理异常代码方式处理</p><ul><li>try ... catch</li><li>throw</li></ul></li><li><p>声明式异常处理：通过注解等方式进行处理</p><ul><li><code>@ExceptionHandler</code>：<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-exceptionhandler.html">官方文档</a></li><li><code>@ControllerAdvice</code>：<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-advice.html">官方文档</a></li></ul></li><li><p>开始之前写一个返回对象，为了统一返回格式：<code>R.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.common;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-comment">// 数据类型也可以用 Object</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-comment">// 成功时返回一个对象，数据可以自己传过来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="hljs-title function_">ok</span><span class="hljs-params">(T data)</span> &#123;<br>        R&lt;T&gt; tr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>&lt;&gt;();<br>        tr.setCode(<span class="hljs-number">200</span>);<br>        tr.setMsg(<span class="hljs-string">&quot;ok&quot;</span>);<br>        tr.setData(data);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br><br>    <span class="hljs-comment">// 上面方法的重载，成功且没有数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R&lt;Object&gt; <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;<br>        R&lt;Object&gt; tr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>&lt;&gt;();<br>        tr.setCode(<span class="hljs-number">200</span>);<br>        tr.setMsg(<span class="hljs-string">&quot;ok&quot;</span>);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br><br>    <span class="hljs-comment">// 失败时返回一个对象，不可以指定数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>();<br>        tr.setCode(<span class="hljs-number">500</span>);<br>        tr.setMsg(<span class="hljs-string">&quot;error&quot;</span>);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br><br>    <span class="hljs-comment">// 失败方法重载，可以自定义状态码和消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(Integer code, String msg)</span> &#123;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>();<br>        tr.setCode(code);<br>        tr.setMsg(msg);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br><br>    <span class="hljs-comment">// 失败方法重载，可以自定义状态码和消息和数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(Integer code, String msg, Object data)</span> &#123;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>();<br>        tr.setCode(code);<br>        tr.setMsg(msg);<br>        tr.setData(data);<br>        <span class="hljs-keyword">return</span> tr;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再写一个类作测试 <code>TestController.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="编程式异常处理记录">编程式异常处理记录</h3><ul><li><p>编写 <code>Mapping</code> 测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;i&quot;, defaultValue = &quot;0&quot;)</span> Integer i)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 这里有可能出现异常（当 i 为 0 时）</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / i;<br>            <span class="hljs-comment">// 成功就返回成功对象</span><br>            <span class="hljs-keyword">return</span> R.ok(j);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 失败返回失败对象</span><br>            <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;执行异常&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这样写，如果有很多 <code>Mapping</code>在处理请求时都有可能发生异常，那么就要写很多个<code>try...catch...</code> 语句</p></li></ul><h3 id="注解式异常处理记录">注解式异常处理记录</h3><ul><li><p>编写 <code>Mapping</code> 与 <code>ExceptionHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;i&quot;, defaultValue = &quot;0&quot;)</span> Integer i)</span> &#123;<br>        <span class="hljs-comment">// 这里有可能出现异常（当 i 为 0 时）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / i;<br>        <span class="hljs-comment">// 成功就返回成功对象</span><br>        <span class="hljs-keyword">return</span> R.ok(j);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 当发生指定异常时会调用下面的方法</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">handleArithmeticException</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;执行异常&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果想要获取到异常的信息，可以在被注解的方法参数上写一个异常类参数用于接收异常信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;i&quot;, defaultValue = &quot;0&quot;)</span> Integer i)</span> &#123;<br>        <span class="hljs-comment">// 这里有可能出现异常（当 i 为 0 时）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / i;<br>        <span class="hljs-comment">// 成功就返回成功对象</span><br>        <span class="hljs-keyword">return</span> R.ok(j);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 有一个专门处理指定异常的方法</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">handleArithmeticException</span><span class="hljs-params">(ArithmeticException e)</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;执行异常：&quot;</span> + e.getMessage());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果发生其它类型的异常可以在 <code>@ExceptionHandler</code>注解参数中再写一个要处理的异常</p></li><li><p>也可以再写一个方法处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;i&quot;, defaultValue = &quot;0&quot;)</span> Integer i)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-comment">// 这里有可能出现异常（当 i 为 0 时）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / i;<br><br>        <span class="hljs-comment">// 有可能文件不存在</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\abc.abc&quot;</span>);<br><br>        <span class="hljs-comment">// 成功就返回成功对象</span><br>        <span class="hljs-keyword">return</span> R.ok(j);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 有一个专门处理指定异常的方法</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">handleArithmeticException</span><span class="hljs-params">(ArithmeticException e)</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;执行异常：&quot;</span> + e.getMessage());<br>    &#125;<br><br>    <span class="hljs-comment">// 处理文件找不到的异常的方法</span><br>    <span class="hljs-meta">@ExceptionHandler(FileNotFoundException.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">handleFileNotFoundException</span><span class="hljs-params">(FileNotFoundException e)</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">300</span>, <span class="hljs-string">&quot;执行异常&quot;</span> + e.getMessage());<br>    &#125;<br><br>    <span class="hljs-comment">// 处理其它异常的方法</span><br>    <span class="hljs-meta">@ExceptionHandler(Throwable.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">handleThrowable</span><span class="hljs-params">(Throwable throwable)</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, throwable.getMessage());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="注解-exceptionhandler-记录">注解 <code>@ExceptionHandler</code>记录</h3><ul><li>这个作用是当发生注解参数 <code>value</code>指定的异常时调用被注解标注的方法，只能标注在方法上</li><li>参数 <code>value</code>：类型为<code>Class&lt;? extends Throwable&gt;[]</code>，指定什么异常会处理，可以写多个异常类</li></ul><h3 id="全局异常处理">全局异常处理</h3><ul><li><p>在上面的代码中，用注解 <code>@ExceptionHandler</code>注解标注的方法只能处理所在类的异常，不能处理其它类发生的异常</p></li><li><p>这时就需要用到 <code>@ControllerAdvice</code> 了</p></li><li><p>即用全局异常处理器，全局异常处理器里面有多个处理异常的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.advice;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><br><span class="hljs-comment">// 全局异常处理器</span><br><span class="hljs-comment">//@ResponseBody</span><br><span class="hljs-comment">//@ControllerAdvice</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-comment">//@ResponseBody</span><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, e.getMessage());<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(ArithmeticException e)</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, e.getMessage());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>如果在处理异常的方法上不加 <code>@ResponseBody</code>注解，那么返回的是视图名称，会出错</li><li>可以在这个全局异常处理器类上加 <code>@ResponseBody</code>注解，这样所有异常处理方法返回的都是对象了</li><li>如果需要在类上加 <code>@ResponseBody</code> 和<code>@ControllerAdvice</code> 注解，在 <code>SpringMVC</code>有个二合一注解，即 <code>@RestControllerAdvice</code> 注解</li></ul></li></ul><h3 id="注解-controlleradvice-记录">注解 <code>@ControllerAdvice</code>记录</h3><ul><li>用于指定一个类作为全局异常处理器，并把这个类放到 <code>IoC</code>容器中</li><li>被这个注解标注的类中应有多个异常处理方法（被<code>@ExceptionHandler</code> 注解标注的方法）</li></ul><h3 id="注解-restcontrolleradvice-记录">注解<code>@RestControllerAdvice</code> 记录</h3><ul><li><code>@RestControllerAdvice</code> = <code>@ControllerAdvice</code>+ <code>@ResponseBody</code></li></ul><h3 id="异常处理优先级记录">异常处理优先级记录</h3><ul><li>本类有异常处理方法，就用本类的异常处理方法，即<code>本类 &gt; 全局</code></li><li>在本类中有多个异常处理的方法都能处理发生的异常，就优先使用精确匹配的方法，即<code>精确 &gt; 模糊</code></li><li>如果本类异常处理方法和全局异常处理器都不能处理异常，就用<code>SpringMVC</code> 默认异常处理</li></ul><h3 id="一个异常解决方案记录">一个异常解决方案记录</h3><ul><li><p>定义一个业务异常类：<code>BizException.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.exception;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BizException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br><br>    <span class="hljs-comment">// 业务异常码</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-comment">// 业务异常信息提示</span><br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BizException</span><span class="hljs-params">(Integer code, String msg)</span> &#123;<br>        <span class="hljs-built_in">super</span>(msg);<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BizException</span><span class="hljs-params">(BizExceptionEnum bizExceptionEnum)</span> &#123;<br>        <span class="hljs-built_in">super</span>(bizExceptionEnum.getMsg());<br>        <span class="hljs-built_in">this</span>.code = bizExceptionEnum.getCode();<br>        <span class="hljs-built_in">this</span>.msg = bizExceptionEnum.getMsg();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>把异常码和信息枚举出来，定义成一个类：<code>BizExceptionEnum.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.exception;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">BizExceptionEnum</span> &#123;<br><br>    ORDER_CLOSED(<span class="hljs-number">10001</span>, <span class="hljs-string">&quot;订单已关闭&quot;</span>),<br>    ORDER_NOT_EXIST(<span class="hljs-number">10002</span>, <span class="hljs-string">&quot;订单不存在&quot;</span>),<br>    ORDER_TIMEOUT(<span class="hljs-number">10003</span>, <span class="hljs-string">&quot;订单超时&quot;</span>),<br><br>    PRODUCT_STOCK_NOT_ENOUGH(<span class="hljs-number">20003</span>, <span class="hljs-string">&quot;库存不足&quot;</span>),<br>    PRODUCT_HAS_SOLD(<span class="hljs-number">20002</span>, <span class="hljs-string">&quot;商品已售完&quot;</span>),<br>    PRODUCT_HAS_CLOSED(<span class="hljs-number">20001</span>, <span class="hljs-string">&quot;商品已下架&quot;</span>);<br><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">BizExceptionEnum</span><span class="hljs-params">(Integer code, String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>需要抛异常时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(BizExceptionEnum.ORDER_CLOSED.getCode(), BizExceptionEnum.ORDER_CLOSED.getMsg());<br></code></pre></td></tr></table></figure></li><li><p>再在全局异常处理器中添加相应处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.advice;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.exception.BizException;<br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(BizException.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(BizException e)</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error(e.getCode(), e.getMessage());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>总结步骤：</p><ul><li>写一个业务异常类</li><li>写一个异常枚举类，列出可能出现的异常码和信息</li><li>出现问题抛业务异常</li><li>全局处理器加处理方法</li></ul></li></ul><h2 id="数据校验">8. 数据校验</h2><ul><li><p>数据拿到后要进行合法性校验，看看符不符合要求，前端后端都要做</p></li><li><p>导入 <code>starter</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注解官方文档：<ahref="https://jakarta.ee/learn/docs/jakartaee-tutorial/current/beanvalidation/bean-validation/bean-validation.html">JakartaBean Validation</a></p></li><li><p>开启数据校验步骤（三步）</p><ul><li>导入数据校验用的包</li><li>用注解标注需要校验的字段或属性</li><li>使用 <code>@Valid</code> 注解告诉 <code>SpringMVC</code>开启进行校验，<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-validation.html">官方文档</a></li></ul></li></ul><table><thead><tr><th>注解</th><th>注解描述</th><th>示例</th></tr></thead><tbody><tr><td><code>@AssertFalse</code></td><td>属性值必须为 <code>false</code></td><td><span class="citation"data-cites="AssertFalse&lt;br">@AssertFalse&lt;br</span>/&gt;booleanisUnsupported;</td></tr><tr><td><code>@AssertTrue</code></td><td>属性值必须为 <code>true</code></td><td><span class="citation"data-cites="AssertTrue&lt;br">@AssertTrue&lt;br</span>/&gt;booleanisActive;</td></tr><tr><td><code>@DecimalMax</code></td><td>属性值小于等于指定的十进制数</td><td><span class="citation"data-cites="DecimalMax">@DecimalMax</span>("30.00")<br/>BigDecimaldiscount;</td></tr><tr><td><code>@DecimalMin</code></td><td>属性值大于等于指定的十进制数</td><td><span class="citation"data-cites="DecimalMin">@DecimalMin</span>("5.00")<br/>BigDecimaldiscount;</td></tr><tr><td><code>@Digits</code></td><td>属性值必须为指定范围内的数字，<code>integer</code>表示数字最大整数位，<code>fraction</code> 表示数字最大小数位</td><td><span class="citation" data-cites="Digits">@Digits</span>(integer=6,fraction=2)<br/>BigDecimal price;</td></tr><tr><td><code>@Email</code></td><td>属性值必须为有效的电子邮件地址</td><td><span class="citation"data-cites="Email&lt;br">@Email&lt;br</span>/&gt;Stringemailaddress;</td></tr><tr><td><code>@Future</code></td><td>属性值必须为未来日期</td><td><span class="citation"data-cites="Future&lt;br">@Future&lt;br</span>/&gt;Date eventDate;</td></tr><tr><td><code>@FutureOrPresent</code></td><td>属性值必须为现在或者未来日期</td><td><span class="citation"data-cites="FutureOrPresent&lt;br">@FutureOrPresent&lt;br</span>/&gt;TimetravelTime;</td></tr><tr><td><code>@Max</code></td><td>属性值小于等于指定值</td><td><span class="citation" data-cites="Max">@Max</span>(10)<br/>intquantity;</td></tr><tr><td><code>@Min</code></td><td>属性值大于等于指定值</td><td><span class="citation" data-cites="Min">@Min</span>(5)<br/>intquantity;</td></tr><tr><td><code>@Negative</code></td><td>属性值必须为负数</td><td><span class="citation"data-cites="Negative&lt;br">@Negative&lt;br</span>/&gt;intbasementFloor;</td></tr><tr><td><code>@NegativeOrZero</code></td><td>属性值必须为零或负数</td><td><span class="citation"data-cites="NegativeOrZero&lt;br">@NegativeOrZero&lt;br</span>/&gt;intdebtValue;</td></tr><tr><td><code>@NotBlank</code></td><td>属性值必须有一个非空格字符</td><td><span class="citation"data-cites="NotBlank&lt;br">@NotBlank&lt;br</span>/&gt;Stringmessage;</td></tr><tr><td><code>@NotEmpty</code></td><td>属性值不能为空，不能有空格</td><td><span class="citation"data-cites="NotEmpty&lt;br">@NotEmpty&lt;br</span>/&gt;Stringmessage;;</td></tr><tr><td><code>@NotNull</code></td><td>属性值不能为空，可以有空格</td><td><span class="citation"data-cites="NotNull&lt;br">@NotNull&lt;br</span>/&gt;Stringusername;</td></tr><tr><td><code>@Null</code></td><td>属性值必须为空</td><td><span class="citation"data-cites="Null&lt;br">@Null&lt;br</span>/&gt;String unusedString;</td></tr><tr><td><code>@Past</code></td><td>属性值必须为过去日期</td><td><span class="citation"data-cites="Past&lt;br">@Past&lt;br</span>/&gt;Date birthday;</td></tr><tr><td><code>@PastOrPresent</code></td><td>属性值必须为过去或者现在日期</td><td><span class="citation"data-cites="PastOrPresent&lt;br">@PastOrPresent&lt;br</span>/&gt;DatetravelDate;</td></tr><tr><td><code>@Pattern</code></td><td>属性值必须符合注解参数 <code>regexp</code> 指定的正则表达式</td><td><span class="citation"data-cites="Pattern">@Pattern</span>(regexp="\(\d{3}\)\d{3}-\d{4}")<br/>StringphoneNumber;</td></tr><tr><td><code>@Positive</code></td><td>属性值必须为正数</td><td><span class="citation"data-cites="Positive&lt;br">@Positive&lt;br</span>/&gt;BigDecimalarea;</td></tr><tr><td><code>@PositiveOrZero</code></td><td>属性值必须为正数或零</td><td><span class="citation"data-cites="PositiveOrZero&lt;br">@PositiveOrZero&lt;br</span>/&gt;inttotalGoals;</td></tr><tr><td><code>@Size</code></td><td>评估属性在不在 <code>min</code> 和 <code>max</code>范围内，数组就评估长度，字符串评估个数，等等...</td><td><span class="citation" data-cites="Size">@Size</span>(min=2,max=240)<br/>String briefMessage;</td></tr></tbody></table><ul><li><p>对 <code>Bean</code> 作数据校验，要先更改 <code>Bean</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.bean;<br><br><span class="hljs-keyword">import</span> jakarta.validation.constraints.*;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;年龄不能为空&quot;)</span><br>    <span class="hljs-meta">@Max(value = 120, message = &quot;年龄不能超过 120 岁&quot;)</span><br>    <span class="hljs-meta">@Min(value = 0, message = &quot;年龄不能小于 0 岁&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@Email(message = &quot;邮箱格式不正确&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> BigDecimal salary;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更改好 <code>Bean</code> 类后，还没有开启数据校验，还要使用<code>@Valid</code> 注解告诉 <code>SpringMVC</code> 做校验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Valid;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.service.EmployeeService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeRestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeService employeeService;<br>    <br>    <span class="hljs-comment">// 增加员工信息</span><br>    <span class="hljs-meta">@PostMapping(&quot;/employee&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> Employee employee)</span> &#123;<br>        employeeService.addEmployee(employee);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="注解-valid-记录">注解 <code>@Valid</code> 记录</h3><ul><li>作用是告诉 <code>SpringMVC</code> 对属性做数据校验，即有<code>@Max</code>、<code>@Min</code>、<code>@Email</code>等注解的属性做校验</li><li>一般标注在请求参数上，如果校验成功就继续执行方法，失败就抛异常</li></ul><h3 id="校验异常封装记录">校验异常封装记录</h3><ul><li><p>上面的代码有一个问题，就是如果数据校验失败了会抛一个异常，而异常信息可读性太差</p></li><li><p>所以需要对异常进行封装，此时要用到类 <code>BindingResult</code>或者 <code>Errors</code>，<ahref="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-validation.html">官方文档</a>，类<code>BindingResult</code> 必须放在 <code>@Valid</code>注解的参数后面</p></li><li><p>修改上面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Valid;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.validation.BindingResult;<br><span class="hljs-keyword">import</span> org.springframework.validation.FieldError;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.service.EmployeeService;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeRestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeService employeeService;<br><br>    <span class="hljs-comment">// 增加员工信息</span><br>    <span class="hljs-meta">@PostMapping(&quot;/employee&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> Employee employee, BindingResult bindingResult)</span> &#123;<br><br>        <span class="hljs-comment">// 校验通过，没发生错误</span><br>        <span class="hljs-keyword">if</span> (!bindingResult.hasErrors()) &#123;<br>            employeeService.addEmployee(employee);<br>            <span class="hljs-keyword">return</span> R.ok();<br>        &#125;<br><br>        <span class="hljs-comment">// 如果程序到了这里，说明校验发生了错误</span><br><br>        Map&lt;String, String&gt; errorsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 获取所有属性错误的信息，进行遍历，把错误属性名作为 key 错误信息作为 value 放到 Map 中</span><br>        <span class="hljs-keyword">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;<br>            <span class="hljs-comment">// 获取到属性名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> fieldError.getField();<br>            <span class="hljs-comment">// 获取错误信息，即在属性注解上的 message 注解参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">defaultMessage</span> <span class="hljs-operator">=</span> fieldError.getDefaultMessage();<br>            <span class="hljs-comment">// 放到 Map 中</span><br>            errorsMap.put(field, defaultMessage);<br>        &#125;<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;数据校验失败&quot;</span>, errorsMap);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>由此，数据校验变成了四步：</p><ul><li>导入数据校验用的包</li><li>用注解标注需要校验的字段或属性</li><li>使用 <code>@Valid</code> 注解开启进行校验</li><li>用 <code>BindingResult</code> 参数作异常处理</li></ul></li></ul><h3 id="校验异常全局处理记录">校验异常全局处理记录</h3><ul><li><p>上面的代码还是有一个问题，如果有多个需要进行校验属性的方法，那就要写多个<code>BindingResult</code> 方法参数了</p></li><li><p>所以异常处理最好是交给全局异常处理器进行处理</p></li><li><p>那么数据校验失败异常怎么捕获和处理</p></li><li><p>先要知道数据校验失败抛的是什么异常，修改全局异常处理器，打印一下异常的名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.advice;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(Throwable.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        System.out.println(e.getClass());<br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, e.getMessage());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再修改 <code>Mapping</code> 不在方法中做异常处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Valid;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.validation.BindingResult;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.service.EmployeeService;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeRestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeService employeeService;<br><br>    <span class="hljs-comment">// 增加员工信息</span><br>    <span class="hljs-meta">@PostMapping(&quot;/employee&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> Employee employee<span class="hljs-comment">/*, BindingResult bindingResult*/</span>)</span> &#123;<br><br>        employeeService.addEmployee(employee);<br>        <span class="hljs-keyword">return</span> R.ok();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发送请求后控制台打印了一个信息：<code>org.springframework.web.bind.MethodArgumentNotValidException</code></p></li><li><p>好了，异常类获取到了，可以在全局异常处理器中写一个处理这个异常类的异常处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.advice;<br><br><span class="hljs-keyword">import</span> org.springframework.validation.BindingResult;<br><span class="hljs-keyword">import</span> org.springframework.validation.FieldError;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">// 全局异常处理器</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <br>    <span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> &#123;<br>        <span class="hljs-comment">// 拿到错误信息对象</span><br>        <span class="hljs-type">BindingResult</span> <span class="hljs-variable">bindingResult</span> <span class="hljs-operator">=</span> e.getBindingResult();<br><br>        <span class="hljs-comment">// 创建一个 Map 错误用于存放错误信息</span><br>        Map&lt;String, String&gt; errorsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 获取所有错误信息</span><br>        List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();<br><br>        <span class="hljs-comment">// 遍历所有的错误信息</span><br>        <span class="hljs-keyword">for</span> (FieldError fieldError : fieldErrors) &#123;<br>            <span class="hljs-comment">// 取出错误属性名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> fieldError.getField();<br>            <span class="hljs-comment">// 取出错误原因</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">defaultMessage</span> <span class="hljs-operator">=</span> fieldError.getDefaultMessage();<br>            <span class="hljs-comment">// 放到 Map 中</span><br>            errorsMap.put(field, defaultMessage);<br>        &#125;<br><br>        <span class="hljs-comment">// 返回错误对象</span><br>        <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;数据校验失败&quot;</span>, errorsMap);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="自定义数据校验注解记录">自定义数据校验注解记录</h3><ul><li><p><ahref="https://docs.spring.io/spring-framework/reference/core/validation/beanvalidation.html#validation-beanvalidation-spring-constraints">官方文档</a></p></li><li><p>创建一个注解类<code>Gender.java</code>，格式其它数据校验注解差不多，并在<code>@Constraint</code> 参数中指定校验类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.annotation;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Constraint;<br><span class="hljs-keyword">import</span> jakarta.validation.Payload;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.validator.GenderValidator;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.ElementType.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;<br><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Constraint(validatedBy = &#123;GenderValidator.class&#125;)</span> <span class="hljs-comment">// 校验器才是真正做校验功能</span><br><span class="hljs-meta">@Target(&#123;FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Gender &#123;<br><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>其中靠的是 <code>@Constraint</code>注解进行校验，所以要创建一个校验类<code>GenderValidator.java</code>，实现其中的校验方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.validator;<br><br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidatorContext;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.annotation.Gender;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenderValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;Gender, String&gt; &#123;<br><br>    <span class="hljs-comment">// 校验是否通过，true 表示通过，false 表示不通过</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String value, ConstraintValidatorContext context)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;男&quot;</span>.equals(value) || <span class="hljs-string">&quot;女&quot;</span>.equals(value));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>总结步骤：</p><ul><li>自定义一个注解，并在注解中 <code>@Constraint</code>注解指定校验器</li><li>自定义一个校验器实现<code>ConstraintValidator&lt;A extends Annotation, T&gt;</code>接口</li></ul></li></ul><h3 id="校验注解中的-message-参数的动态信息国际化记录">校验注解中的<code>message</code> 参数的动态信息（国际化）记录</h3><ul><li><p>官方文档</p></li><li><p>在校验注解中，一般都有一个注解参数<code>message</code>，这个参数可以灵活地从配置文件<code>messages.properties</code> 中获取</p></li><li><p>为什么是<code>messages.properties</code>，因为默认配置就是这个名称，如果想换名称可以在<code>application.properties</code> 配置文件中更改：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.messages.basename</span>=<span class="hljs-string">messages</span><br></code></pre></td></tr></table></figure></li><li><p>如果是不同国家语言就从不同国家代码文件中获取，比如：</p><ul><li><code>messages_zh_CN.properties</code> 是中文的配置文件</li><li><code>messages_en_US.properties</code> 是英文的配置文件</li></ul></li><li><p>用法：<code>校验注解(message = "&#123;xxx.xxx&#125;")</code></p><ul><li>其中 <code>&#123;&#125;</code> 内填的就是配置文件中的属性</li></ul></li><li><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.annotation.Gender;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-comment">//@Gender(message = &quot;性别只能为：男 或 女&quot;)</span><br>    <span class="hljs-meta">@Gender(message = &quot;&#123;gender.message&#125;&quot;)</span> <span class="hljs-comment">// 指定模板字符串，动态从配置文件中取</span><br>    <span class="hljs-keyword">private</span> String gender;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>默认配置文件 <code>messages.properties</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">gender.message</span>=<span class="hljs-string">性别只能为：男 或 女</span><br></code></pre></td></tr></table></figure></li><li><p>配置文件 <code>messages_zh_CN.properties</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">gender.message</span>=<span class="hljs-string">性别只能为：男 或 女</span><br></code></pre></td></tr></table></figure></li><li><p>配置文件 <code>messages_en_US.properties</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">gender.message</span>=<span class="hljs-string">Gender must be one of: Male, Female</span><br></code></pre></td></tr></table></figure></li><li><p><code>SpringMVC</code> 是如何判断语言环境的呢？</p><ul><li>在请求头有一个 <code>Accept-Language</code>属性，根据这个属性进行判断的</li></ul></li></ul><h3 id="被校验注解标注的类改造记录">被校验注解标注的类改造记录</h3><ul><li><p>在 <code>POJO</code>类上加校验注解不符合一个设计模式：单一职责</p></li><li><p>比如多个方法对同一个 <code>POJO</code>类做不同的数据校验，就要用分组参数 <code>groups</code>，太麻烦</p></li><li><p><code>JavaBean</code> 也要分层，比如数据脱敏等...</p></li><li><p>因此产生了各种 <code>O</code> 即分层模型</p><ul><li><p>PO（persistent object）：持久对象</p></li><li><p>VO（value object）：值对象（常用）</p></li><li><p>DAO（Data Access Objects）：数据访问接口（常用）</p></li><li><p>BO（Business Object）：业务对象</p></li><li><p>DTO（Data Transfer Object）：数据传输对象</p></li><li><p>POJO（Plain Old Java Objects）：简单的 Java 对象（常用）</p></li></ul></li><li><p>用 <code>VO</code> 代替 <code>DAO</code> 作数据校验：</p><ul><li><p>保持 <code>DAO</code> 功能单一性 <code>Employee.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> BigDecimal salary;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加员工信息的 <code>VO</code> 类<code>EmployeeAddVO.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.vo.req;<br><br><span class="hljs-keyword">import</span> jakarta.validation.constraints.*;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.annotation.Gender;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeAddVO</span> &#123;<br><br>    <span class="hljs-comment">// 添加时不用 id</span><br><br>    <span class="hljs-meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;年龄不能为空&quot;)</span><br>    <span class="hljs-meta">@Max(value = 120, message = &quot;年龄不能超过 120 岁&quot;)</span><br>    <span class="hljs-meta">@Min(value = 0, message = &quot;年龄不能小于 0 岁&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@Email(message = &quot;邮箱格式不正确&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-meta">@Gender(message = &quot;&#123;gender.message&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> BigDecimal salary;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更改 <code>EmployeeRestController.java</code>代码中的添加员工信息 <code>add</code> 方法，用 <code>VO</code> 代替<code>DAO</code> 作数据校验（分层）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Valid;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.service.EmployeeService;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.vo.req.EmployeeAddVO;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeRestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeService employeeService;<br><br>    <span class="hljs-comment">// 增加员工信息</span><br>    <span class="hljs-meta">@PostMapping(&quot;/employee&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> EmployeeAddVO vo)</span> &#123;<br><br>        <span class="hljs-comment">// 把 vo 转为 dao</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>        <br>        <span class="hljs-comment">// 可以一个一个属性进行复制</span><br>        <span class="hljs-comment">//employee.setName(vo.getName());</span><br>        <span class="hljs-comment">//employee.setAge(vo.getAge());</span><br>        <span class="hljs-comment">//employee.setEmail(vo.getEmail());</span><br>        <span class="hljs-comment">//employee.setGender(vo.getGender());</span><br>        <span class="hljs-comment">//employee.setAddress(vo.getAddress());</span><br>        <span class="hljs-comment">//employee.setSalary(vo.getSalary());</span><br><br>        <span class="hljs-comment">// 用 Spring 的工具类快速复制属性</span><br>        BeanUtils.copyProperties(vo, employee);<br><br>        employeeService.addEmployee(employee);<br>        <span class="hljs-keyword">return</span> R.ok();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更新员工信息的 <code>VO</code> 类<code>EmployeeUpdateVO.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.vo.req;<br><br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeUpdateVO</span> &#123;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;id 不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> BigDecimal salary;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更改 <code>EmployeeRestController.java</code>代码中的更新员工信息 <code>update</code> 方法，用 <code>VO</code> 代替<code>DAO</code> 作数据校验（分层）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Valid;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.service.EmployeeService;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.vo.req.EmployeeUpdateVO;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeRestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeService employeeService;<br>    <br>    <span class="hljs-comment">// 根据 id 修改员工信息</span><br>    <span class="hljs-meta">@PutMapping(&quot;/employee&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> EmployeeUpdateVO vo)</span> &#123;<br><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br><br>        <span class="hljs-comment">// 复制属性</span><br>        BeanUtils.copyProperties(vo, employee);<br><br>        employeeService.updateEmployee(employee);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对响应数据中的 <code>salary</code>字段数据进行脱敏，即不希望返回员工 <code>salary</code> 数据，写一个返回<code>VO</code> 类 <code>EmployRespVO.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.vo.resp;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployRespVO</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String address;<br>    <br>    <span class="hljs-comment">// 对 salary 脱敏</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更改 <code>EmployeeRestController.java</code>代码中的获取所有员工信息 <code>all</code> 方法，用 <code>VO</code> 代替<code>DAO</code> 作数据校验（分层）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.controller;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Valid;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.bean.Employee;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.common.R;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.service.EmployeeService;<br><span class="hljs-keyword">import</span> org.wind.springmvc.practice.vo.resp.EmployRespVO;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeRestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeService employeeService;<br><br>    <span class="hljs-comment">// 查询所有员工信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/employees&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">all</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 查询数据库获取数据</span><br>        List&lt;Employee&gt; employees = employeeService.getAllEmployee();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        // 真正要返回的脱敏后的数据</span><br><span class="hljs-comment">        List&lt;EmployRespVO&gt; employRespVOList = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">        // 进行属性复制</span><br><span class="hljs-comment">        for (Employee employee : employees) &#123;</span><br><span class="hljs-comment">            EmployRespVO vo = new EmployRespVO();</span><br><span class="hljs-comment">            BeanUtils.copyProperties(employee, vo);</span><br><span class="hljs-comment">            employRespVOList.add(vo);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">// stream api 写法</span><br>        List&lt;EmployRespVO&gt; employRespVOList = employees.stream()<br>                .map(employee -&gt; &#123;<br>                    <span class="hljs-type">EmployRespVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployRespVO</span>();<br>                    BeanUtils.copyProperties(employee, vo);<br>                    <span class="hljs-keyword">return</span> vo;<br>                &#125;).collect(Collectors.toList());<br><br>        <span class="hljs-keyword">return</span> R.ok(employRespVOList);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="接口文档记录">9. 接口文档记录</h2><ul><li><p>推荐使用：<ahref="https://doc.xiaominfo.com/">Knife4j</a></p></li><li><p>在 <code>pom.xml</code> 配置文件中导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 <code>src/main/resources</code>下编写配置文件：<code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># springdoc-openapi项目配置</span><br><span class="hljs-attr">springdoc:</span><br>  <span class="hljs-attr">swagger-ui:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/swagger-ui.html</span><br>    <span class="hljs-attr">tags-sorter:</span> <span class="hljs-string">alpha</span><br>    <span class="hljs-attr">operations-sorter:</span> <span class="hljs-string">alpha</span><br>  <span class="hljs-attr">api-docs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/v3/api-docs</span><br>  <span class="hljs-attr">group-configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;default&#x27;</span><br>      <span class="hljs-attr">paths-to-match:</span> <span class="hljs-string">&#x27;/**&#x27;</span><br>      <span class="hljs-comment"># 指定 controller 包路径</span><br>      <span class="hljs-attr">packages-to-scan:</span> <span class="hljs-string">com.xiaominfo.knife4j.demo.web</span><br><span class="hljs-comment"># knife4j的增强配置，不需要增强可以不配</span><br><span class="hljs-attr">knife4j:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">setting:</span><br>    <span class="hljs-attr">language:</span> <span class="hljs-string">zh_cn</span><br></code></pre></td></tr></table></figure></li><li><p>启动项目，打开网址<code>http://localhost:8080/doc.html</code></p></li><li><p>然后用注解进行接口作用的解释：<code>https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations</code></p></li><li><p>比如<code>@Tag</code>、<code>@Parameters</code>、<code>@Schema</code>等</p></li></ul><h2 id="日期数据转换记录">10. 日期数据转换记录</h2><ul><li><p>当数据库字段中有一个日期字段，那么在 <code>Java</code>中对应的就是 <code>Date</code> 类</p></li><li><p>前端进行查询的时候，后端返回结果中的日期没问题，但格式不太美观</p></li><li><p>但前端提交日期数据时，比如<code>2000-01-01 00:00:00</code>，后端会出现反序列化失败，即必须要用指定的格式才可以：<code>2001-01-01T00:00:00.000+00:00</code>，也不太美观</p></li><li><p>如何自定义日期数据提交格式呢？用日期数据转换，即用<code>@JsonFormat</code> 注解</p></li><li><p>在需要自定义日期格式的 <code>VO</code> 上加<code>@JsonFormat</code> 注解，并指定格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind.springmvc.practice.bean;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <br>    <span class="hljs-comment">// 指定日期格式为 年-月-日 时:分:秒 并指定时区为东 8 区</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span><br>    <span class="hljs-keyword">private</span> Date birth;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="注解-jsonformat-记录">注解 <code>@JsonFormat</code> 记录</h3><ul><li><ahref="https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations#deserialization-and-serialization-details">官方文档</a></li><li>用于自定义日期数据转换格式</li></ul><h2 id="springmvc-源码粗略分析记录">11. <code>SpringMVC</code>源码粗略分析记录</h2><ul><li><p><code>SpringMVC</code> 中的所有请求都是由<code>DispatcherServlet</code> 类进行处理的</p><ul><li><p>可以看到 <code>DispatcherServlet</code> 也是一个<code>HttpServlet</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Object</span><br>jakarta<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.GenericServlet</span><br>jakarta<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpServlet</span><br>org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.HttpServletBean</span><br>org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span><br>org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span>.DispatcherServlet<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>DispatcherServlet</code> 中的九大组件：</p><ul><li><p><code>MultipartResolver</code>：文件上传解析器（重点）</p></li><li><p><code>LocaleResolver</code>：做国际化的解析器</p></li><li><p><code>ThemeResolver</code>：做主题用的解析器（已过时）</p></li><li><p><code>List&lt;HandlerMapping&gt;</code>：控制器映射（重点）</p></li><li><p><code>List&lt;HandlerAdapter&gt;</code>：控制器适配器（重点）</p></li><li><p><code>List&lt;HandlerExceptionResolver&gt;</code>：异常解析器（重点）</p></li><li><p><code>RequestToViewNameTranslator</code>：视图名字翻译器</p></li><li><p><code>FlashMapManager</code>：缓存管理器</p></li><li><p><code>List&lt;ViewResolver&gt;</code>：视图解析器（较重点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br><br>    <span class="hljs-comment">// 文件上传解析器（重点）</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> MultipartResolver multipartResolver;<br><br>    <span class="hljs-comment">// 做国际化的解析器</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> LocaleResolver localeResolver;<br><br>    <span class="hljs-comment">// 做主题用的解析器（已过时）</span><br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> ThemeResolver themeResolver;<br><br>    <span class="hljs-comment">// 控制器映射（重点）</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;<br>    <br><span class="hljs-comment">// 控制器适配器（重点）</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;<br><br>    <span class="hljs-comment">// 异常解析器（重点）</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;<br><br>    <span class="hljs-comment">// 视图名字翻译器</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> RequestToViewNameTranslator viewNameTranslator;<br><br>    <span class="hljs-comment">// 缓存管理器</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> FlashMapManager flashMapManager;<br><br>    <span class="hljs-comment">// 视图解析器（较重点）</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>DispatcherServlet</code> 类的 <code>doDispatch</code>方法负责请求的处理，可以打个断点进行调试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br><br>&gt;&gt;&gt;     <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>            <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 判断是不是异步处理</span><br>            <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 定义了一个视图引用，如果前后端不分离就有返回视图</span><br>                <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-comment">// 提前准备一个异常引用，如果发生异常再进行异常处理</span><br>                <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 检查是否有文件的上传</span><br>                    processedRequest = checkMultipart(request);<br>                    multipartRequestParsed = (processedRequest != request);<br><br>                    <span class="hljs-comment">// 获取处理器</span><br>                    <span class="hljs-comment">// Determine handler for the current request.</span><br>                    mappedHandler = getHandler(processedRequest);<br>                    <span class="hljs-comment">// 找不到，调用 noHandlerFound 方法</span><br>                    <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                        noHandlerFound(processedRequest, response);<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br><br>                    <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>                    <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>                    <span class="hljs-comment">// Process last-modified header, if supported by the handler.</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> HttpMethod.GET.matches(method);<br>                    <span class="hljs-keyword">if</span> (isGet || HttpMethod.HEAD.matches(method)) &#123;<br>                        <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br>                            <span class="hljs-keyword">return</span>;<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br><br>                    <span class="hljs-comment">// Actually invoke the handler.</span><br>                    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>                    <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br><br>                    applyDefaultViewName(processedRequest, mv);<br>                    mappedHandler.applyPostHandle(processedRequest, response, mv);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>                    dispatchException = ex;<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>                    <span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br>                    <span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>                    dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed: &quot;</span> + err, err);<br>                &#125;<br>                processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>                triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>                triggerAfterCompletion(processedRequest, response, mappedHandler,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;Handler processing failed: &quot;</span> + err, err));<br>            &#125;<br>            <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>                    <span class="hljs-comment">// Instead of postHandle and afterCompletion</span><br>                    <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>                        mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>                    &#125;<br>                    asyncManager.setMultipartRequestParsed(multipartRequestParsed);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Clean up any resources used by a multipart request.</span><br>                    <span class="hljs-keyword">if</span> (multipartRequestParsed || asyncManager.isMultipartRequestParsed()) &#123;<br>                        cleanupMultipart(processedRequest);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="检查请求是否有文件上传记录">检查请求是否有文件上传记录</h3><ul><li><p>检查是否有文件上传<code>processedRequest = checkMultipart(request);</code> 会调用<code>DispatcherServlet</code> 类的 <code>checkMultipart()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> HttpServletRequest <span class="hljs-title function_">checkMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> MultipartException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.multipartResolver != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.multipartResolver.isMultipart(request)) &#123;<br>            <span class="hljs-keyword">if</span> (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (DispatcherType.REQUEST.equals(request.getDispatcherType())) &#123;<br>                    logger.trace(<span class="hljs-string">&quot;Request already resolved to MultipartHttpServletRequest, e.g. by MultipartFilter&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hasMultipartException(request)) &#123;<br>                logger.debug(<span class="hljs-string">&quot;Multipart resolution previously failed for current request - &quot;</span> +<br>                        <span class="hljs-string">&quot;skipping re-resolution for undisturbed error rendering&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.multipartResolver.resolveMultipart(request);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (MultipartException ex) &#123;<br>                    <span class="hljs-keyword">if</span> (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != <span class="hljs-literal">null</span>) &#123;<br>                        logger.debug(<span class="hljs-string">&quot;Multipart resolution failed for error dispatch&quot;</span>, ex);<br>                        <span class="hljs-comment">// Keep processing error dispatch with regular request handle below</span><br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">throw</span> ex;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// If not returned before: return original request.</span><br>        <span class="hljs-keyword">return</span> request;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果有再调用 <code>multipartResolver</code> 解析文件的方法<code>resolveMultipart()</code> 对请求进行包装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.multipart.support;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StandardServletMultipartResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MultipartResolver</span> &#123;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">// 对原请求进行包装</span><br><span class="hljs-keyword">return</span> StringUtils.startsWithIgnoreCase(request.getContentType(),<br>(<span class="hljs-built_in">this</span>.strictServletCompliance ? MediaType.MULTIPART_FORM_DATA_VALUE : <span class="hljs-string">&quot;multipart/&quot;</span>));<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>StandardMultipartHttpServletRequest</code>类的构造方法进行包装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.multipart.support;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StandardMultipartHttpServletRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMultipartHttpServletRequest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">StandardMultipartHttpServletRequest</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-type">boolean</span> lazyParsing)</span><br><span class="hljs-keyword">throws</span> MultipartException &#123;<br><br><span class="hljs-built_in">super</span>(request);<br><span class="hljs-keyword">if</span> (!lazyParsing) &#123;<br>            <span class="hljs-comment">// 调用解析方法</span><br>parseRequest(request);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseRequest</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Collection&lt;Part&gt; parts = request.getParts();<br><span class="hljs-built_in">this</span>.multipartParameterNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(parts.size());<br>            <span class="hljs-comment">// 把数据放到 Map 中，value 为 MultipartFile 所以接收数据要用 MultipartFile 类的原因</span><br>MultiValueMap&lt;String, MultipartFile&gt; files = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;(parts.size());<br><span class="hljs-keyword">for</span> (Part part : parts) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">headerValue</span> <span class="hljs-operator">=</span> part.getHeader(HttpHeaders.CONTENT_DISPOSITION);<br><span class="hljs-type">ContentDisposition</span> <span class="hljs-variable">disposition</span> <span class="hljs-operator">=</span> ContentDisposition.parse(headerValue);<br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> disposition.getFilename();<br><span class="hljs-keyword">if</span> (filename != <span class="hljs-literal">null</span>) &#123;<br>files.add(part.getName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardMultipartFile</span>(part, filename));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">this</span>.multipartParameterNames.add(part.getName());<br>&#125;<br>&#125;<br>setMultipartFiles(files);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>handleParseFailure(ex);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="获取处理器记录">获取处理器记录</h3><h4 id="找到了记录">找到了记录</h4><ul><li><p><code>mappedHandler = getHandler(processedRequest);</code>进去看一下 Step Into：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title function_">getHandler</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerMappings != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// for 循环进行遍历找到合适的处理器，找到了就返回一个处理器执行链</span><br><span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mapping.getHandler(request);<br><span class="hljs-keyword">if</span> (handler != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> handler;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>此时看一下 <code>HandlerMapping</code> 是什么东西，是一个<code>ArrayList</code> 集合，里面有 6 个元素，这一堆都是<code>SpringMVC</code> 支持的请求映射：</p><ul><li><code>RouterFunctionMapping</code></li><li><code>RequestMappingHandlerMapping</code>：因为当前用的是<code>@RequestMapping</code> 注解，所以会用这个映射</li><li><code>WelcomePageHandlerMapping</code></li><li><code>BeanNameUrlHandlerMapping</code></li><li><code>WelcomePageNotAcceptableHandlerMapping</code></li><li><code>SimpleUrlHandlerMapping</code></li></ul></li><li><p>所以 <code>HandlerMapping</code>就是把请求路径与处理的方法进行绑定的东西</p></li><li><p>当找到了合适的 <code>HandlerMapping</code> 后就会返回一个<code>HandlerExecutionChain</code> 即处理器执行链，里面有三个东西</p><ul><li>目标方法</li><li>拦截器（自己写的和默认的）</li><li>拦截器索引</li></ul></li></ul><h4 id="找不到记录">找不到记录</h4><ul><li><p>调用 <code>noHandlerFound(processedRequest, response);</code>然后跳转到错误页结束请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">noHandlerFound</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (pageNotFoundLogger.isWarnEnabled()) &#123;<br>pageNotFoundLogger.warn(<span class="hljs-string">&quot;No mapping for &quot;</span> + request.getMethod() + <span class="hljs-string">&quot; &quot;</span> + getRequestUri(request));<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.throwExceptionIfNoHandlerFound) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoHandlerFoundException</span>(request.getMethod(), getRequestUri(request),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletServerHttpRequest</span>(request).getHeaders());<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 跳转到错误页，结束请求</span><br>            <span class="hljs-comment">// HttpServletResponse.SC_NOT_FOUND = 404</span><br>response.sendError(HttpServletResponse.SC_NOT_FOUND);<br>&#125;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="获取处理器适配器记录">获取处理器适配器记录</h3><ul><li><p><code>HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</code></p><ul><li><code>mappedHandler.getHandler()</code>获取目标方法，再获取目标方法适配器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br><span class="hljs-keyword">protected</span> HandlerAdapter <span class="hljs-title function_">getHandlerAdapter</span><span class="hljs-params">(Object handler)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerAdapters != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (HandlerAdapter adapter : <span class="hljs-built_in">this</span>.handlerAdapters) &#123;<br>                <span class="hljs-comment">// 获取支持目标方法的适配器</span><br><span class="hljs-keyword">if</span> (adapter.supports(handler)) &#123;<br><span class="hljs-keyword">return</span> adapter;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;No adapter for handler [&quot;</span> + handler +<br><span class="hljs-string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>适配器是什么，一个<code>ArrayList</code>，反射工具，点开参数看到有四个：</p><ul><li><code>RequestMappingHandlerAdapter</code>：因为当前用了<code>@RequestMapping</code> 注解，所以用这个适配器</li><li><code>HandlerFunctionAdapter</code></li><li><code>HttpRequestHandlerAdapter</code></li><li><code>SimpleControllerHandlerAdapter</code>：可以实现<code>Controller</code> 接口并放进 <code>IoC</code>容器中可以做请求处理，那时用的就是这个适配器</li></ul></li><li><p>调用了 <code>AbstractHandlerMethodAdapter</code> 类的<code>supports()</code> 方法检测当前适配器支持目标方法否：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet.mvc.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebContentGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerAdapter</span>, Ordered &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Object handler)</span> &#123;<br><span class="hljs-keyword">return</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod handlerMethod &amp;&amp; supportsInternal(handlerMethod));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="真正执行处理器记录">真正执行处理器记录</h3><ul><li><p><code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code>真正执行目标方法</p><ul><li><p>在此之前有一个操作：执行拦截器自己写的和 <code>SpringMVC</code>自带的 <code>preHandle</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用了 <code>HandlerExecutionChain</code> 的<code>applyPreHandle()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerExecutionChain</span> &#123;<br>    <br><span class="hljs-type">boolean</span> <span class="hljs-title function_">applyPreHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 遍历顺序执行</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.interceptorList.size(); i++) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.get(i);<br><span class="hljs-keyword">if</span> (!interceptor.preHandle(request, response, <span class="hljs-built_in">this</span>.handler)) &#123;<br>                <span class="hljs-comment">// 如果发生错误，就执行 afterCompletion 拦截器操作，不执行 postHandle 拦截器了</span><br>                <span class="hljs-comment">// 所以这就是为什么 preHandle 拦截后 postHandle 不执行</span><br>triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>            <span class="hljs-comment">// 每次执行完 preHandle 不出错 interceptorIndex 会增加</span><br>            <span class="hljs-comment">// 所以调用 afterCompletion 会逆序输出</span><br><span class="hljs-built_in">this</span>.interceptorIndex = i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">triggerAfterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, <span class="hljs-meta">@Nullable</span> Exception ex)</span> &#123;<br>        <span class="hljs-comment">// 逆序执行 afterCompletion</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorIndex; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.get(i);<br><span class="hljs-keyword">try</span> &#123;<br>interceptor.afterCompletion(request, response, <span class="hljs-built_in">this</span>.handler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex2) &#123;<br>logger.error(<span class="hljs-string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);<br>&#125;<br>&#125;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>如果正常执行就会到：<code>applyDefaultViewName(processedRequest, mv);</code>渲染视图</p></li><li><p>再到<code>mappedHandler.applyPostHandle(processedRequest, response, mv);</code>执行 <code>postHandle</code> 拦截器方法</p></li><li><p>无论有没有异常都执行<code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 如果发生异常走这个 if</span><br><span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ModelAndViewDefiningException mavDefiningException) &#123;<br>logger.debug(<span class="hljs-string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);<br>mv = mavDefiningException.getModelAndView();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (mappedHandler != <span class="hljs-literal">null</span> ? mappedHandler.getHandler() : <span class="hljs-literal">null</span>);<br>mv = processHandlerException(request, response, handler, exception);<br>errorView = (mv != <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br><br>        <span class="hljs-comment">// 如果有 ModelAndView 则走这个 if 渲染页面</span><br><span class="hljs-comment">// Did the handler return a view to render?</span><br><span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>render(mv, request, response);<br><span class="hljs-keyword">if</span> (errorView) &#123;<br>WebUtils.clearErrorRequestAttributes(request);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br><span class="hljs-comment">// Concurrent handling started during a forward</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Exception (if any) is already handled..</span><br>mappedHandler.triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>如果有异常调用 <code>processHandlerException</code>处理异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br><br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">processHandlerException</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-comment">// Success and error responses may use different content types</span><br>request.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);<br><span class="hljs-comment">// Reset the response body buffer if the response is not committed already,</span><br><span class="hljs-comment">// leaving the response headers in place.</span><br><span class="hljs-keyword">try</span> &#123;<br>response.resetBuffer();<br>&#125;<br><span class="hljs-keyword">catch</span> (IllegalStateException illegalStateException) &#123;<br><span class="hljs-comment">// the response is already committed, leave it to exception handlers anyway</span><br>&#125;<br><br><span class="hljs-comment">// Check registered HandlerExceptionResolvers...</span><br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">exMv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerExceptionResolvers != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (HandlerExceptionResolver resolver : <span class="hljs-built_in">this</span>.handlerExceptionResolvers) &#123;<br>exMv = resolver.resolveException(request, response, handler, ex);<br><span class="hljs-keyword">if</span> (exMv != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (exMv != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (exMv.isEmpty()) &#123;<br>request.setAttribute(EXCEPTION_ATTRIBUTE, ex);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">// We might still need view name translation for a plain error model...</span><br><span class="hljs-keyword">if</span> (!exMv.hasView()) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">defaultViewName</span> <span class="hljs-operator">=</span> getDefaultViewName(request);<br><span class="hljs-keyword">if</span> (defaultViewName != <span class="hljs-literal">null</span>) &#123;<br>exMv.setViewName(defaultViewName);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Using resolved error view: &quot;</span> + exMv, ex);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Using resolved error view: &quot;</span> + exMv);<br>&#125;<br>WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());<br><span class="hljs-keyword">return</span> exMv;<br>&#125;<br><br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>此时可以看一下异常解析器集合（ArrayList）：<code>HandlerExceptionResolver</code><ul><li><code>DefaultErrorAttributes</code></li><li><code>HandlerExceptionResolverComposite</code><ul><li><code>ExceptionHandlerExceptionResolver</code>：自定义的异常解析器</li><li><code>ResponseStatusExceptionResolver</code></li><li><code>DefaultHandlerExceptionResolver</code></li></ul></li></ul></li></ul></li><li><p>如果有页面则调用 <code>render()</code> 方法：在 IDEA 按<code>Ctrl + Alt + 方法名</code> 进入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 国际化</span><br><span class="hljs-comment">// Determine locale for request and apply it to the response.</span><br><span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span><br>(<span class="hljs-built_in">this</span>.localeResolver != <span class="hljs-literal">null</span> ? <span class="hljs-built_in">this</span>.localeResolver.resolveLocale(request) : request.getLocale());<br>response.setLocale(locale);<br><br>View view;<br><span class="hljs-type">String</span> <span class="hljs-variable">viewName</span> <span class="hljs-operator">=</span> mv.getViewName();<br><span class="hljs-keyword">if</span> (viewName != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// We need to resolve the view name.</span><br>view = resolveViewName(viewName, mv.getModelInternal(), locale, request);<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +<br><span class="hljs-string">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// No need to lookup: the ModelAndView object contains the actual View object.</span><br>view = mv.getView();<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;ModelAndView [&quot;</span> + mv + <span class="hljs-string">&quot;] neither contains a view name nor a &quot;</span> +<br><span class="hljs-string">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Delegate to the View object for rendering.</span><br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Rendering view [&quot;</span> + view + <span class="hljs-string">&quot;] &quot;</span>);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (mv.getStatus() != <span class="hljs-literal">null</span>) &#123;<br>request.setAttribute(View.RESPONSE_STATUS_ATTRIBUTE, mv.getStatus());<br>response.setStatus(mv.getStatus().value());<br>&#125;<br>            <span class="hljs-comment">// 再调用 view 的 render 方法</span><br>view.render(mv.getModelInternal(), request, response);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Error rendering view [&quot;</span> + view + <span class="hljs-string">&quot;]&quot;</span>, ex);<br>&#125;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>在渲染之前要先找到视图名：<code>view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</code></p></li><li><p>通过 <code>ViewResolver</code> 找到视图解析器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> View <span class="hljs-title function_">resolveViewName</span><span class="hljs-params">(String viewName, <span class="hljs-meta">@Nullable</span> Map&lt;String, Object&gt; model,</span><br><span class="hljs-params">Locale locale, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.viewResolvers != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (ViewResolver viewResolver : <span class="hljs-built_in">this</span>.viewResolvers) &#123;<br><span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> viewResolver.resolveViewName(viewName, locale);<br><span class="hljs-keyword">if</span> (view != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> view;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用 <code>resolveViewName</code> 方法获取视图名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet.view;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewResolverComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ViewResolver</span>, Ordered, InitializingBean,<br>ApplicationContextAware, ServletContextAware &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> View <span class="hljs-title function_">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">for</span> (ViewResolver viewResolver : <span class="hljs-built_in">this</span>.viewResolvers) &#123;<br>            <span class="hljs-comment">// 再调用 resolveViewName 方法</span><br><span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> viewResolver.resolveViewName(viewName, locale);<br><span class="hljs-keyword">if</span> (view != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> view;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再调用另一个类中的 <code>resolveViewName</code>方法获取视图名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet.view;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractCachingViewResolver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebApplicationObjectSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ViewResolver</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> View <span class="hljs-title function_">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (!isCache()) &#123;<br>            <span class="hljs-comment">// 再调用 createView 方法</span><br><span class="hljs-keyword">return</span> createView(viewName, locale);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> getCacheKey(viewName, locale);<br><span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.viewAccessCache.get(cacheKey);<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.viewCreationCache) &#123;<br>view = <span class="hljs-built_in">this</span>.viewCreationCache.get(cacheKey);<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Ask the subclass to create the View object.</span><br>view = createView(viewName, locale);<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.cacheUnresolved) &#123;<br>view = UNRESOLVED_VIEW;<br>&#125;<br><span class="hljs-keyword">if</span> (view != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.cacheFilter.filter(view, viewName, locale)) &#123;<br><span class="hljs-built_in">this</span>.viewAccessCache.put(cacheKey, view);<br><span class="hljs-built_in">this</span>.viewCreationCache.put(cacheKey, view);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(formatKey(cacheKey) + <span class="hljs-string">&quot;served from cache&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> (view != UNRESOLVED_VIEW ? view : <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再调用 <code>createView</code>方法，<code>Ctrl + Alt + 方法名</code> 进去，因为当前用的<code>Thymeleaf</code> 所以来到了 <code>ThymeleafViewResolver</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.thymeleaf.spring6.view;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafViewResolver</span><br>        <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractCachingViewResolver</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ordered</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REDIRECT_URL_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;redirect:&quot;</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FORWARD_URL_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;forward:&quot;</span>;<br>    <br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> View <span class="hljs-title function_">createView</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String viewName, <span class="hljs-keyword">final</span> Locale locale)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// First possible call to check &quot;viewNames&quot;: before processing redirects and forwards</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.alwaysProcessRedirectAndForward &amp;&amp; !canHandle(viewName, locale)) &#123;<br>            vrlogger.trace(<span class="hljs-string">&quot;[THYMELEAF] View \&quot;&#123;&#125;\&quot; cannot be handled by ThymeleafViewResolver. Passing on to the next resolver in the chain.&quot;</span>, viewName);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// Process redirects (HTTP redirects)</span><br>        <span class="hljs-keyword">if</span> (viewName.startsWith(REDIRECT_URL_PREFIX)) &#123;<br>            vrlogger.trace(<span class="hljs-string">&quot;[THYMELEAF] View \&quot;&#123;&#125;\&quot; is a redirect, and will not be handled directly by ThymeleafViewResolver.&quot;</span>, viewName);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">redirectUrl</span> <span class="hljs-operator">=</span> viewName.substring(REDIRECT_URL_PREFIX.length(), viewName.length());<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">RedirectView</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedirectView</span>(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());<br>            <span class="hljs-keyword">return</span> (View) getApplicationContext().getAutowireCapableBeanFactory().initializeBean(view, REDIRECT_URL_PREFIX);<br>        &#125;<br>        <span class="hljs-comment">// Process forwards (to JSP resources)</span><br>        <span class="hljs-keyword">if</span> (viewName.startsWith(FORWARD_URL_PREFIX)) &#123;<br>            <span class="hljs-comment">// The &quot;forward:&quot; prefix will actually create a Servlet/JSP view, and that&#x27;s precisely its aim per the Spring</span><br>            <span class="hljs-comment">// documentation. See http://docs.spring.io/spring-framework/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-redirecting-forward-prefix</span><br>            vrlogger.trace(<span class="hljs-string">&quot;[THYMELEAF] View \&quot;&#123;&#125;\&quot; is a forward, and will not be handled directly by ThymeleafViewResolver.&quot;</span>, viewName);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">forwardUrl</span> <span class="hljs-operator">=</span> viewName.substring(FORWARD_URL_PREFIX.length(), viewName.length());<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalResourceView</span>(forwardUrl);<br>        &#125;<br>        <span class="hljs-comment">// Second possible call to check &quot;viewNames&quot;: after processing redirects and forwards</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.alwaysProcessRedirectAndForward &amp;&amp; !canHandle(viewName, locale)) &#123;<br>            vrlogger.trace(<span class="hljs-string">&quot;[THYMELEAF] View \&quot;&#123;&#125;\&quot; cannot be handled by ThymeleafViewResolver. Passing on to the next resolver in the chain.&quot;</span>, viewName);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        vrlogger.trace(<span class="hljs-string">&quot;[THYMELEAF] View &#123;&#125; will be handled by ThymeleafViewResolver and a &quot;</span> +<br>                        <span class="hljs-string">&quot;&#123;&#125; instance will be created for it&quot;</span>, viewName, getViewClass().getSimpleName());<br>        <span class="hljs-keyword">return</span> loadView(viewName, locale);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以看到有两个 <code>if</code> 判断 <code>viewName</code> 是否由<code>REDIRECT_URL_PREFIX</code> 或 <code>FORWARD_URL_PREFIX</code>开始</p></li><li><p>这就是为什么返回视图名时用 <code>redirect:</code> 表示重定向，用<code>forward:</code> 表示转发</p></li><li><p>那视图拼前缀和后缀的代码在哪里？用另一个<code>ViewResolver</code> 方便作例子分析：回到 <code>createView</code>方法，这次看的是 <code>AbstractCachingViewResolver</code> 类，调用了<code>loadView</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractCachingViewResolver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebApplicationObjectSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ViewResolver</span> &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> View <span class="hljs-title function_">createView</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">return</span> loadView(viewName, locale);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>按 <code>Ctrl + Alt + 方法名</code> 进入<code>UrlBasedViewResolver</code> 类的 <code>loadView</code>方法：发现调用了本类的重载方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet.view;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UrlBasedViewResolver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractCachingViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ordered</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> View <span class="hljs-title function_">loadView</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 再调用重载 bulidView 方法，即下面的方法</span><br><span class="hljs-type">AbstractUrlBasedView</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> buildView(viewName);<br><span class="hljs-type">View</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> applyLifecycleMethods(viewName, view);<br><span class="hljs-keyword">return</span> (view.checkResource(locale) ? result : <span class="hljs-literal">null</span>);<br>&#125;<br>    <br>    <span class="hljs-keyword">protected</span> AbstractUrlBasedView <span class="hljs-title function_">buildView</span><span class="hljs-params">(String viewName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">AbstractUrlBasedView</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> instantiateView();<br>        <br>        <span class="hljs-comment">// 这一句就是视图名进行拼串</span><br>        <span class="hljs-comment">// 前缀 + 视图名 + 后缀</span><br>view.setUrl(getPrefix() + viewName + getSuffix());<br>view.setAttributesMap(getAttributesMap());<br><br><span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> getContentType();<br><span class="hljs-keyword">if</span> (contentType != <span class="hljs-literal">null</span>) &#123;<br>view.setContentType(contentType);<br>&#125;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">requestContextAttribute</span> <span class="hljs-operator">=</span> getRequestContextAttribute();<br><span class="hljs-keyword">if</span> (requestContextAttribute != <span class="hljs-literal">null</span>) &#123;<br>view.setRequestContextAttribute(requestContextAttribute);<br>&#125;<br><br><span class="hljs-type">Boolean</span> <span class="hljs-variable">exposePathVariables</span> <span class="hljs-operator">=</span> getExposePathVariables();<br><span class="hljs-keyword">if</span> (exposePathVariables != <span class="hljs-literal">null</span>) &#123;<br>view.setExposePathVariables(exposePathVariables);<br>&#125;<br><span class="hljs-type">Boolean</span> <span class="hljs-variable">exposeContextBeansAsAttributes</span> <span class="hljs-operator">=</span> getExposeContextBeansAsAttributes();<br><span class="hljs-keyword">if</span> (exposeContextBeansAsAttributes != <span class="hljs-literal">null</span>) &#123;<br>view.setExposeContextBeansAsAttributes(exposeContextBeansAsAttributes);<br>&#125;<br>String[] exposedContextBeanNames = getExposedContextBeanNames();<br><span class="hljs-keyword">if</span> (exposedContextBeanNames != <span class="hljs-literal">null</span>) &#123;<br>view.setExposedContextBeanNames(exposedContextBeanNames);<br>&#125;<br><br><span class="hljs-keyword">return</span> view;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>代码<code>view.setUrl(getPrefix() + viewName + getSuffix());</code>即是进行视图名拼串，所以返回一个视图只需要返回视图名就可以了</p></li><li><p>再调用<code>view.render(mv.getModelInternal(), request, response);</code>渲染页面</p></li></ul></li><li><p>如果上面都没有异常逆序执行拦截器的 <code>afterCompletion</code>方法</p></li><li><p>如果出现了异常，在 <code>processDispatchResult</code> 外还有一个<code>catch</code> 再逆序执行拦截器 <code>afterCompletion</code>方法</p></li></ul></li></ul><h3 id="大概总结图记录">大概总结图记录</h3><figure><img src="/images/SSM_Study/SpringMVC响应请求简略过程.svg" srcset="/img/loading.gif" lazyloadalt="SpringMVC响应请求简略过程" /><figcaption aria-hidden="true">SpringMVC响应请求简略过程</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DiskGenius 清除分区空闲空间后硬盘满了解决方法</title>
    <link href="/2025/02/20/DiskGenius%20%E6%B8%85%E9%99%A4%E5%88%86%E5%8C%BA%E7%A9%BA%E9%97%B2%E7%A9%BA%E9%97%B4%E5%90%8E%E7%A1%AC%E7%9B%98%E6%BB%A1%E4%BA%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2025/02/20/DiskGenius%20%E6%B8%85%E9%99%A4%E5%88%86%E5%8C%BA%E7%A9%BA%E9%97%B2%E7%A9%BA%E9%97%B4%E5%90%8E%E7%A1%AC%E7%9B%98%E6%BB%A1%E4%BA%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1id="diskgenius-清除分区空闲空间后硬盘满了解决方法"><code>DiskGenius</code>清除分区空闲空间后硬盘满了解决方法</h1><ul><li>用命令 <code>chkdsk</code> 解决：比如 <code>D</code> 盘出现了问题<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chkdsk D: /f<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>DiskGenius</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows DiskPart 用法</title>
    <link href="/2025/02/20/Windows%20DiskPart%20%E7%94%A8%E6%B3%95/"/>
    <url>/2025/02/20/Windows%20DiskPart%20%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-diskpart-用法">Windows DiskPart 用法</h1><blockquote><p>【参考文章】</p><p>【1】：AI</p></blockquote><ul><li><p><code>DiskPart</code> 是 Windows系统中用于磁盘分区管理的命令行工具，可以用来查看、创建、删除、扩展和格式化磁盘分区等。下面介绍一些常用的<code>DiskPart</code> 命令和基本用法。</p></li><li><p><strong>注意：</strong> <code>DiskPart</code>操作具有破坏性，某些操作（如删除分区、格式化磁盘）将导致数据丢失。请在操作之前务必备份数据，并谨慎执行命令。## 1. 进入 DiskPart</p></li><li><p>打开“命令提示符”（以管理员身份运行）。<br /></p></li><li><p>在命令行中输入 <code>diskpart</code> 并回车，即可进入<code>DiskPart</code> 交互模式。</p></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">C:</span>\Windows\system32&gt; diskpart<br></code></pre></td></tr></table></figure><p>进入后提示符通常会显示 <code>DISKPART&gt;</code>。 ## 2.列出磁盘和分区</p><ul><li><strong>列出所有磁盘：</strong></li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">DISKPART&gt; <span class="hljs-type">list</span> disk<br></code></pre></td></tr></table></figure><p>这条命令显示系统中连接的所有磁盘以及各磁盘的信息（如大小、是否选中、在线状态、磁盘编号等）。</p><ul><li><strong>选择要操作的磁盘：</strong></li></ul><p>假设要操作磁盘编号为 1 的磁盘，可以输入：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">DISKPART&gt; </span>select <span class="hljs-keyword">disk </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>操作前请仔细确认磁盘编号，避免误操作。</p><ul><li><strong>列出被选中磁盘中的所有分区：</strong></li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">DISKPART&gt; <span class="hljs-type">list</span> partition<br></code></pre></td></tr></table></figure><p>这样可以查看当前被选中磁盘中的所有分区情况。</p><ul><li><strong>列出卷（Volumes）：</strong></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">DISKPART&gt; list <span class="hljs-keyword">volume</span><br></code></pre></td></tr></table></figure><p>显示系统中所有分区卷信息，包括驱动器号、标签、文件系统等。 ## 3.创建新分区</p><ul><li><strong>创建主分区：</strong></li></ul><p>例如，在选中磁盘后，创建一个大小为 1000 MB 的主分区：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">DISKPART&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">partition</span> <span class="hljs-keyword">primary</span> size=<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><ul><li><strong>创建扩展分区：</strong></li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">DISKPART&gt; create <span class="hljs-keyword">partition</span> extended <span class="hljs-keyword">size</span>=<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><ul><li><strong>创建逻辑驱动器（在扩展分区内）：</strong></li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">DISKPART&gt; create partition <span class="hljs-keyword">logical</span> <span class="hljs-built_in">size</span>=<span class="hljs-number">500</span><br></code></pre></td></tr></table></figure><h2 id="删除分区">4. 删除分区</h2><p>确保已经选中要操作的磁盘，再选中目标分区：</p><ul><li><strong>删除分区：</strong></li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">DISKPART&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">partition</span> <span class="hljs-number">2</span><br>DISKPART&gt; <span class="hljs-keyword">delete</span> <span class="hljs-keyword">partition</span><br></code></pre></td></tr></table></figure><p>注意：删除分区会丢失该分区上的所有数据。 ## 5. 格式化分区</p><p>选中目标分区以后，可使用下面命令格式化：</p><ul><li><strong>格式化分区并分配驱动器号：</strong></li></ul><p>假设选中分区后格式化成 <code>NTFS</code> 文件系统：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">DISKPART&gt; <span class="hljs-built_in">format</span> <span class="hljs-built_in">fs</span>=ntfs quick<br></code></pre></td></tr></table></figure><p>选中分区后也可以用命令分配驱动器号：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">DISKPART&gt; assign <span class="hljs-attribute">letter</span>=E<br></code></pre></td></tr></table></figure><h2 id="扩展分区">6. 扩展分区</h2><p>如果需要扩展一个卷的大小（前提条件：该卷必须有连续的未分配空间）：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">DISKPART&gt; </span><span class="hljs-keyword">extend </span>size=<span class="hljs-number">500</span><br></code></pre></td></tr></table></figure><p>上面命令会将当前卷扩展 500 MB。 ## 7. 清除磁盘</p><p>如果需要将磁盘上的所有分区数据清除（这将删除磁盘上所有数据）可以使用：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">DISKPART&gt; <span class="hljs-built_in">clean</span><br></code></pre></td></tr></table></figure><p>该命令仅适用于未选中磁盘而操作选中的磁盘，执行后磁盘将恢复为未分区状态。## 8. 退出 <code>DiskPart</code></p><p>操作完毕后，输入 <code>exit</code> 或关闭命令窗口即可退出：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">DISKPART&gt; <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Diskpart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用命令</title>
    <link href="/2025/02/20/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/02/20/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="常用命令">常用命令</h1><h2 id="合并命令">合并命令</h2><ul><li>把 <code>xxx.jpg</code> 和 <code>xxx.zip</code> 进行合并为<code>xxx.jpg</code> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">copy</span><span class="language-bash"> /b xxx.jpg+xxx.zip xxx.jpg</span><br></code></pre></td></tr></table></figure></li><li>把 <code>file1.txt</code> 和 <code>file2.txt</code> 合并为<code>combined.txt</code> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">file1.txt </span>file2.txt &gt; combined.txt<br></code></pre></td></tr></table></figure> ## 高级重启</li></ul><h3 id="方法一设置重启法">方法一：设置重启法</h3><ul><li>打开【Setting】下的【Update &amp;Security】下的【Recovery】下的【Troubleshoot】下的【Advancedoptions】下的【UEFI Firmware Settings】</li></ul><h3 id="方法二按键重启法">方法二：按键重启法</h3><ul><li>按住 <code>Shift</code> 键不放再用鼠标点击开始菜单的重启按钮</li></ul><h3 id="方法三命令重启法">方法三：命令重启法</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">shutdown</span> <span class="hljs-string">/r</span> <span class="hljs-string">/o</span><br></code></pre></td></tr></table></figure><h2 id="windows-sandbox">Windows Sandbox</h2><ul><li>Windows 10内置沙盘功能(家庭版没有这个功能)</li></ul><h2 id="虚拟键盘">虚拟键盘</h2><ul><li>On Screen Keyboard || Operationally Soft Keyboard</li><li>Windows搜索“屏幕键盘”</li><li>或者在运行中输入：<code>osk</code></li></ul><h2 id="步骤记录器">步骤记录器</h2><ul><li>Problem Steps Recorder</li><li>Windows搜索“步骤记录器”</li><li>或者在运行中输入：<code>psr</code></li></ul><h2 id="任务计划程序">任务计划程序</h2><ul><li>Windows搜索“任务计划程序”</li><li>或者在运行中输入：<code>taskschd.msc</code></li></ul><h2 id="数学公式">数学公式</h2><ul><li>Windows搜索“Math Input Panel”</li><li>或者在运行中输入：<code>mip</code></li></ul><h2 id="字符映射表">字符映射表</h2><ul><li>Windows搜索“字符映射表“</li><li>或者在运行中输入：<code>charmap</code></li></ul><h2 id="专用字符编辑程序">专用字符编辑程序</h2><ul><li>Windows搜索“专用字符编辑程序”</li><li>或者在运行中输入：<code>eudcedit</code></li></ul><h2 id="iexpress-wizard">IExpress Wizard</h2><ul><li>创建自解压执行文件（Self-Extracting Executable Package）的工具</li><li>在运行中输入：<code>iexpress</code></li></ul><h2 id="directx诊断工具">DirectX诊断工具</h2><ul><li>在运行中输入：<code>dxdiag</code></li></ul><h2 id="恶意软件删除工具">恶意软件删除工具</h2><ul><li>在运行中输入：<code>mrt</code></li></ul><h2 id="windows查看激活状态">Windows查看激活状态</h2><ul><li>在运行中输入：<code>slmgr.vbs -xpr</code></li></ul><h2 id="windows-10进行数字激活方法">Windows 10进行数字激活方法</h2><p>在运行中输入：<code>slui 4</code></p><h2 id="windows-10关闭键盘">Windows 10关闭键盘</h2><ul><li>sc config i8042prt start=auto是恢复不了的，</li><li>要用sc config i8042prt start=demand才行。</li><li>修改对应的注册表位置： <figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\i8042prt]<br></code></pre></td></tr></table></figure><code>"Start"=dword:00000003</code> 对应 <code>start= demand</code>服务类型：手动 <code>"Start"=dword:00000004</code> 对应<code>start= disabled</code> 服务类型：禁用</li></ul><h2 id="打开启动列表资料夹">打开启动列表资料夹</h2><ul><li>配置启动项时用到的</li><li>在运行中输入：<code>shell:startup</code></li></ul><h2 id="start-和-explorer-命令的用法"><code>start</code> 和<code>explorer</code> 命令的用法</h2><h3 id="在当前目录打开资源管理器">在当前目录打开资源管理器</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang">explorer .<br>start .<br></code></pre></td></tr></table></figure><h3 id="打开上一级目录">打开上一级目录</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">explorer</span></span> ..<br><span class="hljs-function"><span class="hljs-title">start</span></span> ..<br></code></pre></td></tr></table></figure><h3 id="打开指定目录">打开指定目录</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">explorer C:<span class="hljs-string">\Users\Administrator</span><br>start C:<span class="hljs-string">\Users\Administrator</span><br></code></pre></td></tr></table></figure><h3 id="打开新的终端窗口">打开新的终端窗口</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><h3 id="打开命令行窗口并执行命令">打开命令行窗口并执行命令</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 执行完命令后，不会关闭窗口</span><br>start <span class="hljs-keyword">cmd</span><span class="language-bash"> /k adb shell</span><br><span class="hljs-comment"># 执行完命令后，会直接关闭窗口</span><br>start <span class="hljs-keyword">cmd</span><span class="language-bash"> /c adb shell</span><br></code></pre></td></tr></table></figure><h3 id="打开系统应用">打开系统应用</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">start</span> explorer <span class="hljs-comment"># 打开资源管理器 或使用命令 explorer</span><br><span class="hljs-literal">start</span> control <span class="hljs-comment"># 打开控制面板 或使用命令 control</span><br><span class="hljs-literal">start</span> %windir%\system32\Taskmgr.exe <span class="hljs-comment"># 打开任务管理器 </span><br><span class="hljs-comment"># 或使用命令 %windir%\system32\Taskmgr.exe</span><br></code></pre></td></tr></table></figure><h3 id="打开应用程序">打开应用程序</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">start</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;应用完整路径&quot;</span><br><span class="hljs-comment"># 注意，此处start后为空格，然后是空的双引号，</span><br><span class="hljs-comment"># 之后再接一个空格，最后是应用的完整路径</span><br></code></pre></td></tr></table></figure><h2 id="hyper-v-虚拟机">Hyper-V 虚拟机</h2><ul><li>Windows 10内置虚拟机(家庭版没有这个功能)</li></ul><h2 id="windows-10-提示网络无法连接解决方法">Windows 10提示网络无法连接解决方法</h2><ul><li>修改注册表： <figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\InternetEnableActiveProbing=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="组策略编辑器local-group-policy-editor">组策略编辑器（Local GroupPolicy Editor）</h2><ul><li>可以用于配置本地计算机的组策略设置（注意：在家庭版 Windows中可能不存在此程序）。</li><li>运行输入：<code>gepdit.msc</code></li></ul><h2 id="服务管理器">服务管理器</h2><ul><li>用于查看、启动、停止、配置系统中的各项服务。</li><li>运行输入：<code>services.msc</code></li></ul><h2 id="本地用户和组管理工具">本地用户和组管理工具</h2><ul><li>可以管理本机的用户账户和用户组（注意：部分家庭版 Windows没有此组件）。</li><li>运行输入：<code>lusrmgr.msc</code></li></ul><h2 id="注册表编辑器">注册表编辑器</h2><ul><li>用于查看和编辑 Windows系统注册表，对系统高级配置进行修改，操作前需小心。</li><li>运行输入：<code>regedit</code></li></ul><h2 id="程序和功能">程序和功能</h2><ul><li>“程序和功能”（旧版称为“添加或删除程序”），用于卸载或修改已安装的程序。</li><li>运行输入：<code>appwiz.cpl</code></li></ul><h2 id="用户账户设置">用户账户设置</h2><ul><li>可配置用户登录选项，如取消或设置自动登录、修改账户信息等。</li><li>运行输入：<code>netplwiz</code></li></ul><h2 id="系统信息工具">系统信息工具</h2><ul><li>可以查看计算机硬件资源、组件以及软件环境的详细信息。</li><li>运行输入：<code>msinfo32</code></li></ul><h2 id="系统配置实用程序">系统配置实用程序</h2><ul><li>用于管理启动项、系统服务及其他系统启动设置，便于故障排除。</li><li>运行输入：<code>msconfig</code></li></ul><h2 id="internet-选项设置">Internet 选项设置</h2><ul><li>在此可以设置浏览器（InternetExplorer）的网络连接、隐私、安全等选项。</li><li>运行输入：<code>inetcpl.cpl</code></li></ul><h2 id="计算机管理">计算机管理</h2><ul><li>整合了磁盘管理、事件查看器、服务和应用程序等多个系统管理工具。</li><li>运行输入：<code>compmgmt.msc</code></li></ul><h2 id="磁盘管理工具">磁盘管理工具</h2><ul><li>用于管理分区、格式化磁盘、调整卷大小等操作。</li><li>运行输入：<code>diskmgmt.msc</code></li></ul><h2 id="事件查看器">事件查看器</h2><ul><li>用于查看系统事件日志、应用程序日志及安全日志，帮助排查和分析问题。</li><li>运行输入：<code>eventvwr.msc</code></li></ul><h2 id="设备管理器">设备管理器</h2><ul><li>用于查看和管理系统中所有硬件设备的驱动程序，进行禁用、卸载或更新操作。</li><li>运行输入：<code>devmgmt.msc</code></li></ul><h2 id="系统属性">系统属性</h2><ul><li>可以进行系统保护、远程设置、环境变量等的配置。</li><li>运行输入：<code>sysdm.cpl</code></li></ul><h2 id="控制面板">控制面板</h2><ul><li>从中可以进入各类系统设置和管理工具。</li><li>运行输入：<code>control</code></li></ul><h2 id="windows-防火墙">Windows 防火墙</h2><ul><li>进行防火墙规则配置及网络连接安全设置。</li><li>运行输入：<code>firewall.cpl</code></li></ul><h2 id="电源选项">电源选项</h2><ul><li>用于选择电源计划、调整显示及硬盘休眠等设置。</li><li>运行输入：<code>powercfg.cpl</code></li></ul><h2 id="网络连接">网络连接</h2><ul><li>可直接管理和配置网络适配器的属性和状态。</li><li>运行输入：<code>ncpa.cpl</code></li></ul><h2 id="鼠标属性">鼠标属性</h2><ul><li>可以调整鼠标指针速度、双击速度、滚轮设置等。</li><li>运行输入：<code>main.cpl</code></li></ul><h2 id="远程桌面连接">远程桌面连接</h2><ul><li>用于连接远程计算机，进行远程管理或技术支持。</li><li>运行输入：<code>mstsc</code></li></ul><h2 id="磁盘碎片整理程序">磁盘碎片整理程序</h2><ul><li>用于优化磁盘性能，对硬盘进行碎片整理。</li><li>运行输入：<code>dfrgui</code></li></ul><h2 id="windows-功能">Windows 功能</h2><ul><li>可以启用或关闭 Windows 系统的内置功能和组件。</li><li>运行输入：<code>optionalfeatures</code></li></ul><h2 id="性能监视器">性能监视器</h2><ul><li>用于实时监控系统性能指标，包括处理器、内存、磁盘等资源使用情况。</li><li>运行输入：<code>perfmon</code></li></ul><h2 id="任务计划程序-1">任务计划程序</h2><ul><li>用于创建和管理计划任务，实现自动化操作。</li><li>运行输入：<code>taskschd.msc</code></li></ul><h2 id="本地安全策略">本地安全策略</h2><ul><li>用于设置和调整本机的安全策略（多数版本仅适用于专业版或企业版）。</li><li>运行输入：<code>secpol.msc</code></li></ul><h2 id="写字板">写字板</h2><ul><li>用于简单的文本编辑。</li><li>运行输入：<code>write</code></li></ul><h2 id="屏幕键盘">屏幕键盘</h2><ul><li>帮助在不使用物理键盘时输入字符或进行交互操作。</li><li>运行输入：<code>osk</code></li></ul><h2 id="放大镜">放大镜</h2><ul><li>用于放大屏幕特定区域，方便视力障碍用户使用。</li><li>运行输入：<code>magnify</code></li><li>或者用 <code>win</code> 键加 <code>+</code> 和 <code>-</code> 和<code>ESC</code> 键进行放大缩小和退出</li></ul><h2 id="讲述人">讲述人</h2><ul><li>提供屏幕阅读服务，帮助低视力或盲人用户使用计算机。</li><li>运行输入：<code>narrator</code></li></ul><h2 id="windows-定时关机">Windows 定时关机</h2><ul><li>可以用 <code>shutdown -s -f -t 时间秒数</code></li><li>也可以创建任务的方式： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /create /tn shut /tr <span class="hljs-string">&quot;shutdown -s -f&quot;</span> /sc once /st 23:00<br><span class="hljs-comment"># 解释下这个命令的意思</span><br><span class="hljs-comment"># /create表示创建</span><br><span class="hljs-comment"># /tn表示创建的任务叫什么名字</span><br><span class="hljs-comment"># /tr引号表示具体要执行什么命令，因为schtasks本身也可以带/s参数，</span><br><span class="hljs-comment"># 所以用引号把“shutdown -s -f”放在一起表示这是一条子命令，</span><br><span class="hljs-comment"># 而带的参数并不是schtasks的参数，一定要加参数</span><br><span class="hljs-comment"># /sc表示执行的频率，once就是执行一次</span><br><span class="hljs-comment"># /st表示开始执行的时间</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Command</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编辑mo文件的方法</title>
    <link href="/2025/02/14/%E7%BC%96%E8%BE%91mo%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2025/02/14/%E7%BC%96%E8%BE%91mo%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="编辑-mo-文件的方法">编辑 <code>mo</code> 文件的方法</h1><ul><li>SlideShowProDirector的语言文件是以mo和po为结尾的，po的话可以用EmEditor打开，但是mo的话，因为是Linux系统下的文件，所以需要反编译成po文件才能打开。</li></ul><h2 id="一准备工具">一、准备工具</h2><p>1.编译反编译软件 <code>gettext</code>下载地址：http://gnuwin32.sourceforge.net/packages/gettext.htm</p><p>2.<code>po</code> 文件的编辑软件 <code>poedit</code>下载地址：http://sourceforge.net/projects/poedit/</p><h2 id="二使用方法">二、使用方法</h2><p>1.下载好的 <code>gettext</code> 是一个安装文件，默认安装路径是<code>C:\Program Files\GnuWin32\</code> ，当你需要把D盘根目录下的<code>default.mo</code> 反编译成 <code>default.po</code>时，你可以在开始菜单的 “运行”中输入 <code>cmd</code>，然后<code>ms-dos</code> 界面下输入引号中的内容<code>C:\Program Files\GnuWin32\bin\msgunfmt.exe d:\default.mo -o d:\default.po</code>即可完成反编译。</p><p>2.编译的 话有两种办法，第一种就是仍旧使用 <code>gettext</code>软件，输入<code>C:\Program Files\GnuWin32\bin\msgfmt.exe -o d:\default.mo d:\default.po</code>即可完成编译工作。注：用此方法反编译后再编译回来的文件和源文件是完全相同的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Editor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Encoding conversion method</title>
    <link href="/2025/02/03/Encoding%20conversion%20method/"/>
    <url>/2025/02/03/Encoding%20conversion%20method/</url>
    
    <content type="html"><![CDATA[<h1 id="编码转换方法">编码转换方法</h1><blockquote><p>【参考文章】</p><p>【1】：AI</p></blockquote><h2 id="方法一使用-iconv-工具">方法一：使用 <code>iconv</code> 工具</h2><ul><li><code>iconv</code>是一个用于转换文本文件编码的命令行工具。它可以将文件从一种字符编码转换为另一种字符编码，常用于处理不同编码格式的文本文件，以确保它们能够正确显示和处理。</li></ul><h3 id="主要作用">主要作用</h3><ul><li>转换文件的字符编码，例如从 <code>UTF-8</code> 转换为<code>ISO-8859-1</code>。</li><li>处理不同语言和地区的文本文件，以确保兼容性。</li></ul><h3 id="基本用法">基本用法</h3><ul><li><p><code>iconv</code> 的基本语法如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iconv -f &lt;原编码&gt; -t &lt;目标编码&gt; &lt;输入文件&gt; -o &lt;输出文件&gt;<br></code></pre></td></tr></table></figure></p></li><li><p><code>-f &lt;原编码&gt;</code>：指定输入文件的原字符编码。</p></li><li><p><code>-t &lt;目标编码&gt;</code>：指定输出文件的目标字符编码。</p></li><li><p><code>&lt;输入文件&gt;</code>：要转换的源文件。</p></li><li><p><code>-o &lt;输出文件&gt;</code>：指定转换后输出的文件名。</p></li></ul><h3 id="示例">示例</h3><ul><li><p>将一个 UTF-8 编码的文件转换为 ISO-8859-1 编码：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iconv -f UTF-8 -t ISO-8859-1 input.txt -o output.txt<br></code></pre></td></tr></table></figure></p></li><li><p>如果你想直接在终端输出转换后的内容，可以省略 <code>-o</code>选项：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iconv -f UTF-8 -t ISO-8859-1 input.txt<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="常用编码">常用编码</h3><ul><li>UTF-8</li><li>ISO-8859-1</li><li>GBK</li><li>UTF-16</li></ul><h3 id="注意事项">注意事项</h3><ul><li><p>在转换时，确保目标编码能够表示原编码中的所有字符，否则可能会导致数据丢失或乱码。</p></li><li><p>可以使用 <code>iconv -l</code> 命令列出所有支持的编码。</p></li><li><p>通过使用<code>iconv</code>，你可以方便地处理和转换不同编码格式的文本文件。</p></li></ul><h2 id="方法二使用-enca-工具">方法二：使用 <ahref="https://github.com/nijel/enca"><code>enca</code></a> 工具</h2><ul><li>这个工具一般用在 Linux 系统下</li><li><code>enca</code>（Extremely Naive CharsetAnalyser）是一个用于检测和转换文本文件字符编码的命令行工具。它特别适用于处理多种字符编码的文本文件，尤其是在处理东欧语言时非常有用。</li></ul><h3 id="主要作用-1">主要作用</h3><ul><li>自动检测文本文件的字符编码。</li><li>将文件从一种字符编码转换为另一种字符编码。</li></ul><h3 id="基本用法-1">基本用法</h3><ul><li><p><code>enca</code> 的基本语法如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">enca [选项] &lt;文件&gt;<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="常用选项">常用选项</h3><ul><li><code>-L &lt;语言&gt;</code>：指定语言，以帮助更准确地检测编码。例如，<code>-L zh</code>用于中文，<code>-L pl</code> 用于波兰语等。</li><li><code>-x &lt;目标编码&gt;</code>：将文件转换为指定的目标编码。</li><li><code>-o &lt;输出文件&gt;</code>：指定转换后输出的文件名。</li></ul><h3 id="示例-1">示例</h3><ul><li><p>检测文件编码：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">enca filename.txt<br></code></pre></td></tr></table></figure></p></li><li><p>将文件从一种编码转换为另一种编码（例如，从 ISO-8859-2 转换为UTF-8）：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">enca -x UTF-8 filename.txt -o output.txt<br></code></pre></td></tr></table></figure></p></li><li><p>指定语言进行编码检测：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">enca -L zh filename.txt<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="注意事项-1">注意事项</h3><ul><li><p><code>enca</code>主要用于文本文件，处理二进制文件可能会导致错误。</p></li><li><p>在某些情况下，<code>enca</code>可能无法准确检测编码，特别是当文件内容较少或包含多种编码时。</p></li><li><p>通过使用<code>enca</code>，你可以方便地检测和转换文本文件的字符编码，确保文件在不同环境中的兼容性。</p></li></ul><h2 id="方法三使用-uconv-工具">方法三：使用 <code>uconv</code> 工具</h2><ul><li>这个工具一般用在 Linux 系统下</li><li><code>uconv</code> 是一个用于字符编码转换的命令行工具，通常与ICU（International Components forUnicode）库一起使用。它可以处理多种字符编码和文本转换任务，支持 Unicode和其他字符集之间的转换。</li></ul><h3 id="主要作用-2">主要作用</h3><ul><li>转换文本文件的字符编码。</li><li>处理 Unicode 字符串的格式化和转换。</li><li>支持多种字符集和编码标准。</li></ul><h3 id="基本用法-2">基本用法</h3><ul><li><p><code>uconv</code> 的基本语法如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uconv [选项] &lt;输入文件&gt; -o &lt;输出文件&gt;<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="常用选项-1">常用选项</h3><ul><li><code>-f &lt;原编码&gt;</code>：指定输入文件的原字符编码。</li><li><code>-t &lt;目标编码&gt;</code>：指定输出文件的目标字符编码。</li><li><code>-o &lt;输出文件&gt;</code>：指定转换后输出的文件名。</li><li><code>-h</code>：显示帮助信息。</li></ul><h3 id="示例-2">示例</h3><ul><li><p>将一个 UTF-8 编码的文件转换为 ISO-8859-1 编码：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uconv -f UTF-8 -t ISO-8859-1 -o output.txt input.txt<br></code></pre></td></tr></table></figure></p></li><li><p>如果你想直接在终端输出转换后的内容，可以省略 <code>-o</code>选项：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uconv -f UTF-8 -t ISO-8859-1 input.txt<br></code></pre></td></tr></table></figure></p></li><li><p>查看帮助信息：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uconv -h<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="注意事项-2">注意事项</h3><ul><li><p><code>uconv</code> 是一个功能强大的工具，适用于需要处理 Unicode和其他字符集的场景。</p></li><li><p>确保目标编码能够表示原编码中的所有字符，以避免数据丢失或乱码。</p></li><li><p>通过使用<code>uconv</code>，你可以方便地进行字符编码转换，确保文本文件在不同环境中的兼容性。</p></li></ul><h2 id="方法四使用-nkf-工具">方法四：使用 <ahref="https://github.com/nurse/nkf"><code>nkf</code></a> 工具</h2><ul><li><code>nkf</code>（Network KanjiFilter）是一个用于处理和转换文本文件字符编码的命令行工具，特别适用于日文字符编码的转换。它可以处理多种字符编码，包括Shift_JIS、EUC-JP、UTF-8 等。</li></ul><h3 id="主要作用-3">主要作用</h3><ul><li>转换文本文件的字符编码。</li><li>处理和转换日文字符集。</li><li>自动检测文件的字符编码。</li></ul><h3 id="基本用法-3">基本用法</h3><ul><li><p><code>nkf</code> 的基本语法如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nkf [选项] &lt;输入文件&gt;<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="常用选项-2">常用选项</h3><ul><li><code>-s</code>：将输入文件转换为 Shift_JIS 编码。</li><li><code>-e</code>：将输入文件转换为 EUC-JP 编码。</li><li><code>-w</code>：将输入文件转换为 UTF-8 编码。</li><li><code>-g</code>：检测输入文件的编码并输出。</li><li><code>-o &lt;输出文件&gt;</code>：指定转换后输出的文件名。</li><li><code>-L</code>：将换行符转换为 Unix 风格（LF）。</li><li><code>-m</code>：将文件转换为 MIME 编码格式。</li></ul><h3 id="示例-3">示例</h3><ul><li><p>将一个 UTF-8 编码的文件转换为 Shift_JIS 编码：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nkf -s input.txt &gt; output.txt<br></code></pre></td></tr></table></figure></p></li><li><p>将一个 Shift_JIS 编码的文件转换为 UTF-8 编码：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nkf -w input.txt &gt; output.txt<br></code></pre></td></tr></table></figure></p></li><li><p>检测文件的编码：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nkf -g input.txt<br></code></pre></td></tr></table></figure></p></li><li><p>直接在终端输出转换后的内容：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nkf -w input.txt<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="注意事项-3">注意事项</h3><ul><li><p><code>nkf</code>特别适合处理日文文本，但也可以用于其他语言的字符编码转换。</p></li><li><p>在转换时，确保目标编码能够表示原编码中的所有字符，以避免数据丢失或乱码。</p></li><li><p>通过使用<code>nkf</code>，你可以方便地处理和转换文本文件的字符编码，确保文件在不同环境中的兼容性。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Encode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GraalVM Generate Executable Program</title>
    <link href="/2024/09/22/GraalVM%20Java%20Generate%20Executable/"/>
    <url>/2024/09/22/GraalVM%20Java%20Generate%20Executable/</url>
    
    <content type="html"><![CDATA[<h1 id="graalvm-生成可执行程序windows乱码解决">GraalVM生成可执行程序（Windows，乱码解决）</h1><blockquote><p>【参考文章】</p><p>【1】：<ahref="https://www.graalvm.org/latest/getting-started/windows/">Installationon Windows Platforms</a></p><p>【2】：https://github.com/oracle/graal/issues/6724</p><p>【3】：https://github.com/oracle/graal/issues/2492</p><p>【4】：https://docs.oracle.com/en/java/javase/22/intl/supported-encodings.html</p></blockquote><p>环境准备：Java，Visual Studio Build Tools and WindowsSDK，Maven等，可以参考 <ahref="https://www.graalvm.org/latest/getting-started/windows/">Installationon Windows Platforms</a></p><ul><li>当我学习 Spring 时，接触到了一个东西叫做 GraalVM 用于生成可执行的Java 程序</li><li>这个东西也可以用在普通的 jar 包，或者 class 文件上</li></ul><h2 id="普通-class-文件编成-exe">普通 class 文件编成 exe</h2><h3 id="创建-java-源文件">创建 java 源文件</h3><ul><li>这一步非常重要，<strong>源文件要用 ASCII 码进行保存</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;你好，世界！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译源码，指定格式：<code>javac -encoding GBK Main.java</code></p><p>在开始菜单打开<code>x64 Native Tools Command Prompt for VS xxxx</code> 进入 native环境</p><p>切换到 <code>Main.class</code> 所在的目录</p><p>输入命令： <code>native-image -J"-Dfile.encoding=GBK" Main</code>，Main 是你的 class 文件名，<strong>注意有双引号</strong></p><p><strong>一定要指定编码方式为 <code>GBK</code>不然运行中文会有乱码问题</strong></p><p>运行，没问题</p><h2 id="jar-包文件编成-exe">jar 包文件编成 exe</h2><p>这里使用 Maven，下面是 <code>pom.xml</code>文件的一部分配置，可以参考</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file.encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">file.encoding</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 指定主类 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>org.wind.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主类的内容：Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wind;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;你好，世界！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到 <code>pom.xml</code>文件目录下运行命令：<code>mvn clean package</code></p><p>此时会生成一个 <code>jar</code> 包，例如：<code>Main.jar</code></p><p>先用 <code>java -jar Main.jar</code>运行一下看看有没有问题，再进行下一步，如果显示缺少主类请看下面的方法</p><p>用压缩包程序打开 <code>jar</code> 包，打开目录 <code>META-INF</code>找到 <code>MANIFEST.MF</code> 文件，编辑，在里面手动指定主类，即指定main 方法所在的类：比如我的 main 方法写在类 <code>org.wind.Main</code>那么在 <code>MANIFEST.MF</code> 添加以下这一行：</p><p><code>Main-Class: org.wind.Main</code></p><p>再次运行，应该没有无主类的问题了，如果有其他问题，再上网找，这里不再赘述</p><p>接下来，同样的，在开始菜单打开<code>x64 Native Tools Command Prompt for VS xxxx</code> 进入 native环境</p><p>切换到 <code>jar</code>包所在目录，运行命令：<code>native-image -J"-Dfile.encoding=GBK" -jar .\Main.jar</code><strong>注意有双引号</strong></p><p><strong>一定要指定编码方式为 <code>GBK</code>不然运行中文会有乱码问题</strong></p><p>运行，没问题</p><p>如果在 Spring 上时，解决乱码方法很简单，Maven 打包时指定使用 nativeprofile 就可以了</p><p>运行aot提前处理命令：<code>mvn springboot:process-aot</code></p><p>运行native打包：<code>mvn -Pnative native:build</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>GraalVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat(Catalina) Install</title>
    <link href="/2024/09/22/Tomcat(Catalina)%20Install/"/>
    <url>/2024/09/22/Tomcat(Catalina)%20Install/</url>
    
    <content type="html"><![CDATA[<h1 id="tomcatcatalina-安装">Tomcat(Catalina) 安装</h1><h2 id="下载安装配置环境">下载安装配置环境</h2><ul><li>下载 <a href="https://tomcat.apache.org/">Tomcat</a></li><li>配置环境<ahref="https://tomcat.apache.org/tomcat-10.1-doc/introduction.html">官网</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">setx JAVA_HOME=YOUR_JAVAHOME<br>setx PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>;%JAVA_HOME%\bin&quot;</span><br>setx CATALINA_HOME=<span class="hljs-string">&quot;YOUR_TOMCATHOME&quot;</span><br></code></pre></td></tr></table></figure><h2 id="启动">启动</h2><ul><li>bin 命令存放目录，可用于启动服务器，关闭服务器</li><li>conf 配置目录</li><li>lib 程序库目录</li><li>logs 日志目录</li><li>temp 临时文件目录</li><li>webapps 放web应用目录</li><li>work 编译后的class文件</li></ul><blockquote><p>启动前必须配置 JAVA_HOME 和 CATALINA_HOME</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动</span><br>startup.bat<br></code></pre></td></tr></table></figure><p>https://tomcat.apache.org/tomcat-10.1-doc/config/server.html port</p><p>https://tomcat.apache.org/tomcat-10.1-doc/config/http.htmlenforceEncodingInGetWriter</p><h2 id="关闭">关闭</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭服务器</span><br>shutdown.bat<br><span class="hljs-comment">#可改名，防止与 windows 中的 shutdown 命令冲突</span><br></code></pre></td></tr></table></figure><h2 id="解决乱码问题">解决乱码问题</h2><p>改 %CATALINA_HOME%.properties</p><p>java.util.logging.ConsoleHandler.encoding = GBK</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;6.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- servlet 描述信息 --&gt;</span><br><span class="hljs-comment">&lt;!-- 任何一个 servlet 都对应一个 servlet-mapping --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>wind<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这个位置必须是带有包名的全限定类名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wind.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- servlet 映射信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这个也是随便的，不过这里写的内容要和上面的一样。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>wind<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这里需要一个路径 --&gt;</span><br><span class="hljs-comment">&lt;!-- 这个路径唯一的要求是必须以 / 开始 --&gt;</span><br><span class="hljs-comment">&lt;!-- 当前这个路径可以随便写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>wind/wind<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">webapproot<br>|<span class="hljs-params">----WEB-INF</span><br>|<span class="hljs-params">----classes</span><span class="hljs-params">(存放字节码)</span><br>|<span class="hljs-params">----lib</span><span class="hljs-params">(第三方jar包)</span><br>|<span class="hljs-params">----web</span>.xml<span class="hljs-params">(注册Servlet)</span><br>|<span class="hljs-params">----html</span><br>|<span class="hljs-params">----css</span><br>|<span class="hljs-params">----javascript</span><br>|<span class="hljs-params">----image</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic Formular</title>
    <link href="/2024/09/14/Basic%20Formular/"/>
    <url>/2024/09/14/Basic%20Formular/</url>
    
    <content type="html"><![CDATA[<h1 id="离散数学一些公式">离散数学一些公式</h1><h2 id="基本等值式">基本等值式</h2><ol type="1"><li>幂等律：<span class="math inline">\(A \Leftrightarrow A \vee A, A\Leftrightarrow A \wedge A\)</span></li><li>交换律：<span class="math inline">\(A \vee B \Leftrightarrow B \veeA , A \wedge B \Leftrightarrow B \wedge A\)</span></li><li>结合律：<span class="math inline">\((A \vee B) \vee C\Leftrightarrow A \vee (B \vee C) , (A \wedge B) \wedge C\Leftrightarrow A \wedge (B \wedge C)\)</span></li><li>分配律：$A (B C) (A B) (A C), A (B C) (A B) (A C) $</li><li>德摩根律：<span class="math inline">\(\neg (A \vee B)\Leftrightarrow \neg A \wedge \neg B , \neg(A \wedge B) \Leftrightarrow\neg A \vee \neg B\)</span></li><li>吸收律：<span class="math inline">\(A \vee (A \wedge B)\Leftrightarrow A , A \wedge (A \vee B) \Leftrightarrow A\)</span></li><li>零律：<span class="math inline">\(A \vee 1 \Leftrightarrow 1 , A\wedge 0 \Leftrightarrow 0\)</span></li><li>同一律：<span class="math inline">\(A \vee 0 \Leftrightarrow A, A\wedge 1 \Leftrightarrow A\)</span></li><li>排中律：<span class="math inline">\(A \vee \neg A \Leftrightarrow1\)</span></li><li>矛盾律：<span class="math inline">\(A \wedge \neg A \Leftrightarrow0\)</span></li><li>双重否定律：<span class="math inline">\(\neg \neg A \LeftrightarrowA\)</span></li><li>蕴涵等值式：<span class="math inline">\(A \rightarrow B\Leftrightarrow \neg A \vee B\)</span></li><li>等价等值式：<span class="math inline">\(A \leftrightarrow B\Leftrightarrow (A \rightarrow B) \wedge (B \rightarrow A)\)</span></li><li>等价否定等值式：<span class="math inline">\(A \leftrightarrow B\Leftrightarrow \neg A \leftrightarrow \neg B\)</span></li><li>假言易位：<span class="math inline">\(A \rightarrow B\Leftrightarrow \neg B \rightarrow \neg A\)</span></li><li>归谬论：<span class="math inline">\((A \rightarrow B) \wedge (A\rightarrow \neg B) \Leftrightarrow \neg A\)</span></li></ol><h2 id="逻辑公式类型">逻辑公式类型</h2><ul><li>永真式</li><li>永假式</li><li>可满足式</li></ul><h2 id="推理定律">推理定律</h2><h3 id="重言蕴含式">重言蕴含式</h3><ol type="1"><li><span class="math inline">\(A \Rightarrow (A \vee B)\)</span>附加律</li><li><span class="math inline">\((A \wedge B) \Rightarrow A\)</span>化简律</li><li><span class="math inline">\((A \rightarrow B) \wedge A \RightarrowB\)</span> 假言推理</li><li><span class="math inline">\((A \rightarrow B) \wedge \neg B\Rightarrow \neg A\)</span> 拒取式</li><li><span class="math inline">\((A \vee B) \wedge \neg B \RightarrowA\)</span> 析取三段论</li><li><span class="math inline">\((A \rightarrow B) \wedge (B \rightarrowC) \Rightarrow (A \rightarrow C)\)</span> 假言三段论</li><li><span class="math inline">\((A \leftrightarrow B) \wedge (B\leftrightarrow C) \Rightarrow (A \leftrightarrow C)\)</span>等价三段论</li><li><span class="math inline">\((A \rightarrow B) \wedge (C \rightarrowD) \wedge (A \vee C) \Rightarrow (B \vee D)\)</span> 构造性二难</li><li><span class="math inline">\((A \rightarrow B) \wedge (\neg A\rightarrow B) \wedge (A \vee \neg A) \Rightarrow B\)</span>构造性二难（特殊形式）</li><li><span class="math inline">\((A \rightarrow B) \wedge (C \rightarrowD) \wedge (\neg B \vee \neg D) \Rightarrow (\neg A \vee \neg C)\)</span>破坏性二难</li></ol><h3 id="推理规则">推理规则</h3><ol type="1"><li><p>前提引入规则：在证明的任何步骤上都可以引入前提</p></li><li><p>结论引入规则：在证明的任何步骤上所得到的结论都可以作为后继证明的前提</p></li><li><p>置换规则：在证明的任何步骤上，命题公式中的子公式都可以用与之等值的公式置换，得到公式序列中的又一个公式</p></li><li><p>假言推理规则：<span class="math display">\[\begin{align} &amp;A\rightarrow B \\ &amp;A \\ \therefore \, &amp;B\end{align}\]</span></p></li><li><p>附加规则：<span class="math display">\[\begin{align} &amp;A \\\therefore \, &amp;A \vee B \end{align}\]</span></p></li><li><p>化简规则：<span class="math display">\[\begin{align} &amp;A\wedge B \\ \therefore \, &amp;A \end{align}\]</span></p></li><li><p>拒取式规则：<span class="math display">\[\begin{align} &amp;A\rightarrow B \\ &amp;\neg B \\ \therefore \, &amp;\neg A\end{align}\]</span></p></li><li><p>假言三段论规则：<span class="math display">\[\begin{align} &amp;A\rightarrow B \\ &amp;B \rightarrow C \\ \therefore \, &amp;A\rightarrow C \end{align}\]</span></p></li><li><p>析取三段论规则：<span class="math display">\[\begin{align} &amp;A\vee B \\ &amp;\neg B \\ \therefore \, &amp;A\end{align}\]</span></p></li><li><p>构造性二难推理规则：<span class="math display">\[\begin{align}&amp;A \rightarrow B \\ &amp;C \rightarrow D \\ &amp;A \vee C \\\therefore \, &amp;B \vee D \end{align}\]</span></p></li><li><p>破坏性二难推理规则：<span class="math display">\[\begin{align}&amp;A \rightarrow B \\ &amp;C \rightarrow D \\ &amp;\neg B \vee \neg D\\ \therefore \, &amp;\neg A \vee \neg C \end{align}\]</span></p></li><li><p>合取引入规则：<span class="math display">\[\begin{align} &amp;A\\ &amp;B \\ \therefore \, &amp;A \wedge B \end{align}\]</span></p></li></ol><h3 id="在自然推理系统p中构造证明">在自然推理系统P中构造证明</h3><ul><li>P 中构造证明就是由一组 P中公式作为前提，利用P中的规则，推出结论。</li><li>构造形式结构 <span class="math inline">\(A_1 \wedge A_2 \wedge\cdots \wedge A_k \rightarrow B\)</span> 的推理的书写方法：<ul><li>前提：<span class="math inline">\(A_1 , A_2 , \cdots ,A_k\)</span></li><li>结论：<span class="math inline">\(B\)</span></li></ul></li><li>证明方法：<ul><li><p>直接证明法</p></li><li><p>附加前提法</p><ul><li><p>有时推理的形式结构具有如下形式 ：</p><ul><li>前提：<span class="math inline">\(A_1 , A_2 , \cdots ,A_k\)</span></li><li>结论：<span class="math inline">\(C \rightarrow B\)</span></li></ul></li><li><p>可将结论中的前件也作为推理的前提，使结论只为 <spanclass="math inline">\(B\)</span></p><ul><li>前提：<span class="math inline">\(A_1 , A_2 , \cdots , A_k ,C\)</span></li><li>结论：<span class="math inline">\(B\)</span></li></ul></li><li><p>理由：</p><p>​ <span class="math display">\[\begin{align} &amp;(A_1 \wedge A_2\wedge \cdots \wedge A_k) \rightarrow (C \rightarrow B) \\&amp;\Leftrightarrow \neg (A_1 \wedge A_2 \wedge \cdots \wedge A_k) \vee(\neg C \vee B) \\ &amp;\Leftrightarrow \neg (A_1 \wedge A_2 \wedge\cdots \wedge A_k \wedge C) \vee B \\ &amp;\Leftrightarrow (A_1 \wedgeA_2 \wedge \cdots \wedge A_k \wedge C) \rightarrow B\end{align}\]</span></p></li></ul></li><li><p>归谬法（或称反证法）</p><ul><li><p>有时推理的形式结构具有如下形式：</p><ul><li>前提：<span class="math inline">\(A_1 , A_2 , \cdots ,A_k\)</span></li><li>结论：<span class="math inline">\(B\)</span></li></ul></li><li><p>如果将 <span class="math inline">\(\neg B\)</span>作为前提能推出矛盾来，则说明推理正确</p><ul><li>前提：<span class="math inline">\(A_1 , A_2 , \cdots , A_k , \negB\)</span></li><li>结论：矛盾</li></ul></li><li><p>理由：</p><p>​ <span class="math display">\[\begin{align} A_1 \wedge A_2 \wedge&amp; \cdots \wedge A_k \rightarrow B \\ \Leftrightarrow &amp;\neg (A_1\wedge A_2 \wedge \cdots \wedge A_k) \vee B \\ \Leftrightarrow &amp;\neg(A_1 \wedge A_2 \wedge \cdots \wedge A_k \wedge \neg B)\end{align}\]</span></p></li><li><p>若 <span class="math inline">\(A_1 \wedge A_2 \wedge \cdots\wedge A_k \wedge \neg B\)</span> 为矛盾式，则说明 <spanclass="math inline">\((A_1 \wedge A_2 \wedge \cdots \wedge A_k \wedge\rightarrow B)\)</span> 为重言式</p></li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Neovim Configure Lsp</title>
    <link href="/2024/08/25/Neovim%E9%85%8D%E7%BD%AElsp/"/>
    <url>/2024/08/25/Neovim%E9%85%8D%E7%BD%AElsp/</url>
    
    <content type="html"><![CDATA[<h1 id="neovim-配置-lsp">Neovim 配置 lsp</h1><h2 id="配置前准备">配置前准备</h2><ul><li><p>进入 neovim 检查环境 <code>:checkhealth</code>发现缺少配置文件</p></li><li><p>按照提示，进入 neovim查看配置文件应该存放的位置：<code>:help config</code></p></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Unix</span>                    <span class="hljs-operator">~/</span>.config<span class="hljs-regexp">/nvim/</span><span class="hljs-keyword">init</span>.vim         (or <span class="hljs-keyword">init</span>.lua)<br><span class="hljs-type">Windows</span>                 <span class="hljs-operator">~/</span><span class="hljs-type">AppData</span><span class="hljs-regexp">/Local/</span>nvim<span class="hljs-operator">/</span><span class="hljs-keyword">init</span>.vim   (or <span class="hljs-keyword">init</span>.lua)<br><span class="hljs-variable">$XDG_CONFIG_HOME</span>        <span class="hljs-variable">$XDG_CONFIG_HOME</span><span class="hljs-regexp">/nvim/</span><span class="hljs-keyword">init</span>.vim  (or <span class="hljs-keyword">init</span>.lua)<br></code></pre></td></tr></table></figure><ul><li>这里使用 Lua 来进行配置，不用 Lua 用什么 Neovim</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建配置文件的文件夹</span><br><span class="hljs-built_in">mkdir</span> -p ~/.config/nvim<br><span class="hljs-comment"># 用于存储配置文件模块的文件夹</span><br><span class="hljs-built_in">mkdir</span> -p ~/.config/nvim/lua<br><span class="hljs-comment"># 创建配置文件</span><br><span class="hljs-built_in">touch</span> ~/.config/nvim/init.lua<br></code></pre></td></tr></table></figure><ul><li>到官网安装 packer，找到 Quickstart</li></ul><blockquote><p>Unix, Linux Installation</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth 1 https://github.com/wbthomason/packer.nvim\<br> ~/.local/share/nvim/site/pack/packer/start/packer.nvim<br></code></pre></td></tr></table></figure><blockquote><p>Windows Powershell Installation</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/wbthomason/packer.nvim <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:LOCALAPPDATA\nvim-data\site\pack\packer\start\packer.nvim&quot;</span><br></code></pre></td></tr></table></figure><h2 id="安装插件">安装插件</h2><ul><li>添加插件模块文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> ~/.config/nvim/lua/plugins.lua<br></code></pre></td></tr></table></figure><ul><li>找到并复制官方的实例代码，将其添加到 <code>plugins.lua</code>中：</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- This file can be loaded by calling `lua require(&#x27;plugins&#x27;)` from your init.vim</span><br><br><span class="hljs-comment">-- Only required if you have packer configured as `opt`</span><br>vim.cmd <span class="hljs-string">[[packadd packer.nvim]]</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;packer&#x27;</span>).startup(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(use)</span></span><br>  <span class="hljs-comment">-- Packer can manage itself</span><br>  use <span class="hljs-string">&#x27;wbthomason/packer.nvim&#x27;</span><br><br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><ul><li>编辑 <code>init.lua</code> 引入模块 <code>plugins.lua</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 因为 plugins.lua 文件在 lua 文件夹下，所以路径可以简写，而不必用 lua/plugins</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;require(&quot;plugins&quot;)&#x27;</span> &gt;&gt; ~/.config/nvim/init.lua<br></code></pre></td></tr></table></figure><ul><li>再进入 neovim 发现命令 <code>:PackerSync</code> 等可以用了</li></ul><h2 id="安装配置-lsp">安装配置 Lsp</h2><p>编辑 <code>plugins.lua</code> 安装以下插件：</p><ul><li><ahref="https://github.com/neovim/nvim-lspconfig">nvim-lspconfig</a> 配置Lsp 必装</li><li><a href="https://github.com/williamboman/mason.nvim">mason.nvim</a>方便管理 lspconfig</li><li><ahref="https://github.com/williamboman/mason-lspconfig.nvim">mason-lspconfig.nvim</a>同上</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.cmd <span class="hljs-string">[[packadd packer.nvim]]</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;packer&#x27;</span>).startup(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(use)</span></span><br>  use <span class="hljs-string">&#x27;wbthomason/packer.nvim&#x27;</span><br><br>  <span class="hljs-comment">-- 添加代码到这里</span><br>  use <span class="hljs-string">&#x27;neovim/nvim-lspconfig&#x27;</span><br>  use &#123;<br>      <span class="hljs-string">&#x27;williamboman/mason.nvim&#x27;</span>,<br>      <span class="hljs-string">&#x27;williamboman/mason-lspconfig.nvim&#x27;</span><br>  &#125;<br><br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><ul><li>创建 lsp 配置模块文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建模块</span><br><span class="hljs-built_in">touch</span> ~/.config/nvim/lua/lsp_config.lua<br><span class="hljs-comment"># 引入模块</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;require(&quot;lsp_config&quot;)&#x27;</span> &gt;&gt; ~/.config/nvim/init.lua<br></code></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> DEFAULT_SETTINGS = &#123;<br>    <span class="hljs-comment">-- 确保安装</span><br>    ensure_installed = &#123;<br>        “lua_ls<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    -- 自动安装</span><br><span class="hljs-string">    automatic_installation = true,</span><br><span class="hljs-string">    handlers = nil,</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- 初始化 mason</span><br><span class="hljs-string">require(&quot;</span>mason<span class="hljs-string">&quot;).setup(&#123;</span><br><span class="hljs-string">    ui = &#123;</span><br><span class="hljs-string">        icons = &#123;</span><br><span class="hljs-string">            package_installed = &quot;</span>✓<span class="hljs-string">&quot;,</span><br><span class="hljs-string">            package_pending = &quot;</span>➜<span class="hljs-string">&quot;,</span><br><span class="hljs-string">            package_uninstalled = &quot;</span>✗<span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- 初始化 mason-lspconfig</span><br><span class="hljs-string">require(&quot;</span>mason-lspconfig<span class="hljs-string">&quot;).setup()</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- 安装 lua_ls 安装后打开 Lua 文件应该有语法检查</span><br><span class="hljs-string">require&#x27;lspconfig&#x27;.lua_ls.setup&#123;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="提示功能">提示功能</h2><ul><li>参照 <ahref="https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion">官网文档</a>进行操作</li></ul><p>配置 <code>plugins.lua</code> 文件，重新打开 neovim 运行命令<code>:PackerSync</code> 安装插件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.cmd <span class="hljs-string">[[packadd packer.nvim]]</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;packer&#x27;</span>).startup(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(use)</span></span><br>        use <span class="hljs-string">&#x27;wbthomason/packer.nvim&#x27;</span><br>        use &#123;<br>                <span class="hljs-string">&#x27;neovim/nvim-lspconfig&#x27;</span>,<br>                <span class="hljs-string">&#x27;williamboman/mason.nvim&#x27;</span>,<br>                <span class="hljs-string">&#x27;williamboman/mason-lspconfig.nvim&#x27;</span>,<br>        &#125;<br>        <span class="hljs-comment">-- 添加提示插件</span><br>        use &#123;<br>                <span class="hljs-string">&#x27;hrsh7th/nvim-cmp&#x27;</span>, <span class="hljs-comment">-- Autocompletion plugin</span><br>                <span class="hljs-string">&#x27;hrsh7th/cmp-nvim-lsp&#x27;</span>, <span class="hljs-comment">-- LSP source for nvim-cmp</span><br>        &#125;<br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><p>安装好插件后，再配置 <code>lsp_config.lua</code> 文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- nvim-cmp setup</span><br><span class="hljs-keyword">local</span> cmp = <span class="hljs-built_in">require</span> <span class="hljs-string">&#x27;cmp&#x27;</span><br>cmp.setup &#123;<br>  snippet = &#123;<br>  &#125;,<br>  mapping = cmp.mapping.preset.<span class="hljs-built_in">insert</span>(&#123;<br>    [<span class="hljs-string">&#x27;&lt;C-u&gt;&#x27;</span>] = cmp.mapping.scroll_docs(<span class="hljs-number">-4</span>), <span class="hljs-comment">-- Up</span><br>    [<span class="hljs-string">&#x27;&lt;C-d&gt;&#x27;</span>] = cmp.mapping.scroll_docs(<span class="hljs-number">4</span>), <span class="hljs-comment">-- Down</span><br>    [<span class="hljs-string">&#x27;&lt;C-Space&gt;&#x27;</span>] = cmp.mapping.complete(),<br>    [<span class="hljs-string">&#x27;&lt;CR&gt;&#x27;</span>] = cmp.mapping.confirm &#123;<br>      behavior = cmp.ConfirmBehavior.Replace,<br>      <span class="hljs-built_in">select</span> = <span class="hljs-literal">true</span>,<br>    &#125;,<br>    [<span class="hljs-string">&#x27;&lt;Tab&gt;&#x27;</span>] = cmp.mapping(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(fallback)</span></span><br>      <span class="hljs-keyword">if</span> cmp.visible() <span class="hljs-keyword">then</span><br>        cmp.select_next_item()<br>      <span class="hljs-keyword">else</span><br>        fallback()<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span>, &#123; <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span> &#125;),<br>    [<span class="hljs-string">&#x27;&lt;S-Tab&gt;&#x27;</span>] = cmp.mapping(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(fallback)</span></span><br>      <span class="hljs-keyword">if</span> cmp.visible() <span class="hljs-keyword">then</span><br>        cmp.select_prev_item()<br>      <span class="hljs-keyword">else</span><br>        fallback()<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span>, &#123; <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span> &#125;),<br>  &#125;),<br>  sources = &#123;<br>    &#123; name = <span class="hljs-string">&#x27;nvim_lsp&#x27;</span> &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>至此，便拥有了提示功能</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Neovim</tag>
      
      <tag>Editor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# Diy Event</title>
    <link href="/2024/08/22/C%20Sharp%20%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
    <url>/2024/08/22/C%20Sharp%20%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="c-自定义事件">C# 自定义事件</h1><blockquote><p>参考文章：</p><p>【1】：刘铁猛老师的《C#语言入门详解》</p></blockquote><p>自定义事件有五件重要事情</p><ul><li>事件拥有者</li><li>事件</li><li>事件响应者</li><li>事件处理器</li><li>事件绑定</li></ul><p>代码示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">EventDeclaration</span><br>&#123;<br>    <span class="hljs-comment">// 主类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventExample</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 事件拥有者</span><br>            EventOwner eventOwner = <span class="hljs-keyword">new</span> EventOwner();<br>            <span class="hljs-comment">// 事件响应者</span><br>            EventResponder eventResponder = <span class="hljs-keyword">new</span> EventResponder();<br><br>            <span class="hljs-comment">// 将事件处理器 EventHandler 与 事件 DoSomeEvent 绑定</span><br>            eventOwner.DoSomeEvent += eventResponder.EventHandler;<br><br>            eventOwner.Action(<span class="hljs-string">&quot;事件触发了&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 委托声明，自定义事件需要用到委托</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSomeEvent</span>(<span class="hljs-params">EventOwner sender, <span class="hljs-built_in">string</span> msg</span>)</span>;<br><br>    <span class="hljs-comment">// 事件拥有者，发布者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventOwner</span><br>    &#123;<br>        <span class="hljs-comment">// 触发事件实际是触发这个委托</span><br>        <span class="hljs-keyword">private</span> DoSomeEvent doSome;<br><br>        <span class="hljs-comment">// 事件，不可以直接触发，只能绑定或者移除！！！</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> DoSomeEvent DoSomeEvent<br>        &#123;<br>            <span class="hljs-keyword">add</span><br>            &#123;<br>                <span class="hljs-comment">// 事件绑定</span><br>                <span class="hljs-keyword">this</span>.doSome += <span class="hljs-keyword">value</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">remove</span><br>            &#123;<br>                <span class="hljs-comment">// 事件移除绑定</span><br>                <span class="hljs-keyword">this</span>.doSome -= <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">// 触发事件，只能由事件拥有者触发</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDoSome</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> msg</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != <span class="hljs-keyword">this</span>.doSome)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.doSome.Invoke(<span class="hljs-keyword">this</span>, args);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Action</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> msg</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.onDoSome(msg);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 事件响应者，订阅者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventResponder</span><br>    &#123;<br>        <span class="hljs-comment">// 事件处理器，参数必须和委托一致</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">EventOwner sender, <span class="hljs-built_in">string</span> msg</span>)</span><br>        &#123;<br>            System.Console.WriteLine(msg);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进后：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">EventDeclaration</span><br>&#123;<br>    <span class="hljs-comment">// 主类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventExample</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 事件拥有者</span><br>            EventOwner eventOwner = <span class="hljs-keyword">new</span> EventOwner();<br>            <span class="hljs-comment">// 事件响应者</span><br>            EventResponder eventResponder = <span class="hljs-keyword">new</span> EventResponder();<br><br>            <span class="hljs-comment">// 将事件处理器 EventHandler 与 事件 DoSomeEvent 绑定</span><br>            eventOwner.DoSomeEvent += eventResponder.EventHandler;<br><br>            eventOwner.Action(<span class="hljs-keyword">new</span> DoSomeEventArgs() &#123; Message = <span class="hljs-string">&quot;事件出发了！！！&quot;</span> &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 参数类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DoSomeEventArgs</span> : <span class="hljs-title">System.EventArgs</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> message;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Message<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.message;<br>            &#125;<br>            <span class="hljs-keyword">set</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>.message = <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 无参构造器</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoSomeEventArgs</span>()</span> &#123; &#125;<br><br>        <span class="hljs-comment">// 有参构造器</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoSomeEventArgs</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> msg</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.message = msg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 委托声明，自定义事件需要用到委托</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSomeEvent</span>(<span class="hljs-params">EventOwner sender, DoSomeEventArgs args</span>)</span>;<br><br>    <span class="hljs-comment">// 事件拥有者，发布者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventOwner</span><br>    &#123;<br>        <span class="hljs-comment">// 触发事件实际是触发这个委托</span><br>        <span class="hljs-keyword">private</span> DoSomeEvent doSome;<br><br>        <span class="hljs-comment">// 事件，不可以直接触发，只能绑定或者移除！！！</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> DoSomeEvent DoSomeEvent<br>        &#123;<br>            <span class="hljs-keyword">add</span><br>            &#123;<br>                <span class="hljs-comment">// 事件绑定</span><br>                <span class="hljs-keyword">this</span>.doSome += <span class="hljs-keyword">value</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">remove</span><br>            &#123;<br>                <span class="hljs-comment">// 事件移除绑定</span><br>                <span class="hljs-keyword">this</span>.doSome -= <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">// 触发事件，只能由事件拥有者触发</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDoSome</span>(<span class="hljs-params">DoSomeEventArgs args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != <span class="hljs-keyword">this</span>.doSome)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.doSome.Invoke(<span class="hljs-keyword">this</span>, args);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Action</span>(<span class="hljs-params">DoSomeEventArgs args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.onDoSome(args);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 事件响应者，订阅者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventResponder</span><br>    &#123;<br>        <span class="hljs-comment">// 事件处理器，参数必须和委托一致</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">EventOwner sender, DoSomeEventArgs args</span>)</span><br>        &#123;<br>            System.Console.WriteLine(args.Message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再改进：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">EventDeclaration</span><br>&#123;<br>    <span class="hljs-comment">// 主类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventExample</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 事件拥有者</span><br>            EventOwner eventOwner = <span class="hljs-keyword">new</span> EventOwner();<br>            <span class="hljs-comment">// 事件响应者</span><br>            EventResponder eventResponder = <span class="hljs-keyword">new</span> EventResponder();<br><br>            <span class="hljs-comment">// 将事件处理器 EventHandler 与 事件 DoSomeEvent 绑定</span><br>            eventOwner.DoSomeEvent += eventResponder.EventHandler;<br><br>            eventOwner.Action(<span class="hljs-keyword">new</span> DoSomeEventArgs() &#123; Message = <span class="hljs-string">&quot;事件触发了！！！&quot;</span> &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 参数类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DoSomeEventArgs</span> : <span class="hljs-title">System.EventArgs</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> message;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Message<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.message;<br>            &#125;<br>            <span class="hljs-keyword">set</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>.message = <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 无参构造器</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoSomeEventArgs</span>()</span> &#123; &#125;<br><br>        <span class="hljs-comment">// 有参构造器</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoSomeEventArgs</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> msg</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.message = msg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 事件拥有者，发布者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventOwner</span><br>    &#123;<br>        <span class="hljs-comment">// 触发事件实际是触发这个委托</span><br>        <span class="hljs-keyword">private</span> System.EventHandler doSome;<br><br>        <span class="hljs-comment">// 事件，不可以直接触发，只能绑定或者移除！！！</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> System.EventHandler DoSomeEvent<br>        &#123;<br>            <span class="hljs-keyword">add</span><br>            &#123;<br>                <span class="hljs-comment">// 事件绑定</span><br>                <span class="hljs-keyword">this</span>.doSome += <span class="hljs-keyword">value</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">remove</span><br>            &#123;<br>                <span class="hljs-comment">// 事件移除绑定</span><br>                <span class="hljs-keyword">this</span>.doSome -= <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">// 触发事件，只能由事件拥有者触发</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDoSome</span>(<span class="hljs-params">DoSomeEventArgs args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != <span class="hljs-keyword">this</span>.doSome)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.doSome.Invoke(<span class="hljs-keyword">this</span>, args);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Action</span>(<span class="hljs-params">DoSomeEventArgs args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.onDoSome(args);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 事件响应者，订阅者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventResponder</span><br>    &#123;<br>        <span class="hljs-comment">// 事件处理器，参数必须和委托一致</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, System.EventArgs args</span>)</span><br>        &#123;<br>            DoSomeEventArgs doSomeEventArgs = args <span class="hljs-keyword">as</span> DoSomeEventArgs;<br><br>            System.Console.WriteLine(doSomeEventArgs.Message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简洁版：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">EventDeclaration</span><br>&#123;<br>    <span class="hljs-comment">// 主类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventExample</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 事件拥有者</span><br>            EventOwner eventOwner = <span class="hljs-keyword">new</span> EventOwner();<br>            <span class="hljs-comment">// 事件响应者</span><br>            EventResponder eventResponder = <span class="hljs-keyword">new</span> EventResponder();<br><br>            <span class="hljs-comment">// 将事件处理器 EventHandler 与 事件 DoSomeEvent 绑定</span><br>            eventOwner.DoSomeEvent += eventResponder.EventHandler;<br><br>            eventOwner.Action(<span class="hljs-keyword">new</span> DoSomeEventArgs() &#123; Message = <span class="hljs-string">&quot;事件触发了！！！&quot;</span> &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 参数类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DoSomeEventArgs</span> : <span class="hljs-title">System.EventArgs</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> message;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Message<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.message;<br>            &#125;<br>            <span class="hljs-keyword">set</span><br>            &#123;<br>                <span class="hljs-keyword">this</span>.message = <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 无参构造器</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoSomeEventArgs</span>()</span> &#123; &#125;<br><br>        <span class="hljs-comment">// 有参构造器</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoSomeEventArgs</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> msg</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.message = msg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 事件拥有者，发布者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventOwner</span><br>    &#123;<br>        <span class="hljs-comment">// 事件，不可以直接触发，只能绑定或者移除！！！</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> System.EventHandler DoSomeEvent;<br><br><br>        <span class="hljs-comment">// 触发事件，只能由事件拥有者触发</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDoSome</span>(<span class="hljs-params">DoSomeEventArgs args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != <span class="hljs-keyword">this</span>.DoSomeEvent)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.DoSomeEvent.Invoke(<span class="hljs-keyword">this</span>, args);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Action</span>(<span class="hljs-params">DoSomeEventArgs args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.onDoSome(args);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 事件响应者，订阅者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventResponder</span><br>    &#123;<br>        <span class="hljs-comment">// 事件处理器，参数必须和委托一致</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, System.EventArgs args</span>)</span><br>        &#123;<br>            DoSomeEventArgs doSomeEventArgs = args <span class="hljs-keyword">as</span> DoSomeEventArgs;<br>            System.Console.WriteLine(doSomeEventArgs.Message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
      <tag>C Sharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux Install i3</title>
    <link href="/2024/08/21/ArchLInux%20Install%20I3/"/>
    <url>/2024/08/21/ArchLInux%20Install%20I3/</url>
    
    <content type="html"><![CDATA[<h1 id="archlinux-安装-i3-windows-manager">ArchLinux 安装 i3 WindowsManager</h1><blockquote><p>参考文章：</p><p>【1】：<ahref="https://www.zzxworld.com/posts/install_and_config_desktop_environment_on_arch_linux">ArchLinux 安装并配置桌面环境</a></p><p>【2】：互联网</p></blockquote><h2 id="安装-xorg">安装 xorg</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># xorg-server,xorg-xinit : xorg 基本配件</span><br><span class="hljs-comment"># xfce4-terminal : 终端软件，可以用 kitty 代替</span><br><span class="hljs-comment"># i3 : i3 所有套件</span><br><span class="hljs-comment"># archlinux-wallpaper : archlinux 壁纸</span><br>sudo pacman -S xorg-server xorg-xinit xfce4-terminal i3 archlinux-wallpaper<br></code></pre></td></tr></table></figure><h2 id="编辑-xinit">编辑 xinit</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -a /etc/X11/xinit/xinitrc .<br>sudo <span class="hljs-built_in">chown</span> wind xinitrc<br>sudo <span class="hljs-built_in">chgrp</span> wind xinitrc<br><span class="hljs-built_in">mv</span> xinitrc .xinitrc<br><br>vim .xinitrc<br><br><span class="hljs-comment"># 删除下面</span><br>twm &amp;<br>xclock -geometry 50x50-1+1 &amp;<br>xterm -geometry 80x50+494+51 &amp;<br>xterm -geometry 80x20+494-0 &amp;<br><span class="hljs-built_in">exec</span> xterm -geometry 80x66+0+0 -name login<br><br><span class="hljs-comment"># 添加下面</span><br><span class="hljs-built_in">exec</span> i3<br></code></pre></td></tr></table></figure><ul><li>以上命令可以用一句命令就行<code>echo 'exec i3' &gt; ~/.xinitrc</code></li></ul><h2 id="进入-i3-并配置">进入 i3 并配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入i3</span><br>startx<br></code></pre></td></tr></table></figure><p>两次回车后按 <code>win + enter</code> 键启动终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># rofi : 搜索软件，类似于 windows 上的 listary</span><br><span class="hljs-comment"># picom : 特效软件</span><br><span class="hljs-comment"># tint2 : 状态栏软件，可以用 polybar 替代</span><br><span class="hljs-comment"># feh : 设置背景图片软件</span><br>sudo pacman -S rofi picom tint2 feh<br></code></pre></td></tr></table></figure><p>配置 i3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim .config/i3/config<br><br><span class="hljs-comment"># 更改以下行</span><br><span class="hljs-comment"># bindsym $mod+d exec --no-startup-id dmenu_run</span><br>bindsym <span class="hljs-variable">$mod</span>+d <span class="hljs-built_in">exec</span> --no-startup-id rofi -show run<br><br><span class="hljs-comment"># 停用 i3bar 并添加新的指令</span><br><span class="hljs-comment"># bar &#123;</span><br><span class="hljs-comment">#         status_command i3status</span><br><span class="hljs-comment"># &#125;</span><br>gaps inner 2                             <span class="hljs-comment"># 设置边距</span><br>gaps outer 2                             <span class="hljs-comment"># 同上</span><br>bindsym <span class="hljs-variable">$mod</span>+n border normal             <span class="hljs-comment"># win/alt + n 正常边距</span><br>bindsym <span class="hljs-variable">$mod</span>+u border none<br><span class="hljs-comment"># 开启特效，需配置</span><br><span class="hljs-built_in">exec</span> --no-startup-id picom --no-vsync<br><span class="hljs-comment"># 开启状态栏</span><br><span class="hljs-built_in">exec</span> --no-startup-id tint2<br><span class="hljs-comment"># 如果不时虚拟机不用添加下面一行</span><br><span class="hljs-built_in">exec</span> --no-startup-id vmware-user-suid-wrapper<br><span class="hljs-comment"># 指定 i3 壁纸</span><br><span class="hljs-built_in">exec</span> --no-startup-id feh --randomize --bg-fill /usr/share/backgrounds/archlinux<br><span class="hljs-comment"># 开启音量</span><br><span class="hljs-built_in">exec</span> --no-startup-id pulseaudio --start -D<br></code></pre></td></tr></table></figure><p>最后退出 i3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">i3 <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h2 id="安装-lightdm">安装 LightDM</h2><ul><li><a href="https://github.com/canonical/lightdm">LightDM</a> 是一个 Xdisplay manager，是一个登录图形界面，i3是一个桌面管理器，不是同一个东西</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 lightdm</span><br>sudo pacman -S lightdm lightdm-gtk-greeter<br><span class="hljs-comment"># 设置开机自启动 lightdm 服务</span><br>sudo systemctl <span class="hljs-built_in">enable</span> lightdm.service<br></code></pre></td></tr></table></figure><ul><li>重启系统，开机就会直接看到图形化的登录界面了：右上角可以切换桌面进行登录</li></ul><h2 id="更改-lightdm-背景">更改 <code>lightdm</code> 背景</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑配置文件</span><br>sudo vim /etc/lightdm/lightdm-gtk-greeter.conf<br></code></pre></td></tr></table></figure><p>添加以下内容，其中<code>/usr/share/backgrounds/archlinux/snow.jpg</code> 是壁纸文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf">[greeter]<br>background=/usr/share/backgrounds/archlinux/snow.jpg<br></code></pre></td></tr></table></figure><h2 id="更改屏幕分辨率">更改屏幕分辨率</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 xrandr</span><br>sudo pacman -S xorg-xrandr<br><span class="hljs-comment"># 查看信息</span><br>xrandr<br><span class="hljs-comment"># 为 Virtual-1 设备改变分辨率：1920x1080</span><br>xrandr --output Virtual-1 --mode 1920x1080<br></code></pre></td></tr></table></figure><h2 id="配置终端字体">配置终端字体</h2><h3 id="下载安装字体">下载安装字体</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 unzip 解压工具，wget 下载工具</span><br>sudo pacman -S unzip wget<br><span class="hljs-comment"># 创建字体目录存放字体，其中 NerdFonts 名字随意，但 fonts 名字不随意</span><br><span class="hljs-built_in">mkdir</span> ~/.local/share/fonts/NerdFonts<br><span class="hljs-comment"># 下载 nerdfonts 字体</span><br>wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/CascadiaCode.zip -O ~/.local/share/fonts/NerdFonts/CascadiaCode.zip<br><br><span class="hljs-comment"># 到目录</span><br><span class="hljs-built_in">cd</span> ~/.local/share/fonts/NerdFonts<br><span class="hljs-comment"># 解压字体</span><br>unzip CascadiaCode.zip<br><span class="hljs-comment"># 删除用不上的文件</span><br><span class="hljs-built_in">rm</span> -rf CascadiaCode.zip README.md LICENSE<br></code></pre></td></tr></table></figure><h3 id="配置终端">配置终端</h3><ul><li>我用的是 <a href="https://github.com/kovidgoyal/kitty">kitty</a>终端，可以参照 <ahref="https://sw.kovidgoyal.net/kitty/conf/">官方文档</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 kitty 配置文件</span><br><span class="hljs-built_in">mkdir</span> -p ~/.config/kitty<br>vim ~/.config/kitty/kitty.conf<br></code></pre></td></tr></table></figure><p>输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf">font_family      CascadiaCode<br>bold_font        auto<br>italic_font      auto<br>bold_italic_font auto<br>font_size 15.0<br></code></pre></td></tr></table></figure><h2 id="更改状态栏从-tint2-到-polybar">更改状态栏从 tint2 到 <ahref="https://github.com/polybar/polybar">polybar</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除 tint2</span><br>sudo pacman -Rsn tint2<br><span class="hljs-comment"># 删除 tint2 的配置文件</span><br><span class="hljs-built_in">rm</span> -rf ~/.config/tint2<br><br><span class="hljs-comment"># 安装 polybar</span><br>sudo pacman -S polybar<br><br><span class="hljs-comment"># 退出 i3 重新登录</span><br>i3 <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h3 id="配置-polybar">配置 <ahref="https://github.com/polybar/polybar">polybar</a></h3><ul><li>可以参照官方文档</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建配置目录</span><br><span class="hljs-built_in">mkdir</span> -p ~/.config/polybar<br><span class="hljs-comment"># 复制官方配置文件到配置目录</span><br><span class="hljs-built_in">cp</span> /etc/polybar/config.ini ~/.config/polybar<br><span class="hljs-comment"># 如果有权限问题，更改权限为 user 其中 user 是你的用户名和你所在的用户组</span><br><span class="hljs-built_in">chown</span> user config.ini<br><span class="hljs-built_in">chgrp</span> user config.ini<br></code></pre></td></tr></table></figure><ul><li>编写 <a href="https://github.com/polybar/polybar">polybar</a>启动脚本，例如：launch.sh</li><li>其中 <code>mybar</code> 是 <code>config.ini</code> 文件中的 bar名字</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-comment">#launch.sh</span><br><br><span class="hljs-comment"># Terminate already running bar instances</span><br><span class="hljs-comment"># If all your bars have ipc enabled, you can use </span><br>polybar-msg cmd quit<br><span class="hljs-comment"># Otherwise you can use the nuclear option:</span><br><span class="hljs-comment"># killall -q polybar</span><br><br><span class="hljs-comment"># Launch mybar</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---&quot;</span> | <span class="hljs-built_in">tee</span> -a /tmp/polybar.log<br>polybar mybar 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> -a /tmp/polybar.log &amp; <span class="hljs-built_in">disown</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Bars launched...&quot;</span><br></code></pre></td></tr></table></figure><ul><li>给其他用户执行 launch.sh 脚本的权限，不然启动不了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$HOME</span>/.config/polybar/launch.sh<br></code></pre></td></tr></table></figure><ul><li>更改 i3 配置文件启动 launch.sh 脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除 tint2</span><br><span class="hljs-built_in">exec</span> --no-startup-id tint2<br><span class="hljs-comment"># 添加下面内容</span><br>exec_always --no-startup-id <span class="hljs-variable">$HOME</span>/.config/polybar/launch.sh<br></code></pre></td></tr></table></figure><ul><li>退出 i3 重新登录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">i3 <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux Clean Space</title>
    <link href="/2024/08/21/Archlinux%20%E6%B8%85%E7%90%86%E7%A9%BA%E9%97%B4/"/>
    <url>/2024/08/21/Archlinux%20%E6%B8%85%E7%90%86%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="archlinux-清理空间">Archlinux 清理空间</h1><blockquote><p>参考文章：</p><p>【1】：<ahref="https://blog.csdn.net/chizhan8323/article/details/100731941">archlinux清理一下空间_chizhan8323的博客-CSDN博客</a></p><p>【2】：<ahref="https://blog.csdn.net/qq_41601836/article/details/106519865">pacman的包管理命令_pacman清理无用的包-CSDN博客</a></p></blockquote><h2 id="日志清理">日志清理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示日志占用空间</span><br>journalctl --disk-usage<br><span class="hljs-comment"># 设置日志占用空间</span><br>journalctl --vacuum-size=50M<br></code></pre></td></tr></table></figure><h2 id="pacman-清理">Pacman 清理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清理缓存</span><br>sudo pacman -Sc<br><br><span class="hljs-comment"># 查询孤儿软件并删除掉他们</span><br>sudo pacman -R $(sudo pacman -Qdtq)<br><br><span class="hljs-comment"># 删除软件时删除相关依赖和配置文件</span><br>sudo pacman -Rns &lt;package&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux Install zim</title>
    <link href="/2024/08/21/archlinux%20%E5%AE%89%E8%A3%85%20zim/"/>
    <url>/2024/08/21/archlinux%20%E5%AE%89%E8%A3%85%20zim/</url>
    
    <content type="html"><![CDATA[<h1 id="archlinux-安装-zim">archlinux 安装 zim</h1><ul><li>安装 <a href="https://www.zsh.org/">zsh</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S zsh<br></code></pre></td></tr></table></figure><ul><li>切换 shell</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换当前用户的 shell</span><br>chsh -s /bin/zsh<br></code></pre></td></tr></table></figure><ul><li>打开 <a href="https://github.com/zimfw/zimfw">Zim</a> 官网，找到Automatic installation，复制命令安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># use curl to install</span><br>curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh<br><br><span class="hljs-comment"># use wget to install</span><br>wget -nv -O - https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh<br></code></pre></td></tr></table></figure><ul><li>更改 zshell 匹配规则</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 .zshrc文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;set nonomatch&quot;</span> &gt; ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="安装-powerlevel10k">安装 <ahref="https://github.com/romkatv/powerlevel10k">powerlevel10k</a></h2><p>打开官网：https://github.com/romkatv/powerlevel10k</p><p>找到：<code>Installation</code> ，按照指示进行安装</p><p>比如 <code>zim</code> ：Add<code>zmodule romkatv/powerlevel10k --use degit</code> to<code>~/.zimrc</code> and run <code>zimfw install</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加模块到配置文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;zmodule romkatv/powerlevel10k --use degit&#x27;</span> &gt;&gt; ~/.zimrc<br><span class="hljs-comment"># 安装模块</span><br>zimfw install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux Install yay</title>
    <link href="/2024/08/20/ArchLinux%20%E5%AE%89%E8%A3%85%20yay/"/>
    <url>/2024/08/20/ArchLinux%20%E5%AE%89%E8%A3%85%20yay/</url>
    
    <content type="html"><![CDATA[<h1 id="archlinux-安装-yay">ArchLinux 安装 yay</h1><blockquote><p>参考文章：</p><p>【1】：<ahref="https://mirrors.tuna.tsinghua.edu.cn/help/archlinuxcn/">archlinuxcn| 镜像站使用帮助</a></p><p>【2】：<ahref="https://www.archlinuxcn.org/archlinuxcn-keyring-manually-trust-farseerfc-key/">新系统中安装archlinuxcn-keyring 包前需要手动信任 farseerfc 的 key</a></p></blockquote><h2 id="安装-yay">安装 yay</h2><ul><li><p>打开官网 <a href="https://github.com/Jguer/yay">yay</a></p></li><li><p>找到 <code>Installation</code> ，在普通用户下进行操作</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装依赖</span><br>sudo pacman -S --needed git base-devel<br><span class="hljs-comment"># 下载仓库</span><br>git <span class="hljs-built_in">clone</span> https://aur.archlinux.org/yay.git --depth=1<br><span class="hljs-comment"># 切到目录 yay</span><br><span class="hljs-built_in">cd</span> yay<br><span class="hljs-comment"># 安装</span><br>makepkg -si<br></code></pre></td></tr></table></figure><h2 id="添加-archlinuxcn-的镜像源">添加 archlinuxcn 的镜像源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载所有的镜像</span><br>sudo wget https://raw.githubusercontent.com/archlinuxcn/mirrorlist-repo/master/archlinuxcn-mirrorlist -O /etc/pacman.d/mirrorlistcn<br><span class="hljs-comment"># 去掉文件 /etc/pacman.d/mirrorlistcn 中的链接前的 # 号</span><br><span class="hljs-comment"># 例如 tsinghua , aliyun 等源</span><br></code></pre></td></tr></table></figure><p>添加下面内容到 <code>/etc/pacman.conf</code> 文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf">[archlinuxcn]<br>Include = /etc/pacman.d/mirrorlistcn<br></code></pre></td></tr></table></figure><p>手动信任 farseerfc 的 key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman-key --lsign-key <span class="hljs-string">&quot;farseerfc@archlinux.org&quot;</span><br></code></pre></td></tr></table></figure><p>安装 archlinuxcn-keyring</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -Sy archlinuxcn-keyring<br></code></pre></td></tr></table></figure><h2 id="安装-joshuto">安装 <ahref="https://github.com/kamiyaa/joshuto">joshuto</a></h2><ul><li><p><a href="https://github.com/kamiyaa/joshuto">joshuto</a> 是一个终端文件管理器</p></li><li><p>类似的有 <a href="https://github.com/ranger/ranger">ranger</a> ,<a href="https://github.com/sxyazi/yazi">yazi</a> 等等</p></li><li><p>安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S joshuto<br></code></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建配置文件夹</span><br><span class="hljs-built_in">mkdir</span> ~/.config/joshuto<br><span class="hljs-comment"># 创建配置文件</span><br><span class="hljs-built_in">touch</span> ~/.config/joshuto.toml<br></code></pre></td></tr></table></figure><ul><li>为配置文件 <code>~/.config/joshuto.toml</code>添加下面内容，详细配置可看官方文档</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># ~/.config/joshuto.toml</span><br><span class="hljs-attr">scroll_offset</span> = <span class="hljs-number">6</span><br><span class="hljs-attr">xdg_open</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">xdg_open_fork</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">use_trash</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">watch_files</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">focus_on_create</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">max_preview_size</span> = <span class="hljs-number">2097152</span> <span class="hljs-comment"># 2MB</span><br><span class="hljs-section">[display]</span><br><span class="hljs-attr">mode</span> = <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-attr">collapse_preview</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">column_ratio</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-attr">show_borders</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">show_hidden</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">show_icons</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">tilde_in_titlebar</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">line_number_style</span> = <span class="hljs-string">&quot;none&quot;</span><br><span class="hljs-attr">linemode</span> = <span class="hljs-string">&quot;size&quot;</span><br><span class="hljs-section">[display.sort]</span><br><span class="hljs-attr">sort_method</span> = <span class="hljs-string">&quot;natural&quot;</span><br><span class="hljs-attr">case_sensitive</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">directories_first</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">reverse</span> = <span class="hljs-literal">false</span><br><span class="hljs-section">[preview]</span><br><span class="hljs-attr">max_preview_size</span> = <span class="hljs-number">2097152</span><br><span class="hljs-attr">preview_script</span> = <span class="hljs-string">&quot;~/.config/joshuto/preview_file.sh&quot;</span><br><span class="hljs-section">[search]</span><br><span class="hljs-attr">string_case_sensitivity</span> = <span class="hljs-string">&quot;insensitive&quot;</span><br><span class="hljs-attr">glob_case_sensitivity</span> = <span class="hljs-string">&quot;sensitive&quot;</span><br><span class="hljs-attr">regex_case_sensitivity</span> = <span class="hljs-string">&quot;sensitive&quot;</span><br><span class="hljs-attr">fzf_case_sensitivity</span> = <span class="hljs-string">&quot;insensitive&quot;</span><br><span class="hljs-section">[cmd_aliases]</span><br><span class="hljs-section">[tab]</span><br><span class="hljs-attr">home_page</span> = <span class="hljs-string">&quot;home&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Install Latest ZShell</title>
    <link href="/2024/03/13/CentOS_Install_Latest_ZShell/"/>
    <url>/2024/03/13/CentOS_Install_Latest_ZShell/</url>
    
    <content type="html"><![CDATA[<h1 id="安装最新版zsh-shell">6. 安装最新版ZSH Shell</h1><ul><li>首先切换到root用户： <code>su -</code></li></ul><h2 id="卸载低版本zsh">6.1 卸载低版本zsh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 卸载当前版本</span><br>yum -y remove zsh<br></code></pre></td></tr></table></figure><h2 id="下载源码">6.2 下载源码</h2><ul><li>源码：https://zsh.sourceforge.io/Arc/source.html</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果没有wget就先安装wget</span><br>yum -y install wget<br><br><span class="hljs-comment"># 下载</span><br>wget https://sourceforge.net/projects/zsh/files/zsh/5.9/zsh-5.9.tar.xz<br><br><span class="hljs-comment"># 解压</span><br>tar -xvf zsh-5.9.tar.xz<br></code></pre></td></tr></table></figure><h2 id="编译安装">6.3 编译安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装编译工具</span><br>yum install gcc perl-ExtUtils-MakeMaker<br>yum install ncurses-devel<br><br><span class="hljs-comment"># 进入源码目录</span><br><span class="hljs-built_in">cd</span> zsh-5.9<br><br><span class="hljs-comment"># 执行配置</span><br>./configure   <span class="hljs-comment"># 默认安装在：/usr/local/bin/zsh</span><br><br><span class="hljs-comment"># 编译和安装</span><br>make &amp;&amp; make install<br><br><span class="hljs-comment"># 添加信息</span><br>vim /etc/shells<br><br><span class="hljs-comment"># 在最后一行加上：</span><br>/usr/local/bin/zsh<br></code></pre></td></tr></table></figure><h2 id="验证安装">6.4 验证安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换shell</span><br>chsh -s /usr/local/bin/zsh<br><br><span class="hljs-comment"># 查看版本信息</span><br>zsh --version<br><span class="hljs-comment"># zsh 5.9 (x86_64-pc-linux-gnu)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Install&amp;Config Oh-My-Zsh</title>
    <link href="/2024/03/13/CentOS_Install&amp;Config_Oh-My-Zsh/"/>
    <url>/2024/03/13/CentOS_Install&amp;Config_Oh-My-Zsh/</url>
    
    <content type="html"><![CDATA[<h1 id="oh-my-zsh安装和配置">7. Oh-My-Zsh安装和配置</h1><h2 id="安装git">7.1 安装git</h2><p>安装Oh-My-Zsh之前需要先安装 <a href="https://git-scm.com/">git</a> 和( <a href="https://www.gnu.org/software/wget/">wget</a> 或 <ahref="https://curl.se/">curl</a> )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install git<br></code></pre></td></tr></table></figure><h2 id="安装oh-my-zsh">7.2 安装Oh-My-Zsh</h2><ul><li>以下命令需要分别在普通用户和root用户下安装</li></ul><table><thead><tr><th>Method</th><th>Command</th></tr></thead><tbody><tr><td><strong>curl</strong></td><td><code>sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code></td></tr><tr><td><strong>wget</strong></td><td><code>sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code></td></tr><tr><td><strong>fetch</strong></td><td><code>sh -c "$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code></td></tr></tbody></table><h2 id="oh-my-zsh插件与主题配置">7.3 Oh-My-Zsh插件与主题配置</h2><h3 id="zsh-autosuggestions">7.3.1 <strong><ahref="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></strong></h3><h6id="clone-this-repository-into-zsh_customplugins-by-default-.oh-my-zshcustomplugins">7.3.1.1Clone this repository into <code>$ZSH_CUSTOM/plugins</code> (by default<code>~/.oh-my-zsh/custom/plugins</code>)</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br><br><span class="hljs-comment"># 比如我的zsh</span><br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><h6id="add-the-plugin-to-the-list-of-plugins-for-oh-my-zsh-to-load-inside-.zshrc">7.3.1.2Add the plugin to the list of plugins for Oh My Zsh to load (inside<code>~/.zshrc</code>):</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加插件</span><br>plugins=( <br>    <span class="hljs-comment"># other plugins...</span><br>    zsh-autosuggestions<br>)<br></code></pre></td></tr></table></figure><h6 id="start-a-new-terminal-session.">7.3.1.3 Start a new terminalsession.</h6><h3 id="zsh-syntax-highlighting">7.3.2 <strong><ahref="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></strong></h3><h6 id="clone-this-repository-in-oh-my-zshs-plugins-directory">7.3.2.1Clone this repository in oh-my-zsh's plugins directory:</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br><br><span class="hljs-comment"># 比如我的zsh</span><br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><h6 id="activate-the-plugin-in-.zshrc">7.3.2.2 Activate the plugin in<code>~/.zshrc</code>:</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">plugins=(<br>[plugins...]<br>zsh-autosuggestions<br>zsh-syntax-highlighting<br>)<br></code></pre></td></tr></table></figure><h6id="restart-zsh-such-as-by-opening-a-new-instance-of-your-terminal-emulator.">7.3.2.3Restart zsh (such as by opening a new instance of your terminalemulator).</h6><h3 id="powerlevel10k">7.3.3 <strong><ahref="https://github.com/romkatv/powerlevel10k">powerlevel10k</a></strong></h3><h6 id="clone-the-repository">7.3.3.1 Clone the repository:</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br><br><span class="hljs-comment"># 比如我的zsh</span><br>git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k<br></code></pre></td></tr></table></figure><p>Users in China can use the official mirror on gitee.com for fasterdownload. 中国用户可以使用 <a href="gitee.com">gitee</a>上的官方镜像加速下载.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br></code></pre></td></tr></table></figure><h6 id="set-zsh_themepowerlevel10kpowerlevel10k-in-.zshrc.">7.3.3.2 Set<code>ZSH_THEME="powerlevel10k/powerlevel10k"</code> in<code>~/.zshrc</code>.</h6>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Study</title>
    <link href="/2024/02/05/Git-Study/"/>
    <url>/2024/02/05/Git-Study/</url>
    
    <content type="html"><![CDATA[<h1 id="git-study">Git Study</h1><blockquote><p>参考文章：</p><p>【1】：<ahref="https://www.runoob.com/git/git-basic-operations.html">Git 基本操作| 菜鸟教程</a></p><p>【2】：https://git-scm.com/docs/git-config</p><p>【3】：https://git-scm.com/docs/gitignore</p><p>【4】：互联网</p></blockquote><h2 id="初始化">初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># git 初始化本地仓库</span><br>git init<br></code></pre></td></tr></table></figure><h2 id="添加文件到暂存区">添加文件到暂存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 追踪文件 git add &lt;要追踪的文件&gt;，. 表示当前目录下所有文件</span><br>git add .<br></code></pre></td></tr></table></figure><h2 id="查看状态">查看状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看仓库当前的状态，显示有变更的文件</span><br>git status<br><br><span class="hljs-comment"># 比较文件的不同</span><br>git diff<br></code></pre></td></tr></table></figure><h2 id="提交更改到仓库">提交更改到仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提交更改</span><br><span class="hljs-comment"># git commit -m [message]</span><br>git commit -m <span class="hljs-string">&quot;更改备注&quot;</span><br><span class="hljs-comment"># git commit 直接回车会出现一个编辑器让你输入更改备注信息，输入保存退出后即可</span><br>git commit<br><br><span class="hljs-comment"># 查看提交记录</span><br>git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h2 id="版本回退">版本回退</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 回退版本</span><br><span class="hljs-comment"># git reset [--soft | --mixed | --hard] [HEAD]</span><br>git reset <br><span class="hljs-comment"># 回退到上一个版本， ^的个数表示回到的版本数</span><br>git reset --hard HEAD^<br><span class="hljs-comment"># 可以用下面这个方法代替，1 代表回退的版本数</span><br>git reset --hard HEAD~1<br></code></pre></td></tr></table></figure><h2 id="查询历史记录">查询历史记录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查询历史记录</span><br>git reflog<br></code></pre></td></tr></table></figure><h2 id="git-配置">Git 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置用户名和邮箱 --global 是全局配置，如果是局部配置不加 --global</span><br>git config --global user.name <span class="hljs-string">&quot;windzwindy&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;windzwindy@wind.zwindy&quot;</span><br><br><span class="hljs-comment"># 配置更改备注时用的编辑器</span><br>git config core.editor nano<br></code></pre></td></tr></table></figure><h2 id="设置不让-git-管理的文件列表">设置不让 Git 管理的文件列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加一个 .gitignore 文件</span><br><span class="hljs-built_in">cat</span> .gitignore<br><span class="hljs-comment"># 在里面写入不用 git 管理文件的名称</span><br>./myfile/*<br></code></pre></td></tr></table></figure><h2 id="让-git-不再追踪文件">让 Git 不再追踪文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 明明设置了 .gitignore 文件，为什么还可以提交？</span><br><span class="hljs-comment"># 因为 git 一开始追踪就会一直追踪</span><br><span class="hljs-comment"># git rm --cached &lt;file&gt;</span><br>git <span class="hljs-built_in">rm</span> --cached myignorefile<br></code></pre></td></tr></table></figure><h2 id="git-分支">Git 分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出分支 git branch -a</span><br>git branch -a<br><span class="hljs-comment"># 新建分支 git branch &lt;branch-name&gt;</span><br>git branch mybranch<br><span class="hljs-comment"># 切换到该分支 git checkout &lt;branch-name&gt;</span><br>git checkout mybranch<br><span class="hljs-comment"># 也可以一条命令创建并切换到新分支 new</span><br>git checkout -b new<br><br><span class="hljs-comment"># 合并到当前分支 git merge mybranch</span><br>git checkout master <span class="hljs-comment"># 切换到主分支</span><br>git merge mybranch<br><br><span class="hljs-comment"># 删除分支 git branch -d &lt;branch-name&gt;</span><br>git checkout master <span class="hljs-comment"># 先切回主分支</span><br>git branch -d mybranch<br></code></pre></td></tr></table></figure><h2 id="远程仓库管理">远程仓库管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前的远程库有哪些 git remote [-v]</span><br>git remote <span class="hljs-comment"># 加 -v 可以看到远程仓库链接</span><br><br><span class="hljs-comment"># 添加远程仓库链接 git remote add [remote-reponame] [url]</span><br>git remote add origin xxx.git<br><br><span class="hljs-comment"># 推送到远程仓库 git push -u [remote-reponame] [local-branch : remote-branch]</span><br>git push -u origin master:master<br><br><span class="hljs-comment"># 删除远程分支(needrm) git push [remote-reponame] [: remote-branch]</span><br>git push -u origin :needrm<br><br><span class="hljs-comment"># 拉取远程仓库别人更改过的代码，如果有</span><br>git pull<br><br><span class="hljs-comment"># 删除远程仓库 git remote rm [remote-reponame]</span><br>git remote <span class="hljs-built_in">rm</span> origin<br></code></pre></td></tr></table></figure><h2 id="克隆分支">克隆分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># git clone &lt;repo-url&gt;</span><br>git <span class="hljs-built_in">clone</span> xxx.git<br><br><span class="hljs-comment"># 克隆指定分支 git clone --branch [或者 -b] &lt;branchname&gt; &lt;repo-url&gt;</span><br>git <span class="hljs-built_in">clone</span> --branch master xxx.git<br>git <span class="hljs-built_in">clone</span> -b master xxx.git<br><br><span class="hljs-comment"># 克隆最后一次提交的版本</span><br>git <span class="hljs-built_in">clone</span> xxx.git --depth=1<br></code></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><ul><li>上传到服务器之前先 comiit 再 push 再 pull ，否则先 pull如果别人代码和我代码一样，会被别人的新代码覆盖了我的新代码</li><li>新的文件会覆盖老的</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL Install By Manual</title>
    <link href="/2024/01/18/MySQL-Install-By-Manual/"/>
    <url>/2024/01/18/MySQL-Install-By-Manual/</url>
    
    <content type="html"><![CDATA[<h2 id="install-mysql-server-安装-mysql-服务">1、Install MySQL Server（安装 MySQL 服务）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd C:/mysql5.7/<br>mysqld -install<br></code></pre></td></tr></table></figure><h2 id="edit-my.ini编辑安装配置文件">2、Edit"my.ini"（编辑安装配置文件）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">basedir</span>=C:/mysql5.<span class="hljs-number">7</span><span class="hljs-comment"># your MySQL folder</span><br><span class="hljs-attr">datadir</span>=C:/mysql5.<span class="hljs-number">7</span>/data<br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">default-character-set</span>=utf8<br></code></pre></td></tr></table></figure><h2id="initialize-mysql-with-no-root-password没有-root-密码的安装">3、InitializeMySQL with no root password（没有 root 密码的安装）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;-insecure&quot;</span> parameter : no root password</span><br>mysqld --initialize-insecure<br></code></pre></td></tr></table></figure><h2 id="start-stop-mysql-service开启-mysql-服务">4、Start &amp; StopMySQL Service（开启 MySQL 服务）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">start MySQL service</span><br>net start MySQL<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">stop MySQL service</span><br>net stop MySQL<br></code></pre></td></tr></table></figure><h2id="mysql-login-set-root-user-password登录和修改-root-用户密码">5、MySQLLogin &amp; Set root user password（登录和修改 root 用户密码）</h2><h3 id="use-root-user-to-login登录到-root-用户">use root user tologin（登录到 root 用户）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">use root user to login</span><br>mysql -u root# &quot;-u&quot; is user<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">use host and port, <span class="hljs-keyword">for</span> exzample</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;-h&quot;</span> host <span class="hljs-string">&quot;-P&quot;</span> port</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">有时候可能要管理的是远程的数据库，所以可以加个 -h 来指定要管理的数据库的服务器 ip 地址</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">前提是允许远程访问</span><br>mysql -h 127.0.0.1 -P 3306<br></code></pre></td></tr></table></figure><h3 id="set-root-user-password设置-root-用户密码">set root userpassword（设置 root 用户密码）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># set root user password<br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><h3id="use-root-user-and-password-to-login-again用密码登录-root-用户">useroot user and password to login again（用密码登录 root 用户）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">use root user and password to login again</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-u 后面跟用户 -p 后面跟密码</span><br>mysql -u root -p 123456<br></code></pre></td></tr></table></figure><h3id="if-you-want-to-remove-root-user-password-then-删除-root-用户密码此步骤可选">ifyou want to remove root user password, then （删除 root用户密码，此步骤可选）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;&#x27;;<br></code></pre></td></tr></table></figure><h3 id="if-you-want-to-exit-mysql退出-mysql">if you want to exitMySQL（退出 MySQL）</h3><p><strong>==you canuse<code>quit</code>or<code>exit</code>==</strong></p><h2id="set-the-environment-variables设置环境变量用于方便登录-mysql">6、Setthe environment variables（设置环境变量用于方便登录 MySQL）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">setx PATH &quot;%PATH%;D:\mysql5.7\bin&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 更新失败的解决方法</title>
    <link href="/2024/01/18/Windows-Update-Failed-Resolve/"/>
    <url>/2024/01/18/Windows-Update-Failed-Resolve/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考文章：</p><p>互联网</p></blockquote><h2 id="解决方法">解决方法</h2><p>在命令提示符(管理员)下键入以下命令：</p><p><code>sfc /SCANNOW</code> 及<code>Dism /Online /Cleanup-Image /ScanHealth</code></p><p>这条命令将扫描全部系统文件并和官方系统文件对比，扫描计算机中的不一致情况。</p><p><code>Dism /Online /Cleanup-Image /CheckHealth</code></p><p>这条命令必须在前一条命令执行完以后，发现系统文件有损坏时使用。</p><p><code>DISM /Online /Cleanup-image /RestoreHealth</code></p><p>这条命令是把那些不同的系统文件还原成官方系统源文件。</p><p>完成后重启，再键入以下命令：<code>sfc /SCANNOW</code>，检查系统文件是否被修复。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux WSL Install</title>
    <link href="/2024/01/18/ArchLinux-WSL-Install/"/>
    <url>/2024/01/18/ArchLinux-WSL-Install/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考文章：</p><p>【1】：<a href="https://zhuanlan.zhihu.com/p/613738433">WSL2 安装ArchLinux —— In The Arch Way</a></p><p>【2】：<ahref="https://cloud.tencent.com/developer/article/1888631">windows系统wsl/wsl2更换虚拟硬盘位置(导出,导入)</a></p><p>【3】：<a href="https://bbs.zsxwz.com/thread-5159.htm">WSL 2安装archlinux</a></p><p>【4】：<ahref="https://blog.csdn.net/pl23k/article/details/131336220">WSL2中安装Cuda遇到的问题</a></p></blockquote><h2 id="环境要求">环境要求</h2><ol type="1"><li>windows 10</li><li>默认 WSL 版本为 2 <code>wsl --set-default-version 2</code></li><li>查看版本： <code>wsl --version</code></li><li>已通过 <code>wsl --install</code> 安装过一个其他的 WSL2发行版，或者有其他 Linux 机器。用于生成 rootfs 文件</li><li>如果觉得此教程很难，建议你使用 ArchWSL 项目： <ahref="https://github.com/yuk7/ArchWSL">https://github.com/yuk7/ArchWSL</a></li></ol><h3 id="安装环境">安装环境</h3><p>安装 wsl2 ，<ahref="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">wsl2内核</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启用 WSL 功能</span><br>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart<br><span class="hljs-comment"># 启用虚拟平台</span><br>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart<br><span class="hljs-comment"># wsl2</span><br>wsl --set-default-version 2<br><br><span class="hljs-comment"># 或者打开 appwiz.cpl 启用 WSL 虚拟机平台 Hyper-V 等功能</span><br></code></pre></td></tr></table></figure><h2 id="安装系统">安装系统</h2><h3 id="方法一打包-rootfs">方法一：打包 rootfs</h3><p>去 ArchLinux 的镜像仓储上下载<code>archlinux-bootstrap-x86_64.tar.gz</code></p><p>在已有的 WSL2 发行版中，执行下述命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从阿里云镜像站上下载 bootstrap-x86_64.tar.gz</span><br>wget https://mirrors.aliyun.com/archlinux/iso/2024.01.01/archlinux-bootstrap-x86_64.tar.gz<br><span class="hljs-comment"># 使用 bsdtar 解压 bootstrap-x86_64.tar.gz 压缩文件</span><br><span class="hljs-comment"># 使用 bsdtar 而非 tar 是因为 GNU tar 不会保留拓展属性（extended attributes）</span><br><span class="hljs-comment"># https://wiki.archlinux.org/title/Full_system_backup_with_tar</span><br><span class="hljs-comment"># x 是解压 p 是保留原文件权限 f 是解压文件的名字，可以加个 v 详细解压信息</span><br>sudo bsdtar -xpf archlinux-bootstrap-x86_64.tar.gz<br><br><span class="hljs-comment"># 重新打包为 archlinux-bootstrap.tar 文件 </span><br><span class="hljs-comment"># -C &lt;目的目录&gt; 或 --directory =&lt;目的目录&gt; 意为切换到指定的目录。</span><br><span class="hljs-comment"># -C patha pathb 把目录 patha 改到 pathb 下</span><br><span class="hljs-comment"># 打包后压缩包里的 patha/test.txt 变成 pathb/test.txt</span><br><span class="hljs-comment"># 如果 pathb 是 . 那么等于打包在当前目录下，妙！</span><br>sudo bsdtar -cpf archlinux-bootstrap.tar -C root.x86_64 .<br><span class="hljs-comment"># 或者使用以下命令</span><br><span class="hljs-built_in">cd</span> root.x86_64<br>sudo bsdtar -cpf ~/archlinux-bootstrap.tar ./*<br><br><span class="hljs-comment"># 移动 archlinux-bootstrap.tar 到 D 盘</span><br><span class="hljs-built_in">mv</span> ~/archlinux-bootstrap.tar /mnt/d<br></code></pre></td></tr></table></figure><p>在 Windows 中导入 archlinux-bootstrap.tar 为 Arch WSL2 发行版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 用法 wsl --import [任意名字] [存放系统的位置] [系统文件]</span><br>wsl --import Arch C:\Arch D:\archlinux-bootstrap.tar<br></code></pre></td></tr></table></figure><h3 id="方法二lxrunoffline">方法二：<ahref="https://github.com/DDoSolitary/LxRunOffline">LxRunOffline</a></h3><ol type="1"><li><p>下载安装 <ahref="https://github.com/DDoSolitary/LxRunOffline">LxRunOffline</a>，把LxRunOffline 添加到环境变量</p></li><li><p>下载 archlinux-bootstrap-x86_64.tar.gz</p></li><li><p>安装 ArchLinux</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装，-r 是 指定 root.x86_64 (压缩包目录)</span><br>LxRunOffline i -n &lt;自定义名称&gt; -f &lt;镜像位置&gt; -d &lt;安装系统的位置&gt; -r root.x86_64<br><span class="hljs-comment"># 比如安装到 d 盘 wsl 文件夹，安装完之后，会在安装目录生产.vhdx系统文件</span><br>LxRunOffline i -n Arch -f D:\archlinux-bootstrap-x86_64.tar.gz -d D:\wsl -r root.x86_64<br><span class="hljs-comment"># 转换版本</span><br>wsl --set-version &lt;名称&gt; 2<br></code></pre></td></tr></table></figure></p></li></ol><p>至此你已经有了一个可用的 Arch WSL 发行版，但是就和安装 Arch一样，你还是需要进行一些初始配置。</p><h2 id="配置系统">配置系统</h2><h3 id="进入系统">进入系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># wsl -d &lt;系统名称&gt; [-u &lt;用户名&gt;]</span><br>wsl -d Arch -u root<br></code></pre></td></tr></table></figure><h3 id="配置-locale">配置 locale</h3><p>设置 en_US.UTF-8</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i -e <span class="hljs-string">&quot;s/^#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&quot;</span> /etc/locale.gen<br>locale-gen<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;LANG=en_US.UTF-8&#x27;</span> &gt; /etc/locale.conf<br><span class="hljs-comment"># 查看是否配置成功</span><br>locale<br></code></pre></td></tr></table></figure><h3 id="配置-pacman">配置 pacman</h3><p>系统没有 vi vim neovim nano emacs 任何编辑器，所以用以下方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置镜像</span><br><span class="hljs-comment"># 先备份一个 镜像源</span><br><span class="hljs-built_in">cp</span> -a /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak<br><span class="hljs-comment"># 用 grep + 正则表达式 过滤中国的源并写到镜像源文件上，33 可以换成 10</span><br><span class="hljs-built_in">cat</span> /etc/pacman.d/mirrorlist.bak | grep -A 33 -E <span class="hljs-string">&#x27;^## China$&#x27;</span> | sed <span class="hljs-string">&#x27;s/#Server/Server/g&#x27;</span> | <span class="hljs-built_in">cat</span> &gt; /etc/pacman.d/mirrorlist<br><span class="hljs-comment"># 否则选择一个你熟悉的，比如说阿里云</span><br><span class="hljs-built_in">cat</span> /etc/pacman.d/mirrorlist.bak | grep -e <span class="hljs-string">&#x27;aliyun&#x27;</span> | sed <span class="hljs-string">&#x27;s/#Server/Server/g&#x27;</span> | <span class="hljs-built_in">cat</span> &gt; /etc/pacman.d/mirrorlist<br><br><span class="hljs-comment"># 初始化 keyring，这是关键安全配置</span><br><span class="hljs-comment"># https://wiki.archlinux.org/title/Pacman/Package_signing</span><br>pacman-key --init<br>pacman-key --populate archlinux<br><span class="hljs-comment"># 安装 keyring</span><br>pacman -Sy archlinux-keyring<br><span class="hljs-comment"># 更新仓库和系统</span><br>pacman -Syyu<br></code></pre></td></tr></table></figure><h3 id="安装必备软件">安装必备软件</h3><p>看自己需求，安装必备软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S base base-devel wget vim vi man neovim git zsh bash-completion net-tools<br></code></pre></td></tr></table></figure><h3 id="配置用户">配置用户</h3><p>创建一个用户 "wind" ，并允许其使用 sudo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置 sudo</span><br><span class="hljs-comment"># 配置编辑器为 vim</span><br>EDITOR=vim<br>visudo<br><span class="hljs-comment"># 意思是让 wheel 组的成员可以 sudo，当然可以去掉 %sudo...</span><br><span class="hljs-comment"># 把 %wheel ALL=(ALL:ALL) ALL 前的注释去掉，如果没有就添加</span><br><br><span class="hljs-comment"># 新增用户并加入 wheel 用户组</span><br><span class="hljs-comment"># useradd [用户名] [-m 创建家目录] [-G 指定组] [-s 指定 shell 默认是 bash]</span><br>useradd wind -m -G wheel -s /bin/bash<br><br><span class="hljs-comment"># 设置 wind 用户的密码</span><br>passwd wind<br><span class="hljs-comment"># 设置 root 用户的密码</span><br>passwd<br></code></pre></td></tr></table></figure><p>如果你用 <a href="https://wiki.archlinux.org/title/Doas">doas -dedicated opnebsd application subexecutor</a> 自行<ahref="https://man.openbsd.org/doas.conf.5">配置</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 doas</span><br>pacman -S opendoas<br><span class="hljs-comment"># 编辑 doas 配置文件</span><br>vim /etc/doas.conf<br><span class="hljs-comment"># 添加以下内容</span><br>permit :wheel<br></code></pre></td></tr></table></figure><h3 id="配置-wsl.conf">配置 <code>wsl.conf</code></h3><ul><li>参照官方文档 <ahref="https://learn.microsoft.com/en-us/windows/wsl/wsl-config">wslconfig</a></li></ul><p><code>vim /etc/wsl.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs conf">[automount]<br>enabled = false<br>root = /mnt<br>options = &quot;metadata&quot;<br>mountFsTab = false<br>ldconfig = false<br><br>[network]<br>hostname = wind<br>generateHosts = false<br>generateResolvConf = true<br><br>[interop]<br>enabled = false<br>appendWindowsPath = false<br><br>[user]<br>default = wind<br><br>[boot]<br>systemd = true<br></code></pre></td></tr></table></figure><h3 id="配置-aur">配置 <a href="https://aur.archlinux.org/">AUR</a></h3><ul><li>参考 <ahref="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/">ArchLinux 中文社区仓库</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 /etc/pacman.conf 文件添加仓库地址</span><br><span class="hljs-comment"># 用 vi vim neovim nano emacs 等都可以，我这里用 echo</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;[archlinuxcn]&#x27;</span> &gt;&gt; /etc/pacman.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Server = https://repo.archlinuxcn.org/$arch&#x27;</span> &gt;&gt; /etc/pacman.conf<br></code></pre></td></tr></table></figure><p>本地信任 key，参见<ahref="https://www.archlinuxcn.org/archlinuxcn-keyring-manually-trust-farseerfc-key/">新系统中安装archlinuxcn-keyring 包前需要手动信任 farseerfc 的 key</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 注册签名</span><br>sudo pacman-key --lsign-key <span class="hljs-string">&quot;farseerfc@archlinux.org&quot;</span><br><span class="hljs-comment"># 更新仓库和系统</span><br>sudo pacman -Syyu<br><span class="hljs-comment"># 安装 keyring</span><br>sudo pacman -S archlinuxcn-keyring<br></code></pre></td></tr></table></figure><p>安装 AUR helper，这里用 <ahref="https://github.com/Morganamilo/paru">paru</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://aur.archlinux.org/paru.git --depth=1<br><span class="hljs-built_in">cd</span> paru<br>makepkg -si<br></code></pre></td></tr></table></figure><h3 id="导出镜像">导出镜像</h3><p>配置完成后，记得将 WSL实例导出，免去重复配置的烦恼。在windows下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关机</span><br>wsl --shutdown<br><span class="hljs-comment"># 导出</span><br><span class="hljs-comment"># 用法 wsl --export [发行版名称] [导出文件到本地位置]</span><br>wsl --<span class="hljs-built_in">export</span> Arch Arch.tar<br><span class="hljs-comment"># 导入</span><br><span class="hljs-comment"># 用法 wsl --import [任意名字] [存放系统的位置] [系统文件]</span><br>wsl --import Arch C:\Arch Arch.tar<br></code></pre></td></tr></table></figure><h2 id="wsl-用法">WSL 用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看 wsl 信息</span><br>wsl -l -v<br><span class="hljs-comment"># 查看 wsl 内核等状态</span><br>wsl -v<br><span class="hljs-comment"># 更新 wsl</span><br>wsl --update [--web-download]<br><span class="hljs-comment"># 删除虚拟机</span><br>wsl --unregister Ubuntu<br><span class="hljs-comment"># 导出</span><br><span class="hljs-comment"># 用法 wsl --export [发行版名称] [导出文件到本地位置]</span><br>wsl --<span class="hljs-built_in">export</span> Arch Arch.tar<br><span class="hljs-comment"># 导入</span><br><span class="hljs-comment"># 用法 wsl --import [任意名字] [存放系统的位置] [系统文件]</span><br>wsl --import Arch C:\Arch Arch.tar<br><span class="hljs-comment"># 设置 wsl 版本</span><br>wsl --set-version Arch 2<br><span class="hljs-comment"># 设置 wsl 默认版本</span><br>wsl --set-default-version 2<br><span class="hljs-comment"># 关机</span><br>wsl --shutdown<br><span class="hljs-comment"># 登录到 wsl</span><br><span class="hljs-comment"># 用法 wsl [-d 发行版本] [-u 指定登录用户]</span><br>wsl -d Arch -u root<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ArchLinux</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH Install &amp; Login</title>
    <link href="/2024/01/18/SSH-Install-Login/"/>
    <url>/2024/01/18/SSH-Install-Login/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-ssh-免密登录远程主机并禁用密码登录">使用 SSH免密登录远程主机并禁用密码登录</h1><blockquote><p>参考文章：</p><p>【1】：<ahref="https://cloud.tencent.com/developer/article/1335758">【SSH】使用SSH 登录远程主机，并禁用密码登录</a></p><p>【2】：<ahref="https://blog.csdn.net/li528405176/article/details/82810342">SSH简介及两种远程登录的方法_ssh</a></p></blockquote><p>方案如下：</p><ul><li>普通用户：密码 + 密钥</li><li>root 用户：密码</li></ul><p>因为禁用 SSH 密码登录后如果出了问题，还可以用 SVN 普通密码登录，而root 用户没有密钥是为了防止密钥泄露后攻击者远程直接登录到 root 用户</p><h2 id="总流程">总流程</h2><ol type="1"><li>远程服务器安装 openssh 并启动服务</li><li>本地生成 ==公钥== 和 ==私钥==</li><li>复制公钥到服务器</li><li>配置服务器的 <code>sshd_config</code>指明公钥位置和禁用密码登录</li><li>本地连接服务器</li></ol><h2 id="远程主机配置-ssh">远程主机配置 ssh</h2><h3 id="先使用密码登录到远程主机">先使用密码登录到远程主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输入密码后进入远程主机系统</span><br>ssh &#123;登录用户&#125;@&#123;ip地址&#125;<br></code></pre></td></tr></table></figure><h3 id="在远程主机安装-openssh-服务并启动">在远程主机安装 openssh服务并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 openssh</span><br>sudo pacman -Sy openssh<br><span class="hljs-comment"># 开机启动 ssh</span><br>sudo systemctl <span class="hljs-built_in">enable</span> sshd<br><span class="hljs-comment"># 启动 ssh</span><br>sudo systemctl start sshd<br></code></pre></td></tr></table></figure><h2 id="本地生成-ssh-秘钥并复制到服务器">本地生成 SSH秘钥并复制到服务器</h2><h3 id="生成本机系统的-ssh-公钥">生成本机系统的 ssh 公钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -t表示类型选项，这里采用rsa加密算法，会提示，直接回车就行</span><br>ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>然后根据提示一步步的按 enter 键即可（其中有一个提示是要求设置私钥口令passphrase，不设置则为空，这里看心情吧，如果不放心私钥的安全可以设置一下），执行结束以后会在下面的路径有两个文件：</p><ul><li><p>Linux 默认保存路径为 <code>~/.ssh/</code></p></li><li><p>Windows 对应为 <code>C:\Users\Administrator\.ssh\</code>（Administrator 是你的用户名）</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/.ssh/id_rsa.pub <span class="hljs-comment"># 公钥路径（存在服务器）</span><br>~/.ssh/id_rsa <span class="hljs-comment"># 私钥路径（存在本地用于连接服务器）</span><br></code></pre></td></tr></table></figure><h3 id="复制公钥">复制公钥</h3><p>使用 <code>ssh-copy-id</code> 命令将公钥复制到远程主机。</p><p><code>ssh-copy-id</code> 会将公钥写到远程主机的<code>~/.ssh/authorized_keys</code> 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-copy-id &#123;登录用户&#125;@&#123;ip地址&#125;<br></code></pre></td></tr></table></figure><ul><li>以上步骤执行完后应该在服务器的 <code>~/.ssh</code> 目录下有一个<code>authorized_keys</code> 文件，没有也没得关系</li><li>主要是 <code>id_rsa_pub</code> 复制到了服务器上就行</li><li>当然也可以用 <code>sftp</code> 工具复制上去</li></ul><h2 id="配置远程服务器-openssh">配置远程服务器 openssh</h2><h3 id="查看远程主机的-ssh-配置">查看远程主机的 ssh 配置</h3><p>配置文件目录 <code>/etc/ssh/</code> 下的 <code>sshd_config</code></p><p>对其进行以下参数进行设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 默认的认证公钥文件</span><br><span class="hljs-comment"># 其中 .ssh/authorized_keys 是你刚才复制到服务器上的公钥的位置</span><br><span class="hljs-comment"># 前面没加 / 表示从 ~ 目录开始 ？</span><br><span class="hljs-comment"># 所以最好把复制上去的公钥重命名为 authorized_keys 并放到 ~/.ssh 下</span><br>AuthorizedKeysFile .ssh/authorized_keys<br><br><span class="hljs-comment"># 禁用密码登录</span><br>PasswordAuthentication no<br></code></pre></td></tr></table></figure><h3 id="设置文件和目录权限">设置文件和目录权限</h3><h4 id="设置.ssh目录权限">（1）设置<code>.ssh</code>目录权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文件拥有者拥有读、写、执行权限,其他组无权限</span><br><span class="hljs-built_in">chmod</span> 700 ~/.ssh/<br></code></pre></td></tr></table></figure><h4id="设置authorized_keys文件权限">（2）设置<code>authorized_keys</code>文件权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文件拥有者拥有读、写权限，同群组和其他群组成员拥有读权限</span><br><span class="hljs-built_in">chmod</span> 644 ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><h4 id="重启-sshd-服务">（3）重启 sshd 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重启 sshd 服务</span><br>sudo systemctl restart sshd<br></code></pre></td></tr></table></figure><h2 id="进行-ssh-方式登录远程主机">进行 ssh 方式登录远程主机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ./id_rsa 是你的私钥位置，用于登录</span><br>ssh -i ./id_rsa &#123;登录用户&#125;@&#123;ip地址&#125;<br></code></pre></td></tr></table></figure><ul><li><p>如果出现错误</p></li><li><p>删除本地主机的 .ssh 目录下的 known_hosts 再进行登录</p></li><li><p>再不行就上网找找解决方法</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux Install Manual</title>
    <link href="/2024/01/18/Arch-Install/"/>
    <url>/2024/01/18/Arch-Install/</url>
    
    <content type="html"><![CDATA[<h1 id="archlinux-安装教程">ArchLinux 安装教程</h1><blockquote><p>参考文章：</p><p>官方文档 ArchWiki 用 <a href="https://rufus.ie/zh/">Rufus</a> , <ahref="https://www.ultraiso.com">UltraISO</a> , <ahref="https://www.ventoy.net/cn/index.html">Ventoy</a> 等工具进行 U盘启动制作</p><p>制作后开机进入启动盘选第一项</p></blockquote><h2 id="第一阶段准备">第一阶段：准备</h2><h3 id="开机后设置字体大小">1. 开机后设置字体大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setfont /usr/share/kbd/consolefonts/LatGrkCyr-12x22.psfu.gz<br></code></pre></td></tr></table></figure><h3 id="连接网络">2. 连接网络</h3><h4 id="第一种方法">第一种方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip <span class="hljs-built_in">link</span><span class="hljs-comment"># 查看网卡</span><br>rfkill unblock wifi<span class="hljs-comment"># 取消禁用wifi设备（可选）</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> wlan0 up<span class="hljs-comment"># 启动网卡</span><br>iwlist wlan0 scan<span class="hljs-comment">#扫描wlan（也可以用wifi-menu）</span><br><span class="hljs-comment"># 很多结果可以用以下的管道命令</span><br>iwlist wlan0 scan | grep ESSID<br><br><span class="hljs-comment">#连接</span><br>wpa_passphrase 网络 密码 &gt; 文件名<br><span class="hljs-comment"># wpa_passphrase Wifi password &gt; internet.conf</span><br><br><span class="hljs-comment"># 连接格式，&#x27;&amp;&#x27;表示后台运行</span><br>wpa_supplicant -i interface -c configuration.conf &amp;<br><span class="hljs-comment"># wpa_supplicant -i Wifi -c internet.conf &amp;</span><br><br><span class="hljs-comment"># 此时还没有网络ping baidu.com没反应，还要动态分配ip地址</span><br><span class="hljs-comment"># Dynamic Host Configuration Protocol</span><br>dhcpcd &amp;<br><br><span class="hljs-comment"># 检查是否连接成功</span><br>ping baidu.com<br></code></pre></td></tr></table></figure><h4 id="第二种方法">第二种方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输入iwctl进入交互式提示符（interactive prompt），配置并连接到互联网。</span><br>iwctl<br>station wlan0 scan<br>station wlan0 get-networks<br>station wlan0 connect &lt;network name&gt;<br>station wlan0 show<br>quit<span class="hljs-comment"># 回到命令行</span><br></code></pre></td></tr></table></figure><h3 id="更新系统时间">3. 更新系统时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl list-timezones | egrep -o <span class="hljs-string">&quot;Asia/B.*&quot;</span><br>timedatectl set-timezone <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br>timedatectl set-ntp <span class="hljs-literal">true</span><span class="hljs-comment"># ntp缩写（Network Time Protocol）</span><br></code></pre></td></tr></table></figure><h2 id="第二阶段安装">第二阶段：安装</h2><blockquote><p>引导和硬盘格式有且不仅限几种流行方式（描述不清请见谅……）</p><p>BIOS + MBR （以前电脑常见）</p><p>BIOS + GPT （少见）</p><p>UEFI + MBR （少见）</p><p>UEFI + GPT （现在电脑常见）</p><p>我这里采用 UEFI + GPT</p><p>如果你的电脑不支持 UEFI 可以选用 BIOS + MBR 或者 BIOS + GPT</p></blockquote><h3 id="对硬盘分区以及格式化">1. 对硬盘分区以及格式化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看要安装 ArchLinux 系统的硬盘代号，一般是 /dev/xxx</span><br>fdisk -l<br><br><span class="hljs-comment"># s 参数是 script 的意思，/dev/xxx 是要安装系统的硬盘代号</span><br>parted -s /dev/xxx mklabel gpt<br><span class="hljs-comment"># 如果是 MBR 则用下面的命令</span><br>parted -s /dev/xxx mklabel msdos<br><br><span class="hljs-comment"># 开始分区操作</span><br>fdisk /dev/xxx<br></code></pre></td></tr></table></figure><h4 id="分区操作">分区操作</h4><h5 id="布局参考">布局参考</h5><h6 id="uefi-with-gpt-其实只要一个主分区和一个-efi-分区就够了">UEFI withGPT ==（其实只要一个主分区和一个 EFI 分区就够了……）==</h6><table><thead><tr><th style="text-align: center;">Mount point</th><th style="text-align: center;">Partition</th><th style="text-align: center;">Partition type</th><th style="text-align: center;">Suggested size</th></tr></thead><tbody><tr><td style="text-align: center;">/mnt/boot or /mnt/efi</td><td style="text-align: center;">/dev/efi_system_partition</td><td style="text-align: center;">EFI system partition</td><td style="text-align: center;">At least 300 MiB</td></tr><tr><td style="text-align: center;">[SWAP]</td><td style="text-align: center;">/dev/swap_partition</td><td style="text-align: center;">Linux swap</td><td style="text-align: center;">More than 512MiB</td></tr><tr><td style="text-align: center;">/mnt</td><td style="text-align: center;">/dev/root_partition</td><td style="text-align: center;">Linux x86-64 root (/)</td><td style="text-align: center;">Remainder of the device</td></tr></tbody></table><h6 id="bios-with-mbr-其实只要一个主分区就够了">BIOS with MBR==（其实只要一个主分区就够了……）==</h6><table style="width:100%;"><thead><tr><th style="text-align: center;">Mount point</th><th style="text-align: center;">Partition</th><th style="text-align: center;">Partition type</th><th style="text-align: center;">Suggested size</th></tr></thead><tbody><tr><td style="text-align: center;">[SWAP]</td><td style="text-align: center;">/dev/swap_partition</td><td style="text-align: center;">Linux swap</td><td style="text-align: center;">More than 512MiB</td></tr><tr><td style="text-align: center;">/mnt</td><td style="text-align: center;">/dev/root_partition</td><td style="text-align: center;">Linux</td><td style="text-align: center;">Remainder of the device</td></tr></tbody></table><ul><li>我这里创建两个分区（EFI分区 和 主分区）</li></ul><h5 id="创建第一个分区">创建第一个分区</h5><p><code>我想创建一个编号为1，容量为 1GiB 的EFI分区，即 BOOT/EFI 分区，大小看着给</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): m                   <span class="hljs-comment"># 按&#x27;m&#x27;看帮助</span><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): n                   <span class="hljs-comment"># 按&#x27;n&#x27;新建分区</span><br>Partiton number (1-128, default 1):       <span class="hljs-comment"># 分区编号（默认是1），按回车</span><br>First sector (xx-xxxx, default xx):       <span class="hljs-comment"># 开始扇区（默认是xx），按回车</span><br><br><span class="hljs-comment"># 结束扇区（默认是xxxx），你可心加或减，</span><br><span class="hljs-comment"># 所以输入 ‘+1G’ 然后按回车</span><br><br>Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (xx-xxxx, default xxxx): +1G<br><br>Created a new partiton 1 of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;Linux filesystem&#x27;</span> and of size 1 GiB.<br>Partition <span class="hljs-comment">#1 contains a vfat signature.</span><br><br>Do you want to remove the signature? [Y]es/[N]o: Y<br><br>The signature will be removed by a write <span class="hljs-built_in">command</span>.<br></code></pre></td></tr></table></figure><h5 id="创建第二个分区">创建第二个分区</h5><p><code>我想创建一个编号为2，容量为全部的主分区</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): n                                 <span class="hljs-comment"># 回车即可</span><br>Partition number (2-128, default 2):                  <span class="hljs-comment"># 回车即可</span><br>First sector (xx-xxxx, default xx):                     <span class="hljs-comment"># 回车即可</span><br>Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (xx-xxxx, default xxxx):      <span class="hljs-comment"># 回车即可</span><br><br>Created a new partiton 2 of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;Linux filesystem&#x27;</span> and of size x GiB.<br>Partition <span class="hljs-comment">#2 contains a ext4 signature.</span><br><br>Do you want to remove the signature? [Y]es/[N]o: Y<br><br>The signature will be removed by a write <span class="hljs-built_in">command</span>.<br></code></pre></td></tr></table></figure><h5 id="分区创建完成">分区创建完成</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): p             <span class="hljs-comment"># 输入 ‘p’ 来确认分区信息内容</span><br><br>----------------内容---------------<br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br><br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): w             <span class="hljs-comment"># 输入 ‘w’ 来写入分区</span><br>The partition table has been altered.<br>Calling ioctl() to re-rend partition table.<br>Syncing disks.<br></code></pre></td></tr></table></figure><h5 id="分区写入完成">分区写入完成</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对分区1 ( BOOT/EFI 分区 ) 进行格式化，引导分区必需要求 fat 格式</span><br>mkfs.fat -F32 引导分区         <span class="hljs-comment"># mkfs 是 Make File System 的缩写</span><br><br><span class="hljs-comment"># 对分区2 ( 主分区 ) 进行格式化，一般为 ext4 格式</span><br>mkfs.ext4 主分区<br></code></pre></td></tr></table></figure><h3 id="配置pacman">2. 配置<code>pacman</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/pacman.conf<br><br>住下看会找到 [core]、[extra]、[community] 这是软件源，在 vim 按 gf 进入文件<br><br>把 <span class="hljs-comment">#China源前面的注释去了</span><br></code></pre></td></tr></table></figure><ul><li>新版好像连上网就自动配置好源了</li></ul><h3 id="正式安装arch-linux">3. 正式安装Arch Linux</h3><h4id="先挂载要安装的主分区和引导分区">先挂载要安装的主分区和引导分区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看要安装系统的硬盘代号</span><br>fdisk -l<br><br>mount /dev/主分区 /mnt                 <span class="hljs-comment"># 挂载主分区到/mnt</span><br><span class="hljs-built_in">ls</span> /mnt<br><br><span class="hljs-built_in">mkdir</span> -p /mnt/boot/efi   <span class="hljs-comment"># 创建 /mnt/boot/efi 文件夹</span><br>mount /dev/引导分区 /mnt/boot/efi<span class="hljs-comment"># 挂载引导分区到 /mnt/boot/efi</span><br></code></pre></td></tr></table></figure><h4 id="正式安装">正式安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装前先初始化 pacman</span><br>pacman-key --init<br>pacman-key --populate archlinux<br><br><span class="hljs-comment"># 更新 keyring (不用？)</span><br>pacman -Syyu<br><br><span class="hljs-comment"># 安装系统软件到 /dev/xxx 挂载点 即 /mnt 下</span><br><span class="hljs-comment"># 也可以安装 linux-lts linux-lts-headers</span><br><span class="hljs-comment"># vi vim nano zsh 等是一些常用软件，可以不安装……</span><br>pacstrap /mnt base base-devel linux linux-headers linux-firmware vi vim nano dhcpcd openssh grub zsh bash-completion dosfstools parted net-tools wget curl git<br></code></pre></td></tr></table></figure><h4 id="安装结束后的一些操作">安装结束后的一些操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成 fs 表</span><br><span class="hljs-comment"># fstab 是 File Systems Table 的缩写，gen 是 generate 的缩写</span><br><span class="hljs-comment"># U是 UUIDs 的缩写，UUID 是 Universally Unique Identifier (通用唯一识别码)</span><br>genfstab -U /mnt &gt; /mnt/etc/fstab<br><br><span class="hljs-comment"># 查看一下有没有东西</span><br><span class="hljs-built_in">cat</span> /mnt/etc/fstab<br></code></pre></td></tr></table></figure><h3 id="安装完成后的一些操作">3. 安装完成后的一些操作</h3><h4 id="时间配置">时间配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入系统</span><br>arch-chroot /mnt<br><br><span class="hljs-comment">#创建软链接</span><br><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><br><span class="hljs-comment">#写入时间</span><br>hwclock --systohc<br></code></pre></td></tr></table></figure><h4 id="本地化">本地化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 locale.gen 文件，把 #en_US.UTF-8 UTF-8 前的 # 号去掉</span><br>vim /etc/locale.gen<br><span class="hljs-comment"># 输入以下内容</span><br>en_US.UTF-8 UTF-8<br><br><span class="hljs-comment"># 本地化</span><br>locale-gen<br><br><span class="hljs-comment"># 编辑本地语言</span><br>vim /etc/locale.conf<br><span class="hljs-comment"># 输入以下内容</span><br>LANG=en_US.UTF-8<br><br><span class="hljs-comment"># 编辑主机名</span><br>vim /etc/hostname<br><span class="hljs-comment"># 输入主机名，我的主机名是 wind</span><br>wind<br><br><span class="hljs-comment"># 编辑hosts文件</span><br>vim /etc/hosts<br><span class="hljs-comment"># 输入以下内容</span><br>127.0.0.1       localhost<br>::1             localhost<br>127.0.1.1       wind.localdomain    wind<br></code></pre></td></tr></table></figure><h4 id="更改密码">更改密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更改密码</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;password&quot;</span> | passwd --stdin root<br><span class="hljs-comment"># 或用 passwd</span><br>passwd<br></code></pre></td></tr></table></figure><h4 id="安装启动相关的程序">安装启动相关的程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman-key --init<br>pacman-key --populate archlinux<br><br><span class="hljs-comment"># 此处的 “intel-ucode” 是根据你的处理器来决定的，可能是 “amd-ucode”，我的就是 amd</span><br>pacman -S grub efibootmgr amd-ucode os-prober<br><br><span class="hljs-comment"># 创建 grub 文件夹</span><br><span class="hljs-built_in">mkdir</span> /boot/grub<br><br><span class="hljs-comment"># 生成 grub 配置文件到 grub.cfg 中</span><br>grub-mkconfig &gt; /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h4 id="安装grub">安装grub</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装前先确认系统架构</span><br><span class="hljs-built_in">uname</span> -m<br><br><span class="hljs-comment"># 我的是 x86_64 结构，和 uefi+gpt 的</span><br>grub-install --target=x86_64-efi --efi-directory=/boot/efi<br><br><span class="hljs-comment"># 如果是 bios+mbr 的话用，/dev/xxx 是你的硬盘</span><br>grub-install --targe=i386-pc /dev/xxx<br></code></pre></td></tr></table></figure><h4 id="最后的一些工作">最后的一些工作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动 dhcpcd 服务自动生成 /etc/resolv.conf</span><br>systemctl start dhcpcd<br>systemctl <span class="hljs-built_in">enable</span> dhcpcd<br><span class="hljs-comment"># 如果你用 NetworkManager 的话自行配置</span><br><br><span class="hljs-comment"># 重启</span><br>reboot<br></code></pre></td></tr></table></figure><h4 id="安装完成重启后">安装完成，重启后</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开机设置字体大一点</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;setfont LatGrkCyr-12x22&#x27;</span> &gt;&gt; /etc/bashrc<br></code></pre></td></tr></table></figure><h4 id="新建一个用户">新建一个用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -G 是指定用户所在组，-s 是指定用户所用的 shell</span><br>useradd -m wind -G wheel -s /usr/bin/bash<br><span class="hljs-comment"># 修改用户密码</span><br>passwd wind<br>visudo<br><span class="hljs-comment"># 把 %wheel ALL=(ALL:ALL) ALL 前的注释去掉，如果没有就添加</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Install Input</title>
    <link href="/2023/09/05/CentOS_Install_Input/"/>
    <url>/2023/09/05/CentOS_Install_Input/</url>
    
    <content type="html"><![CDATA[<h1 id="安装fctix输入法">5. 安装fctix输入法</h1><h2 id="安装额外源如果安装了可忽略此步骤">5.1安装额外源（如果安装了可忽略此步骤）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install epel-release<br></code></pre></td></tr></table></figure><h2 id="卸载ibus此步是为了避免冲突">5.2卸载ibus（此步是为了避免冲突）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -e --nodeps ibus<br></code></pre></td></tr></table></figure><h2 id="安装fcitx组件和im-chooser">5.3 安装fcitx组件和im-chooser</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install fcitx*<br>yum -y install im-chooser<br></code></pre></td></tr></table></figure><h2 id="选择fcitx输入法">5.4 选择fcitx输入法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">im-chooser<br></code></pre></td></tr></table></figure><p><img src="/images/CentOS_Install_Input/1.png" srcset="/img/loading.gif" lazyload /></p><h2 id="自定义需要的输入法">5.5 自定义需要的输入法</h2><p><img src="/images/CentOS_Install_Input/2.png" srcset="/img/loading.gif" lazyload /></p><h2 id="最后的工作">5.6 最后的工作</h2><h3 id="在etcbashrc和.zshrc中加入以下代码">5.6.1在/etc/bashrc和~/.zshrc中加入以下代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在/etc/bashrc和~/.zshrc中加入以下代码</span><br><span class="hljs-built_in">export</span> GTK_IM_MODULE=fcitx<br><span class="hljs-built_in">export</span> QT_IM_MODULE=fcitx<br><span class="hljs-built_in">export</span> XMODIFIERS=@im=fcitx<br></code></pre></td></tr></table></figure><h3 id="添加fcitx开机启动">5.6.2添加fcitx开机启动</h3><p><img src="/images/CentOS_Install_Input/3.png" srcset="/img/loading.gif" lazyload /></p><p><img src="/images/CentOS_Install_Input/4.png" srcset="/img/loading.gif" lazyload /></p><p><img src="/images/CentOS_Install_Input/5.png" srcset="/img/loading.gif" lazyload /></p><p>至此fcitx输入法安装完成！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Remove External Kernal</title>
    <link href="/2023/09/05/CentOS_Remove_External_Kernal/"/>
    <url>/2023/09/05/CentOS_Remove_External_Kernal/</url>
    
    <content type="html"><![CDATA[<h1 id="删除多余内核">4.删除多余内核</h1><h2 id="打开终端查看当前使用的内核">4.1打开终端，查看当前使用的内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><h2 id="查看所有内核选项">4.2 查看所有内核选项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -qa | grep kernel<br></code></pre></td></tr></table></figure><h2 id="进入root模式删除多余内核">4.3 进入root模式，删除多余内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum remove 多余内核<br></code></pre></td></tr></table></figure><h2 id="重新编译引导可不做">4.4 重新编译引导（可不做）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub2-mkconfig -o /boot/grub2/grub.cfg<br></code></pre></td></tr></table></figure><h2 id="重启系统">4.5 重启系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br><span class="hljs-comment"># 或者</span><br>init 6<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Install XFCE Windows Manager</title>
    <link href="/2023/09/04/CentOS_Install_XFCE-WM/"/>
    <url>/2023/09/04/CentOS_Install_XFCE-WM/</url>
    
    <content type="html"><![CDATA[<h1 id="安装-xfce-桌面环境">3. 安装 <ahref="https://www.gnome.org/">XFCE</a> 桌面环境</h1><p>桌面环境有很多，我选择 <a href="https://www.xfce.org/">XFCE</a>，因为相对于 <a href="https://www.gnome.org/">GNOME</a> 来说快，相对于<a href="https://i3wm.org/">I3</a> 又方便。</p><p>有个不𠀾孬的地方是 CentOS 用 XFCE 可能会有一些 VMTools的问题，以前发现的</p><p><a href="https://i3wm.org/">I3</a> 也不错，不过我没用过</p><h2 id="安装额外源">3.1 安装额外源</h2><p>在 root 用户身份下输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装额外源</span><br>yum -y install epel-release<br><br><span class="hljs-comment"># 清理yum缓存</span><br>yum clean all<br><br><span class="hljs-comment"># 升级一下，不然下面的重建缓存命令用不了</span><br>yum upgrade -y<br><br><span class="hljs-comment"># 重建yum缓存</span><br>yum makecache<br></code></pre></td></tr></table></figure><h2 id="安装xfce">3.2 安装xfce</h2><p>在root用户身份下输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看组信息</span><br>yum grouplist<br><br><span class="hljs-comment"># 安装&quot;X Window system&quot;组</span><br>yum -y groupinstall <span class="hljs-string">&quot;X Window system&quot;</span><br><br><span class="hljs-comment"># 安装xfce组</span><br>yum -y groupinstall xfce<br><br><span class="hljs-comment"># 安装wqy文泉驿字体</span><br>yum -y install wqy*<br><br><span class="hljs-comment"># 设置默认的界面是graphical</span><br>systemctl set-default graphical.target<br><br><span class="hljs-comment"># 切换到图形界面</span><br>systemctl isolate graphical.target<br></code></pre></td></tr></table></figure><blockquote><p>安装好后应该会自动安装一个 <ahref="https://wiki.gnome.org/Projects/GDM">GDM - GNOME DisplayManager</a> ，因为没有这个东西是没法进入 XFCE 桌面的。</p><p>类似好像有 <a href="https://github.com/canonical/lightdm">LightDM -Light Display Manager</a> 等等</p></blockquote><h2 id="用xfce登陆hadoop">3.3 用xfce登陆hadoop</h2><h3 id="点击hadoop用户">3.3.1 点击hadoop用户</h3><p><img src="/images/CentOS_Install_XFCE-WM/1.png" srcset="/img/loading.gif" lazyload /></p><h3 id="点击小齿轮--选择xfce会话不然会进入openbox没有界面">3.3.2==点击小齿轮--&gt;选择Xfce会话==，不然会进入Openbox没有界面</h3><p><img src="/images/CentOS_Install_XFCE-WM/2.png" srcset="/img/loading.gif" lazyload /></p><h3 id="选择使用默认配置">3.3.3 选择使用默认配置</h3><p><img src="/images/CentOS_Install_XFCE-WM/3.png" srcset="/img/loading.gif" lazyload /></p><p>至此xfce桌面环境安装完成！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Install VMTools</title>
    <link href="/2023/09/04/CentOS_Install_VMTools/"/>
    <url>/2023/09/04/CentOS_Install_VMTools/</url>
    
    <content type="html"><![CDATA[<h1 id="给centos安装vmtools">2. 给CentOS安装vmtools</h1><h2 id="更改为使用物理驱动器">2.1 更改为使用物理驱动器</h2><p><img src="/images/CentOS_Install_VMTools/1.png" srcset="/img/loading.gif" lazyload /></p><h2 id="在vmware上依次选择虚拟机--重新安装vmware-tools">2.2在VMware上依次选择虚拟机--&gt;重新安装VMware Tools</h2><p><img src="/images/CentOS_Install_VMTools/2.png" srcset="/img/loading.gif" lazyload /></p><h2 id="在root用户下输入以下命令">2.3 在root用户下输入以下命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个目录/soft在根目录下用于存放软件</span><br><span class="hljs-built_in">mkdir</span> /soft<br><br><span class="hljs-comment"># 把该目录的权限所属用户改为hadoop</span><br><span class="hljs-built_in">chown</span> -R　hadoop /soft<br><br><span class="hljs-comment"># 把该目录的权限所属组改为hadoop</span><br><span class="hljs-built_in">chgrp</span> -R　hadoop /soft<br><br><span class="hljs-comment"># 在/mnt下创建目录cdrom</span><br><span class="hljs-built_in">mkdir</span> /mnt/cdrom<br><br><span class="hljs-comment"># 把cd挂载到/mnt/cdrom下</span><br>mount /dev/cdrom /mnt/cdrom<br><br><span class="hljs-comment"># 复制cdrom中的VMwareTools包到/soft目录下</span><br><span class="hljs-built_in">cp</span> /mnt/cdrom/VMwareTools-xx.xx.xx.tar.gz /soft<br><br><span class="hljs-comment"># 取消挂载</span><br>umount /mnt/cdrom<br><br><span class="hljs-comment"># 切换到/soft目录下</span><br><span class="hljs-built_in">cd</span> /soft<br><br><span class="hljs-comment"># 查看一下当前文件</span><br><span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># 解压VMwareTools压缩包</span><br>tar -xzvf VMwareTools-xx.xx.xx.tar.gz<br><br><span class="hljs-comment"># 切换到解压目录下</span><br><span class="hljs-built_in">cd</span> vmware-tools-distrib<br><br><span class="hljs-comment"># 运行vmware tools安装脚本</span><br>./vmware-install.pl<br></code></pre></td></tr></table></figure><p>以上命令中最后一条命令有可能运行不了，解决办法是更新一下系统软件，其实是gcc没安装的问题，也可以借此顺便安装一下vim编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新软件</span><br>yum upgrade -y<br><span class="hljs-comment"># 或者</span><br>yum update -y<br><br><span class="hljs-comment"># 安装gcc</span><br>yum -y install gcc<br><span class="hljs-comment"># 安装vim编译器</span><br>yum -y install vim<br></code></pre></td></tr></table></figure><p>再次安装vmware-tools就不会报错了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行vmware tools安装脚本</span><br>./vmware-install.pl<br></code></pre></td></tr></table></figure><p>在安装过程中有许多选项，遇到目录按回车，遇到yes/no则输入yes回车</p><h2 id="卸载-vmware-tools">2.4 卸载 VMware Tools</h2><p>如何卸载 VMware Tools 呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以root身份运行以下命令即可</span><br>vmware-uninstall-tools.pl<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Install</title>
    <link href="/2023/09/04/CentOS_Install/"/>
    <url>/2023/09/04/CentOS_Install/</url>
    
    <content type="html"><![CDATA[<h1 id="安装centos">1. 安装CentOS</h1><h2 id="更改语言">1.1 更改语言</h2><p><img src="/images/CentOS_Install/1.png" srcset="/img/loading.gif" lazyload /></p><h2 id="手动进行分区">1.2 手动进行分区</h2><p><img src="/images/CentOS_Install/2.png" srcset="/img/loading.gif" lazyload /></p><h2 id="根目录50gboot目录4gswap交换分区6g">1.3根目录50G、boot目录4G、swap交换分区6G</h2><p><img src="/images/CentOS_Install/3.png" srcset="/img/loading.gif" lazyload /></p><h2 id="点击接受更改">1.4 点击接受更改</h2><p><img src="/images/CentOS_Install/4.png" srcset="/img/loading.gif" lazyload /></p><h2 id="更改网络和主机名主机名为master以太网开关打开">1.5更改网络和主机名，主机名为master以太网开关打开</h2><p><img src="/images/CentOS_Install/5.png" srcset="/img/loading.gif" lazyload /></p><h2 id="设置root密码和新建一个名为hadoop的用户">1.6设置root密码和新建一个名为hadoop的用户</h2><p><img src="/images/CentOS_Install/6.png" srcset="/img/loading.gif" lazyload /></p><h2 id="点击重启">1.7 点击重启</h2><p><img src="/images/CentOS_Install/7.png" srcset="/img/loading.gif" lazyload /></p><p>至此安装CentOS成功了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch Install  VMWare-Tools</title>
    <link href="/2023/08/27/Arch_Install_VMWare-Tools/"/>
    <url>/2023/08/27/Arch_Install_VMWare-Tools/</url>
    
    <content type="html"><![CDATA[<h1 id="arch-linux-安装-vmware-tools">Arch Linux 安装 VMWare-Tools</h1><h2 id="第一步安装软件">第一步：安装软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 open-vm-tools</span><br>sudo pacman -S open-vm-tools<br><br><span class="hljs-comment"># 不安装这个就会复制粘贴失败</span><br>sudo pacman -S gtkmm3<br></code></pre></td></tr></table></figure><h2 id="第二步打开服务">第二步：打开服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> vmtoolsd.service<br>sudo systemctl <span class="hljs-built_in">enable</span> vmware-vmblock-fuse.service<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DataStorageUnitConvertRelationship</title>
    <link href="/2023/08/27/DataStorageUnitConvertRelationship/"/>
    <url>/2023/08/27/DataStorageUnitConvertRelationship/</url>
    
    <content type="html"><![CDATA[<h1 id="数据存储单位之间的换算关系">数据存储单位之间的换算关系</h1><table width="40%" height="100%" border="1px solid black" align="center"><th align="center"><font size="5px">单位</font></th><th align="center"><font size="5px">换算关系</font></th><tr><td align="center">Byte（字节）</td><td align="center">1 Byte = 8 bit</td></tr><tr><td align="center">KB（Kilobyte，千字节）</td><td align="center">1 KB = 1024 Byte</td></tr><tr><td align="center">MB（Megabyte，兆字节）</td><td align="center">1 MB = 1024 KB</td></tr><tr><td align="center">GB（Gigabyte，吉字节）</td><td align="center">1 GB = 1024 MB</td></tr><tr><td align="center">TB（Trillionbyte，太字节）</td><td align="center">1 TB = 1024 GB</td></tr><tr><td align="center">PB（Petabyte，拍字节）</td><td align="center">1 PB = 1024 TB</td></tr><tr><td align="center">EB（Exabyte，艾字节）</td><td align="center">1 EB = 1024 PB</td></tr><tr><td align="center">ZB（Zettabyte，译字节）</td><td align="center">1 ZB = 1024 EB</td></tr></table>]]></content>
    
    
    
    <tags>
      
      <tag>common_sence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSHLoginGithub</title>
    <link href="/2023/08/12/UseSSHwithTokenLoginGithub/"/>
    <url>/2023/08/12/UseSSHwithTokenLoginGithub/</url>
    
    <content type="html"><![CDATA[<h1 id="github-使用-ssh-免密与-token-登录配置">Github 使用 SSH 免密与Token 登录配置</h1><blockquote><p>参考文章：</p><ol type="1"><li>https://cloud.tencent.com/developer/article/1861466</li><li>https://leezhiy.github.io/2020/03/15/2020-03-15-Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Github-Pages-%E6%89%98%E7%AE%A1-Hexo%EF%BC%89/</li><li>https://juejin.cn/post/7129443602379309086</li></ol><p>环境：Windows 10</p><p>写这篇文章原因：配置博客要用到</p></blockquote><h2 id="生成密钥并添加到-github-上">1. 生成密钥并添加到 <ahref="https://github.com">Github</a> 上</h2><ul><li><p>回到家目录，在家目录下创建一个 <code>.ssh</code> 文件夹，在<code>.ssh</code> 中生成两个密钥</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># change directory</span><br><span class="hljs-built_in">cd</span> /d C:\Users\yourname\<br><br><span class="hljs-comment"># make a new directory named `.ssh`</span><br><span class="hljs-built_in">mkdir</span> .ssh<br><br><span class="hljs-comment"># go to `.ssh`</span><br><span class="hljs-built_in">cd</span> .ssh<br><br><span class="hljs-comment"># generate a ssh-key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><br></code></pre></td></tr></table></figure></p></li><li><p>到这里会提示你输入一个存放密钥的路径，建议直接回车就好，那样子就会生成在你当下的目录，即<code>.ssh</code> 里。</p></li><li><p>接着会提示你输入一个私钥密码 passphrase，如果你设置了，以后每次使用 SSH 登录都要输入。</p></li><li><p>接着把 <code>id_rsa.pub</code> 中的内容复制，待会在 <ahref="https://github.com/">github</a> 中用。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># this command means that copy content to clipboard</span><br>clip &lt; .\id_rsa.pub<br></code></pre></td></tr></table></figure></p></li><li><p>接着到 <a href="https://github.com">github</a>上登录，然后依次点击：你的头像 ---&gt;&gt; Settings ---&gt;&gt; SSH andGPG keys ---&gt;&gt; New SSH key</p></li><li><p>然后 Title 随便写，再把刚刚所复制的内容粘贴到 Key 的输入框上，Key type 默认就好，再点击 Add SSH key 就完成添加了。</p></li></ul><h2 id="测试是否添加成功">2. 测试是否添加成功</h2><ul><li><p>在测试之前需要下载安装 <a href="https://git-scm.com/">git</a>和稍稍配置一下。</p></li><li><p>git 下载地址：https://git-scm.com/</p></li><li><p>下载好之后，默认点下一步安装就行，然后打开 <code>git bash</code>在里面输入以下代码：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># config your github name</span><br>git config --global user.name  <span class="hljs-string">&quot;Your Github Profile Name&quot;</span><br><span class="hljs-comment"># config your github email</span><br>git config --global user.email <span class="hljs-string">&quot;email@yourgithubmail.com&quot;</span><br></code></pre></td></tr></table></figure></p></li><li><p>然后用以下命令进行测试：注意：git@github.com 不要更改！</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure></p></li><li><p>如果刚刚生成密钥时配置了密码，就会提示输入密码</p></li><li><p>如果出现以下内容就说明配置成功了：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi yourgithubname! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure></p></li><li><p>也有可能会出现一些错误，例如我当时就出现了以下报错：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kex_exchange_identification: Connection closed by remote host<br></code></pre></td></tr></table></figure></p></li><li><p>出现以下错误解决方案：1、关代理；2、将 <ahref="https://github.com">Github</a> 的连接端口从 22 更改为 443，具体操作如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># back to `.ssh` directory</span><br><span class="hljs-built_in">cd</span> C:\Users\yourname\.ssh<br><br><span class="hljs-comment"># create a `config` file of git</span><br><span class="hljs-built_in">touch</span> config<br><br><span class="hljs-comment"># enter code in `config` file</span><br>vim config<br>----------------code----------------<br>Host github.com<br>    HostName ssh.github.com<br>    User git<br>    Port 443<br>----------------code----------------<br></code></pre></td></tr></table></figure></p></li><li><p>再测试应该没什么问题了，没有 vim 编辑器用记事本也行，创建<code>config</code> 文件在 <code>.ssh</code> 目录下，输入以上的<code>code</code> 部分代码。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 配置 coc 插件记录</title>
    <link href="/2023/08/11/vim-coc_config/"/>
    <url>/2023/08/11/vim-coc_config/</url>
    
    <content type="html"><![CDATA[<h1 id="vim-配置-coc-插件记录">vim 配置 coc 插件记录</h1><blockquote><p>本文使用环境：Windows + gVim</p><p>建议先看官方文档：https://github.com/neoclide/coc.nvim</p></blockquote><h2 id="第一步环境配置">第一步：环境配置</h2><h3 id="安装-vim-plug">安装 vim-plug</h3><ul><li>到 https://github.com/junegunn/vim-plug 上下载 <code>plug.vim</code>放到 <code>.vim/autoload</code> 目录下</li><li>如果是 <ahref="https://github.com/vim/vim-win32-installer/releases">gvim</a>则放在 gvim 目录下的 autoload 里</li><li>也可以直接用以下官方给出的命令</li></ul><h4 id="vim">Vim</h4><ul><li><p>Unix</p><p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -fLo ~/.<span class="hljs-keyword">vim</span>/autoload/plug.<span class="hljs-keyword">vim</span> --create-dirs \<br>    https://raw.githubusercontent.<span class="hljs-keyword">com</span>/junegunn/<span class="hljs-keyword">vim</span>-plug/master/plug.<span class="hljs-keyword">vim</span><br></code></pre></td></tr></table></figure></p></li><li><p>You can automate the process by putting the command in your Vimconfiguration file as suggested <ahref="https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation">here</a>.</p></li><li><p>Windows (PowerShell)</p><p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">iwr -useb https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/junegunn/</span>vim-plug<span class="hljs-regexp">/master/</span>plug.vim |`<br>    ni <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/vimfiles/</span>autoload/plug.vim -Force<br></code></pre></td></tr></table></figure></p></li></ul><h4 id="neovim">Neovim</h4><ul><li><p>Unix, Linux</p><p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">sh -c &#x27;curl -fLo &quot;$&#123;<span class="hljs-attribute">XDG_DATA_HOME</span>:-$HOME/<span class="hljs-variable">.local</span>/share&#125;&quot;/nvim/site/autoload/plug<span class="hljs-variable">.vim</span> --create-dirs \<br>       https://raw<span class="hljs-variable">.githubusercontent</span><span class="hljs-variable">.com</span>/junegunn/vim-plug/master/plug<span class="hljs-variable">.vim</span>&#x27;<br></code></pre></td></tr></table></figure></p></li><li><p>Linux (Flatpak)</p><p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -fLo ~<span class="hljs-regexp">/.var/</span>app<span class="hljs-regexp">/io.neovim.nvim/</span>data<span class="hljs-regexp">/nvim/</span>site<span class="hljs-regexp">/autoload/</span>plug.vim --create-dirs \<br>    https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/junegunn/</span>vim-plug<span class="hljs-regexp">/master/</span>plug.vim<br></code></pre></td></tr></table></figure></p></li><li><p>Windows (PowerShell)</p><p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">iwr</span> <span class="hljs-literal">-useb</span> https://raw.githubusercontent.com/junegunn/vim<span class="hljs-literal">-plug</span>/master/plug.vim |`<br>    <span class="hljs-built_in">ni</span> <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(@(<span class="hljs-variable">$env:XDG_DATA_HOME</span>, <span class="hljs-variable">$env:LOCALAPPDATA</span>)[<span class="hljs-variable">$null</span> -eq <span class="hljs-variable">$env:XDG_DATA_HOME</span>])/nvim-data/site/autoload/plug.vim&quot;</span><br></code></pre></td></tr></table></figure></p></li></ul><h3 id="安装-node.js">安装 node.js</h3><ul><li>官网地址：https://nodejs.org/en</li><li>官网教学：https://nodejs.org/en/download/package-manager</li></ul><h4 id="windows">Windows</h4><ul><li>直接到官网下载安装就行</li><li>或者用包管理器： <ahref="https://github.com/microsoft/winget-cli">winget</a>、<ahref="https://scoop.sh/">scoop</a>、<ahref="https://community.chocolatey.org/">choco</a> 等...</li><li>使用 <a href="https://github.com/coreybutler/nvm-windows">NVM</a>也可以</li></ul><h4 id="linux">Linux</h4><ul><li><p>用对应的包管理器安装</p><ul><li><p>Arch Linux</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S nodejs npm<br></code></pre></td></tr></table></figure></p></li><li><p>Debian，可以参考<ahref="https://linux265.com/news/3798.html">这篇文章</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install nodejs npm<br></code></pre></td></tr></table></figure></p></li></ul></li><li><p>使用 <a href="https://github.com/coreybutler/nvm-windows">NVM</a>也可以</p></li></ul><h2 id="第二步编写个人配置-vimrc">第二步：编写个人配置<code>vimrc</code></h2><ul><li><p>在 <code>~/.vim</code> 中新建一个 <code>vimrc</code>文件</p></li><li><p>如果是 <ahref="https://github.com/vim/vim-win32-installer/releases">gvim</a> 则在gvim 目录下新建一个 <code>_vrimc</code> 文件</p></li><li><p>具体可以用 <code>vim --version</code> 查看（或者在 vim 中<code>:version</code>）</p></li><li><p>在 <code>vimrc</code> 中添加以下代码：</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vimscript">call plug#begin()<br>    Plug &#x27;neoclide/coc.nvim&#x27;, &#123;&#x27;branch&#x27;: &#x27;release&#x27;&#125;<br>call plug#end()<br></code></pre></td></tr></table></figure></p></li><li><p>然后保存、退出、重新进入 <code>vim</code> ，输入<code>:PlugInstall</code> 进行插件的安装</p></li><li><p>安装好后重启 <code>vim</code> 用 <code>:CocInfo</code>查看状态，<code>nvim</code> 用 <code>:checkhealth</code>。</p></li><li><p>可能提示什么没启动，用 <code>:CocStart</code> 就行了。</p></li></ul><h2 id="第三步安装提示插件">第三步：安装提示插件</h2><ul><li><p>在 <code>vim</code> 中直接用<code>:CocInstall &lt;插件名&gt;</code> 来进行安装，例：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:CocInstall coc-json coc-tsserver<br></code></pre></td></tr></table></figure></p></li><li><p>建议先安装一个提示插件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:CocInstall coc-marketplace coc-vimlsp<br></code></pre></td></tr></table></figure></p></li><li><p>可以先看看官方 <ahref="https://github.com/neoclide/coc.nvim/wiki/Language-servers">Wiki</a></p></li><li><p>我是要学习 <code>C</code> 的，故配置一个</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:CocInstall coc-clangd<br></code></pre></td></tr></table></figure></p><p>到 <a href="https://github.com/clangd/clangd">clangd</a>上面下载相应的版本，并解压，添加到环境变量中，然后就可以用了。</p><p>这一步可以不配置，输入 <code>:CocConfig</code>进入配置文件，输入：</p><p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;languageserver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rust-analyzer.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rust-analyzer.server.path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:\\rust-analyzer.exe&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abundant&amp;Deficient&amp;Perfect_Number</title>
    <link href="/2023/08/10/abundant&amp;Deficient&amp;Perfect_Number/"/>
    <url>/2023/08/10/abundant&amp;Deficient&amp;Perfect_Number/</url>
    
    <content type="html"><![CDATA[<h1 id="盈数亏数和完全数的定义">盈数，亏数和完全数的定义</h1><h2 id="亏数">亏数</h2><p>在数论中，若一个正整数除了本身外之所有因子之和比此数自身小，则称此数为亏数。比如 <span class="math inline">\(4\)</span> ，其真因子 <spanclass="math inline">\(1+2=3 &lt; 4\)</span> ，就是亏数。 亏数有 <spanclass="math inline">\(1, 2, 3, 4, 5, 7, \dots \dots\)</span></p><h2 id="盈数丰数过剩数">盈数（丰数、过剩数）</h2><p>与亏数相对的是盈数（又称丰数，过剩数），除去它本身以外的一切正因子和大于它本身。比如： <span class="math inline">\(12, 18, 20, 24 \dots\dots\)</span></p><h2 id="完全数">完全数</h2><p>这样，所有正的真因子之和与它本身相等的就是完全数了。</p><p>完全数，又称完美数或完备数。它所有的真因子（即除了自身以外的约数）的和，恰好等于它本身。完全数有 <span class="math inline">\(6, 28, 496, 8128 \dots\dots\)</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>taylor&#39;s theorem</title>
    <link href="/2023/08/10/theorem/"/>
    <url>/2023/08/10/theorem/</url>
    
    <content type="html"><![CDATA[<h1 id="泰勒公式的推导过程">泰勒公式的推导过程</h1><p><font size="5px">设函数 <span class="math inline">\(x_0 = 0\)</span>即 <span class="math inline">\(x\)</span> 在 <spanclass="math inline">\(0\)</span> 处有不限的导数，则</font></p><p><span class="math display">\[\begin{align}\large{f(x)} &amp;\large{= a_0 (x-x_0)^0 + a_1 (x-x_0)^1 + a_2 (x-x_0)^2 +\cdots + a_n (x-x_0)^n + \cdots}\\ \\&amp;\large{= a_0 + a_1 x + a_2 x^2 + a_3 x^3 + \cdots + a_n x^n +\cdots}\end{align}\]</span></p><p><font size="5px">我们可以轻易知道：</font></p><p><span class="math display">\[\begin{align}\large{f(0)} &amp; \large{= a_0 = 0! a_0}              \\\large{f&#39;(0)} &amp; \large{= a_1 = 1! a_1}      \\\large{f&#39;&#39;(0)} &amp; \large{= 2 a_2 = 2! a_2}   \\\large{f&#39;&#39;&#39;(0)} &amp; \large{= 6 a_3 = 3! a_3}  \\\vdots                              \\\vdots                              \\f^{(n)}(0) &amp; \large{= n! a_n}\end{align}\]</span></p><p><font size="5px">故：</font></p><p><span class="math inline">\(\large {a_n = \dfrac {f^{(n)}(0)} {n !}}\)</span></p><p><font size="5px">从而：</font></p><p><span class="math inline">\(\large{f(x) = \sum_{i=0}^n a_i \, x_i +R(x)} \,\,\,\, (R(x) 为余项)\)</span> <spanclass="math inline">\(\\\)</span> <spanclass="math inline">\(\large{其中：}\)</span> <spanclass="math inline">\(\\\)</span> <span class="math inline">\(\large{a_i= \dfrac {f^{(i)} (0)} {i !}}\)</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让 Nginx 作为一个 Windows 服务</title>
    <link href="/2023/07/28/%E8%AE%A9%20Nginx%20%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%20Windows%20%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/07/28/%E8%AE%A9%20Nginx%20%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%20Windows%20%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="让-nginx-作为一个-windows-服务">让 <code>Nginx</code> 作为一个Windows 服务</h1><h2 id="下载-nginx">1. 下载 <code>Nginx</code></h2><ul><li><p>到 <code>Nginx</code> <a href="https://nginx.org/en/">官网</a>下载软件解压到一个合适的地方 ## 制作服务 #### 2.1 下载<code>WinSW</code></p></li><li><p>Windows Service Wrapper in a permissive license</p></li><li><p>到<ahref="https://github.com/winsw/winsw">网站</a>上下载软件用于制作一个服务#### 2.1 重命名<code>winsw-x.x.x-bin.exe</code>为一个容易记忆的名字，此处以 <code>nginx-service.exe</code> 为例 ####2.2 添加 <code>xml</code> 配置文件且必须与 <code>exe</code> 文件同名，即<code>nginx-service.xml</code></p></li><li><p>在配置文件中输入以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nginx<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>nginx<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Nginx Startup<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logpath</span>&gt;</span>C:/Program Files/nginx-x.xx.x/logs/winsw<span class="hljs-tag">&lt;/<span class="hljs-name">logpath</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logmode</span>&gt;</span>roll<span class="hljs-tag">&lt;/<span class="hljs-name">logmode</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">executable</span>&gt;</span>C:/Program Files/nginx-x.xx.x/nginx.exe<span class="hljs-tag">&lt;/<span class="hljs-name">executable</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">startargument</span>&gt;</span>-p<span class="hljs-tag">&lt;/<span class="hljs-name">startargument</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">startargument</span>&gt;</span>C:/Program Files/nginx-x.xx.x<span class="hljs-tag">&lt;/<span class="hljs-name">startargument</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">stopargument</span>&gt;</span>-p<span class="hljs-tag">&lt;/<span class="hljs-name">stopargument</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">stopargument</span>&gt;</span>C:/Program Files/nginx-x.xx.x<span class="hljs-tag">&lt;/<span class="hljs-name">stopargument</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">stopargument</span>&gt;</span>-s<span class="hljs-tag">&lt;/<span class="hljs-name">stopargument</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">stopargument</span>&gt;</span>stop<span class="hljs-tag">&lt;/<span class="hljs-name">stopargument</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="在文件路径下输入命令-nginx-service.exe-install">2.3在文件路径下输入命令 <code>nginx-service.exe install</code></h4><h4 id="安装成功后进行测试">2.4 安装成功后进行测试</h4><p>输入启动命令 <code>net start nginx</code> 启动 输入停止命令<code>net stop nginx</code> 停止</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZShell 安装及优化</title>
    <link href="/2023/07/16/ZShell%20%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <url>/2023/07/16/ZShell%20%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="zshell-安装及优化"><code>ZShell</code> 安装及优化</h1><h2 id="方案一zshell-安装-oh-my-zsh-及优化">方案一：<code>ZShell</code>安装 <code>Oh-My-Zsh</code> 及优化</h2><ul><li><p><ahref="https://github.com/ohmyzsh/ohmyzsh">官方文档</a></p></li><li><p>输入命令安装 <code>Oh-My-Zsh</code>：<code>sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code></p></li><li><p>把主题 git下来：<code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</code></p></li><li><p>设置配置：<code>Set ZSH_THEME="powerlevel10k/powerlevel10k" in ~/.zshrc.</code></p></li><li><p>把自动建议插件 git下来：<code>git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</code></p></li><li><p>把语法高亮插件 git下来：<code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</code></p></li><li><p>把自动补全插件 git下来：<code>git clone https://github.com/zsh-users/zsh-completions $&#123;ZSH_CUSTOM:-$&#123;ZSH:-~/.oh-my-zsh&#125;/custom&#125;/plugins/zsh-completions</code></p></li><li><p>设置配置：<code>fpath+=$&#123;ZSH_CUSTOM:-$&#123;ZSH:-~/.oh-my-zsh&#125;/custom&#125;/plugins/zsh-completions/src</code></p></li><li><p>更改 <code>.zshrc</code> 配置文件：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">plugins</span><span class="hljs-operator">=</span>(<br>    git<br>    zsh-autosuggestions<br>    zsh-syntax-highlighting<br>    zsh-completions<br>)<br><br>setopt nonomatch<br></code></pre></td></tr></table></figure><h2 id="方案二zshell-安装-zim">方案二：ZShell 安装 Zim</h2></li><li><p>打开 <a href="https://github.com/zimfw/zimfw">Zim</a> 官网，找到Automatic installation，复制命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># use curl to install</span><br>curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh<br><br><span class="hljs-comment"># use wget to install</span><br>wget -nv -O - https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh<br></code></pre></td></tr></table></figure></li><li><p>更改 zshell 匹配规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 .zshrc文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;set nonomatch&quot;</span> &gt; ~/.zshrc<br></code></pre></td></tr></table></figure></li></ul><h3 id="安装-powerlevel10k">安装 <ahref="https://github.com/romkatv/powerlevel10k">powerlevel10k</a></h3><p>打开官网：https://github.com/romkatv/powerlevel10k</p><p>找到：<code>Installation</code> ，按照指示进行安装</p><p>比如 <code>zim</code> ：Add<code>zmodule romkatv/powerlevel10k --use degit</code> to<code>~/.zimrc</code> and run <code>zimfw install</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加模块到配置文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;zmodule romkatv/powerlevel10k --use degit&#x27;</span> &gt;&gt; ~/.zimrc<br><span class="hljs-comment"># 安装模块</span><br>zimfw install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
      <tag>ZShell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCOOP 安装</title>
    <link href="/2023/06/11/SCOOP%20%E5%AE%89%E8%A3%85/"/>
    <url>/2023/06/11/SCOOP%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="scoop-安装">SCOOP 安装</h1><ul><li>参考<ahref="https://github.com/ScoopInstaller/Scoop/wiki">官方文档</a>安装</li></ul><h2 id="使用以下命令进行安装">使用以下命令进行安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">env</span>:SCOOP=<span class="hljs-string">&#x27;D:\Scoop&#x27;</span></span><br>[Environment]::SetEnvironmentVariable(&#x27;SCOOP&#x27;, $env:SCOOP, &#x27;User&#x27;)<br></code></pre></td></tr></table></figure><h2 id="scoop-添加仓库">scoop 添加仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加 extras java versions 仓库</span><br>scoop bucket add extras<br>scoop bucket add java<br>scoop bucket add versions<br><span class="hljs-comment"># 查看仓库</span><br>scoop bucket list<br><span class="hljs-comment"># scoop 添加 Tests 仓库</span><br>scoop bucket add &lt;仓库名&gt; [仓库链接]<br>scoop bucket add Tests https://github.com/ScoopInstaller/Tests<br></code></pre></td></tr></table></figure><h2 id="scoop-仓库">scoop 仓库</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini">Name        Source                                              Manifests<br>----        ------                                              ---------<br>main        https://github.com/ScoopInstaller/Main                   1382<br>extras      https://github.com/ScoopInstaller/Extras                 2128<br>versions    https://github.com/ScoopInstaller/Versions                477<br>nirsoft     https://github.com/ScoopInstaller/Nirsoft                 284<br>php         https://github.com/ScoopInstaller/PHP                     389<br>nerd-fonts  https://github.com/matthewjberger/scoop-nerd-fonts        360<br>nonportable https://github.com/ScoopInstaller/Nonportable             127<br>java        https://github.com/ScoopInstaller/Java                    296<br>Tests       https://github.com/ScoopInstaller/Tests                    82<br></code></pre></td></tr></table></figure><h2 id="scoop-安装好后建议安装的包">scoop 安装好后建议安装的包</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs ini">Name                     Version                Source      <br>----                     -------                ------      <br>7zip                     24.09                  main        <br>7zip-zstd                v22.01-v1.5.5-R3       versions    <br>7ztm                     2.1.1                  extras      <br>ab-av1                   0.9.1                  extras      <br>adb                      35.0.2                 main        <br>akelpad                  4.9.9                  extras      <br>anaconda3                2024.10-1              extras      <br>android-clt              11076708               main        <br>apktool                  2.11.0                 main        <br>aria2                    1.37.0-1               main        <br>audacity                 3.7.1                  extras      <br>autoclicker              1.0.0.2                extras      <br>b3sum                    1.5.5                  main        <br>balabolka                2.15.0.888             extras      <br>bat                      0.25.0                 main        <br>binutils                 2.44                   main        <br>bottom                   0.10.2                 main        <br>brotli                   1.1.0                  main        <br>busybox                  5467-g9376eebd8        main        <br>bzip3                    1.5.1                  extras      <br>cacert                   2024-12-31             main        <br>caesium-image-compressor 2.8.2                  extras      <br>chromecookiesview        1.80                   nirsoft     <br>clangd                   19.1.2                 main        <br>clink                    1.7.10                 main        <br>cmake                    3.31.5                 main        <br>coreutils                5.97.3                 main        <br>cpu-z                    2.14                   extras      <br>crystaldiskinfo          9.5.0                  extras      <br>crystaldiskmark          8.0.6                  extras      <br>dark                     3.14                   main        <br>dbeaver                  24.3.4                 extras      <br>detect-it-easy           3.10                   extras      <br>discord                  1.0.9156-20            extras      <br>dnspy                    6.1.8                  extras      <br>dosbox                   0.74-3                 main        <br>dotnet-sdk-lts           8.0.406                versions    <br>draw.io                  26.0.9                 extras      <br>eclipse-jee              2024-12                extras      <br>element                  1.11.92                extras      <br>emacs                    29.4                   extras      <br>everything               1.4.1.1026             extras      <br>exeinfo-pe               0.0.8.8                extras      <br>exiftool                 13.19                  main        <br>fastcopy                 5.8.1                  extras      <br>fastflix                 5.8.2                  extras      <br>fd                       10.2.0                 main        <br>ffdec                    22.0.2                 extras      <br>ffmpeg                   7.1                    main        <br>fiddler                  5.0.20251.1171         extras      <br>figlet                   1.0-go                 main        <br>file                     5.45                   main        <br>firefox                  135.0                  extras      <br>fontforge                20230101               extras      <br>foobar2000               2.24.1                 extras      <br>foobar2000-encoders      2025-02-11             extras      <br>fzf                      0.60.0                 main        <br>gawk                     5.3.1                  main        <br>ghostscript              10.04.0                main        <br>git                      2.48.1                 main        <br>go                       1.24.0                 main        <br>gpg                      2.4.7                  main        <br>gpu-z                    2.62.0                 extras      <br>graalvm-oracle-jdk       23.0.2                 java        <br>grep                     3.11                   main        <br>heidisql                 12.10                  extras      <br>helix                    25.01.1                main        <br>hwinfo                   8.20-5640              extras      <br>ilspy                    9.0.0.7889             extras      <br>imagemagick              7.1.1-43               main        <br>imagine                  1.8.0                  extras      <br>inkscape                 1.4_2024-10-11_86a8ad7 extras      <br>innounp                  2.64.1                 main        <br>jadx                     1.5.1                  extras      <br>jd-gui                   1.6.6                  extras      <br>jexiftoolgui             2.0.2.0                extras      <br>jq                       1.7.1                  main        <br>keyviz                   1.0.6                  extras      <br>krita                    5.2.9                  extras      <br>latexindent              3.24.4                 main        <br>less                     668                    main        <br>libavif                  1.0.4                  main        <br>libwebp                  1.5.0                  main        <br>licecap                  1.32                   extras      <br>listary                  6.3.1.84               extras      <br>lsd                      1.1.5                  main        <br>lua                      5.4.7-2                main        <br>luajit                   2.1.1736781742-1       main        <br>lxrunoffline             3.5.0                  extras      <br>lz4                      1.10.0                 main        <br>mediainfo-gui            24.12                  extras      <br>miktex                   24.1                   main        <br>mingw                    14.2.0-rt_v12-rev1     main        <br>mkvtoolnix               90.0                   extras      <br>mongodb-database-tools   100.11.0               main        <br>monolith                 2.8.3                  main        <br>mp3tag                   3.28                   extras      <br>msys2                    2024-12-08             main        <br>musescore                4.4.4.243461245        extras      <br>nano                     7.2-22.1               main        <br>neofetch                 7.1.0                  main        <br>neovim                   0.10.4                 main        <br>nexusfont                2.7.1                  extras      <br>nircmd                   2.87                   nirsoft     <br>nmap                     7.95                   main        <br>nodejs-lts               22.14.0                main        <br>notepadplusplus          8.7.7                  extras      <br>nsudo                    8.2                    extras      <br>nu                       0.102.0                main        <br>obs-studio               31.0.1                 extras      <br>obsidian                 1.8.4                  extras      <br>office-tool-plus         10.20.15.0             extras      <br>ollydbg                  1.10                   extras      <br>openark                  1.3.8                  extras      <br>openhashtab-np           3.0.4                  nonportable <br>openjdk                  23.0.2-7               java        <br>openssh                  9.8.1.0p1              main        <br>openssl                  3.4.1                  main        <br>oraclejdk                23.0.2                 java        <br>paint.net                5.1.4                  extras      <br>pandoc                   3.6.3                  main        <br>pci-z                    2.0-2017.07.01         extras      <br>peazip                   10.2.0                 extras      <br>php                      8.4.4                  main        <br>plantuml                 1.2025.1               extras      <br>poppler                  24.08.0-0              main        <br>postman                  11.32.3                extras      <br>pwsh                     7.5.0                  main        <br>qaac                     2.83                   main        <br>qbittorrent-enhanced     5.0.3.10               extras      <br>rapidee                  9.2.937                extras      <br>rhash                    1.4.5                  main        <br>ripgrep                  14.1.1                 main        <br>rufus                    4.6                    extras      <br>rust                     1.84.1                 main        <br>rust-analyzer            2024-10-28             main        <br>rustup                   1.27.1                 main        <br>sandboxie-plus-np        1.15.6                 nonportable <br>scrcpy                   3.1                    main        <br>sed                      4.9                    main        <br>shotcut                  25.01.25               extras      <br>siyuan-note              3.1.22                 extras      <br>snipaste-beta            2.9.2-Beta             versions    <br>sqlite                   3.49.0                 main        <br>ssd-z                    16.09.09               extras      <br>starship                 1.22.1                 main        <br>sudo                     0.2020.01.26           main        <br>sumatrapdf               3.5.2                  extras      <br>sysinternals             20250213               extras      <br>systeminformer-nightly   3.2.25045.1011         versions    <br>telegram                 5.11.1                 extras      <br>temurin-jdk              23.0.2-7               java        <br>texstudio                4.8.6                  extras      <br>tikzit                   2.1.6                  extras      <br>trid                     2.24-25.02.14          main        <br>typora                   1.9.5                  extras      <br>umi-ocr-paddle           2.1.4                  extras      <br>unrar                    7.01                   main        <br>unzip                    6.00                   main        <br>upx                      4.2.4                  main        <br>vcxsrv                   21.1.13.0              extras      <br>vim                      9.1.0                  main        <br>vscode                   1.97.2                 extras      <br>wechat                   3.9.12.17              extras      <br>wecom                    4.1.32.6005            extras      <br>wget                     1.21.4                 main        <br>wincdemu                 4.0                    extras      <br>winscp                   6.3.6                  extras      <br>wireshark                4.4.3                  extras      <br>wsl2-distro-manager      1.8.15                 extras      <br>x264                     3204                   main        <br>x265                     4.1+96-5de5f56         main        <br>x64dbg                   2025-01-17_12-45       extras      <br>xmind                    25.01.01061            extras      <br>xz                       5.6.4                  main        <br>yazi                     25.2.11                main        <br>youtube-music            3.7.2                  extras      <br>yt-dlp                   2025.01.26             main        <br>zig                      0.13.0                 main        <br>zip                      3.0                    main        <br>zoxide                   0.9.7                  main        <br>zstd                     1.5.6                  main        <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>SCOOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
